.. nota::

    Ciao, benvenuto nella Community di appassionati di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme agli altri appassionati.

    **PerchÃ© unirti a noi?**

    - **Supporto esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni speciali per le festivitÃ .

    ðŸ‘‰ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _3.1.1_c:

3.1.1 Dispositivo di Conteggio
================================

Introduzione
-----------------

In questo progetto realizzeremo un sistema di conteggio che visualizza i 
numeri, composto da un sensore PIR e un display a 4 cifre. Quando il PIR 
rileva che qualcuno sta passando, il numero sul display a 4 cifre aumenterÃ  
di 1. Puoi utilizzare questo contatore per contare il numero di persone che 
attraversano un passaggio.

Componenti necessari
------------------------------

In questo progetto avremo bisogno dei seguenti componenti. 

.. image:: ../img/list_Counting_Device1.png
    :align: center

.. image:: ../img/list_Counting_Device2.png
    :align: center

Ãˆ sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistare i componenti separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTI
        - LINK DI ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_pir`
        - \-

Schema elettrico
----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../img/Schematic_three_one1.png
   :align: center

Procedura sperimentale
-----------------------------

**Passo 1**: Costruisci il circuito.

.. image:: ../img/image235.png

**Passo 2**: Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.1/

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.1_CountingDevice.c -lwiringPi

**Passo 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Dopo l'esecuzione del codice, quando il PIR rileva che qualcuno sta passando,
il numero sul display a 4 cifre aumenterÃ  di 1.

Sul modulo PIR ci sono due potenziometri: uno regola la sensibilitÃ  e l'altro la distanza di rilevamento. Per far funzionare meglio il modulo PIR, devi ruotarli entrambi completamente in senso antiorario.

.. image:: ../img/PIR_TTE.png
    :width: 400
    :align: center

.. nota::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: Nessun file o directory\", fai riferimento a :ref:`installa_wiringpi`.

**Spiegazione del codice**

.. code-block:: c

    voidÂ display()
    {
    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(0);
    Â Â Â Â hc595_shift(number[counterÂ %Â 10]);

    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(1);
    Â Â Â Â hc595_shift(number[counterÂ %Â 100Â /Â 10]);

    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(2);
    Â Â Â Â hc595_shift(number[counterÂ %Â 1000Â /Â 100]);
    Â 
    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(3);
    Â Â Â Â hc595_shift(number[counterÂ %Â 10000Â /Â 1000]);
    }

Per prima cosa, avvia il quarto display a segmento e scrivi il numero dell'unitÃ .
Poi avvia il terzo display e inserisci la cifra delle decine; successivamente,
avvia il secondo e il primo display rispettivamente e inserisci le cifre delle
centinaia e delle migliaia. PoichÃ© la velocitÃ  di aggiornamento Ã¨ molto elevata,
vediamo un display completo a quattro cifre.

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â display();
    Â Â Â Â Â Â Â Â currentState=digitalRead(sensorPin);
    Â Â Â Â Â Â Â Â if((currentState==0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â counterÂ +=1;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    }

Questa Ã¨ la funzione principale: visualizzare il numero sul display a 4 cifre
e leggere il valore del PIR. Quando il PIR rileva che qualcuno sta passando,
il numero sul display a 4 cifre aumenterÃ  di 1.

Immagine del Fenomeno
-------------------------

.. image:: ../img/image236.jpeg
   :align: center

