.. _1.1.6_c:

1.1.6 LEDドットマトリックスモジュール
======================================

はじめに
--------------------

このプロジェクトでは、LEDマトリックスモジュールについて学びます。LEDマトリックスモジュールは、MAX7219ドライバを使用して8x8のLEDマトリックスを駆動します。

必要な部品
------------------------------

このプロジェクトでは、以下のコンポーネントが必要です。

.. image:: ../img/list_dot.png

一式を購入するのが便利です。リンクは以下のとおりです。

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`LEDマトリクスモジュール`
        - |link_led_matrix_buy|

回路図
-----------------------

============ ======== ======== ====
T-Board Name physical wiringPi BCM
SPIMOSI      Pin 19   12       MOSI
SPICE0       pin 24   10       CE0
SPISCLK      Pin 23   14       SCLK
============ ======== ======== ====

.. image:: ../img/schematic_dot.png

実験の手順
----------------------------

**ステップ1:** 回路を組む。

.. image:: ../img/1.1.6fritzing.png

.. note::

    実験を開始する前にSPIをオンにしてください。詳細は :ref:`SPI設定` を参照してください。また、 :ref:`BCM2835` ライブラリも必要です。

**ステップ2:** コードのフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/1.1.6/

**ステップ3:** コードをコンパイルする。

.. raw:: html

   <run></run>

.. code-block:: 

    make

**ステップ4:** 実行可能ファイルを実行する。

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./1.1.6_LedMatrix

コードを実行すると、LEDドットマトリックスが0から9、AからZまでの順番で表示されます。

.. note::

    実行後に動作しない、またはエラープロンプトが表示される場合：「wiringPi.h: No such file or directory」、 :ref:`install_wiringpi` を参照してください。

**コード**

.. code-block:: c

    #include <bcm2835.h>
    #include <stdio.h>
    #include <string.h>
    #include <ctype.h>

    #define uchar unsigned char
    #define uint unsigned int

    #define Max7219_pinCS  RPI_GPIO_P1_24

    uchar disp1[36][8]={
    {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//0
    {0x08,0x18,0x28,0x08,0x08,0x08,0x08,0x08},//1
    {0x7E,0x2,0x2,0x7E,0x40,0x40,0x40,0x7E},//2
    {0x3E,0x2,0x2,0x3E,0x2,0x2,0x3E,0x0},//3
    {0x8,0x18,0x28,0x48,0xFE,0x8,0x8,0x8},//4
    {0x3C,0x20,0x20,0x3C,0x4,0x4,0x3C,0x0},//5
    {0x3C,0x20,0x20,0x3C,0x24,0x24,0x3C,0x0},//6
    {0x3E,0x22,0x4,0x8,0x8,0x8,0x8,0x8},//7
    {0x0,0x3E,0x22,0x22,0x3E,0x22,0x22,0x3E},//8
    {0x3E,0x22,0x22,0x3E,0x2,0x2,0x2,0x3E},//9
    {0x8,0x14,0x22,0x3E,0x22,0x22,0x22,0x22},//A
    {0x3C,0x22,0x22,0x3E,0x22,0x22,0x3C,0x0},//B
    {0x3C,0x40,0x40,0x40,0x40,0x40,0x3C,0x0},//C
    {0x7C,0x42,0x42,0x42,0x42,0x42,0x7C,0x0},//D
    {0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x7C},//E
    {0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x40},//F
    {0x3C,0x40,0x40,0x40,0x40,0x44,0x44,0x3C},//G
    {0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0x44},//H
    {0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x7C},//I
    {0x3C,0x8,0x8,0x8,0x8,0x8,0x48,0x30},//J
    {0x0,0x24,0x28,0x30,0x20,0x30,0x28,0x24},//K
    {0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7C},//L
    {0x81,0xC3,0xA5,0x99,0x81,0x81,0x81,0x81},//M
    {0x0,0x42,0x62,0x52,0x4A,0x46,0x42,0x0},//N
    {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//O
    {0x3C,0x22,0x22,0x22,0x3C,0x20,0x20,0x20},//P
    {0x1C,0x22,0x22,0x22,0x22,0x26,0x22,0x1D},//Q
    {0x3C,0x22,0x22,0x22,0x3C,0x24,0x22,0x21},//R
    {0x0,0x1E,0x20,0x20,0x3E,0x2,0x2,0x3C},//S
    {0x0,0x3E,0x8,0x8,0x8,0x8,0x8,0x8},//T
    {0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1C},//U
    {0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18},//V
    {0x0,0x49,0x49,0x49,0x49,0x2A,0x1C,0x0},//W
    {0x0,0x41,0x22,0x14,0x8,0x14,0x22,0x41},//X
    {0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y
    {0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F},//Z
    };

    void Delay_xms(uint x)
    {
        bcm2835_delay(x);
    }
    //------------------------

    void Write_Max7219_byte(uchar DATA)
    {
        bcm2835_gpio_write(Max7219_pinCS,LOW);
        bcm2835_spi_transfer(DATA);
    }

    void Write_Max7219(uchar address1,uchar dat1)
    {
        bcm2835_gpio_write(Max7219_pinCS,LOW);
        Write_Max7219_byte(address1);
        Write_Max7219_byte(dat1); 
        bcm2835_gpio_write(Max7219_pinCS,HIGH);
    }

    void Init_MAX7219()
    {
        Write_Max7219(0x09,0x00);
        Write_Max7219(0x0a,0x03);
        Write_Max7219(0x0b,0x07);
        Write_Max7219(0x0c,0x01);
        Write_Max7219(0x0f,0x00);
    }

    void Init_BCM2835()
    {
        bcm2835_spi_begin();
        bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_MSBFIRST);
        bcm2835_spi_setDataMode(BCM2835_SPI_MODE0);
        bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_256);
        bcm2835_gpio_fsel(Max7219_pinCS, BCM2835_GPIO_FSEL_OUTP);
        bcm2835_gpio_write(disp1[0][0],HIGH);
    }

    int main(void)
    {
        uchar i,j;

        if (!bcm2835_init())
        {
            printf("Unable to init bcm2835.\n");
            return 1;
        }
        Init_BCM2835();
        Delay_xms(50);
        Init_MAX7219();
        while(1)
        {
            for(j=0;j<36;j++)
            {
                for(i=1;i<9;i++)
                {
                    Write_Max7219(i,disp1[j][i-1]);
                }
                Delay_xms(1000);
            }
        }
        // bcm2835_spi_end();
        // bcm2835_close();
        return 0;
    }

**コード説明**

.. code-block:: c

    #define Max7219_pinCS  24

LEDドットマトリックスのcsピンはpin24に接続されています。

.. note::

    複数のデバイスがSPI通信を必要とする場合、csピンを異なるピンに接続するだけで済みます。

.. code-block:: c

    if (!bcm2835_init())
	{
		printf("Unable to init bcm2835.\n");
		return 1;
	}

bcm2835ライブラリが正常にインストールされているかを確認し、そうでない場合は「Unable to init bcm2835」というメッセージを出力します。

.. code-block:: c

    Init_BCM2835();
	Delay_xms(50);
	Init_MAX7219();

ライブラリとモジュールを初期化します。

.. code-block:: c

    while(1)
    {
        for(j=0;j<36;j++)
        {
            for(i=1;i<9;i++)
            {
                Write_Max7219(i,disp1[j][i-1]);
            }
            Delay_xms(1000);
        }
    }

``Write_Max7219()`` 関数は、LEDドットマトリックス上に指定した文字を表示することができます。第一パラメータは表示される行を入力し、第二パラメータはその行での点灯または消灯を示す8ビットの二進数または16進数を入力します（0はオフ、1は点灯を意味します）。

変数 ``j`` は配列 ``disp1[]`` の行（35行）を、変数 ``i`` は列（8列）を表します。

例えば、j=1およびi=2の場合、値 ``disp1[1][1]`` （0x18）がドットマトリックスに表示されます。iは8回ループして、ドットマトリックスに完全な1を表示します。jの35回のサイクル後、0-9とA-Zがドットマトリックスに表示されます。

    .. image:: ../img/led_not.png
        :width: 400

現象の画像
-----------------------

.. image:: ../img/1.1.6led_dot_matrix.JPG
