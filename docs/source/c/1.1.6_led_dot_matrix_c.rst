 
.. _1.1.6_c:

1.1.6 Module Matrice à LED
==================================

Introduction
--------------------

Dans ce projet, vous allez découvrir le module de matrice à LED. Ce module utilise le driver MAX7219 pour piloter la matrice de LED 8 x 8.

Composants nécessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_dot.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|

Schéma de câblage
-----------------------

============ ======== ======== ====
Nom T-Board  Physique wiringPi BCM
SPIMOSI      Pin 19   12       MOSI
SPICE0       pin 24   10       CE0
SPISCLK      Pin 23   14       SCLK
============ ======== ======== ====

.. image:: ../img/schematic_dot.png

Procédures expérimentales
----------------------------

**Étape 1 :** Construisez le circuit. 

.. image:: ../img/1.1.6fritzing.png

.. note::

    Activez le SPI avant de commencer l'expérience, référez-vous à :ref:`SPI Configuration` pour les détails. La bibliothèque :ref:`BCM2835` est également nécessaire.

**Étape 2 :** Accédez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/1.1.6/

**Étape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    make

**Étape 4 :** Exécutez le fichier exécutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./1.1.6_LedMatrix

Après l'exécution du code, la matrice de LED affiche les chiffres de 0 à 9 et les lettres de A à Z en séquence.

.. note::

    Si cela ne fonctionne pas après l'exécution, ou s'il y a une erreur : \"wiringPi.h: No such file or directory\", veuillez vous référer à :ref:`install_wiringpi`.


**Code**

.. code-block:: c

    #include <bcm2835.h>
    #include <stdio.h>
    #include <string.h>
    #include <ctype.h>

    #define uchar unsigned char
    #define uint unsigned int

    #define Max7219_pinCS  RPI_GPIO_P1_24

    uchar disp1[36][8]={
    {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//0
    {0x08,0x18,0x28,0x08,0x08,0x08,0x08,0x08},//1
    {0x7E,0x2,0x2,0x7E,0x40,0x40,0x40,0x7E},//2
    {0x3E,0x2,0x2,0x3E,0x2,0x2,0x3E,0x0},//3
    {0x8,0x18,0x28,0x48,0xFE,0x8,0x8,0x8},//4
    {0x3C,0x20,0x20,0x3C,0x4,0x4,0x3C,0x0},//5
    {0x3C,0x20,0x20,0x3C,0x24,0x24,0x3C,0x0},//6
    {0x3E,0x22,0x4,0x8,0x8,0x8,0x8,0x8},//7
    {0x0,0x3E,0x22,0x22,0x3E,0x22,0x22,0x3E},//8
    {0x3E,0x22,0x22,0x3E,0x2,0x2,0x2,0x3E},//9
    {0x8,0x14,0x22,0x3E,0x22,0x22,0x22,0x22},//A
    {0x3C,0x22,0x22,0x3E,0x22,0x22,0x3C,0x0},//B
    {0x3C,0x40,0x40,0x40,0x40,0x40,0x3C,0x0},//C
    {0x7C,0x42,0x42,0x42,0x42,0x42,0x7C,0x0},//D
    {0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x7C},//E
    {0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x40},//F
    {0x3C,0x40,0x40,0x40,0x40,0x44,0x44,0x3C},//G
    {0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0x44},//H
    {0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x7C},//I
    {0x3C,0x8,0x8,0x8,0x8,0x8,0x48,0x30},//J
    {0x0,0x24,0x28,0x30,0x20,0x30,0x28,0x24},//K
    {0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7C},//L
    {0x81,0xC3,0xA5,0x99,0x81,0x81,0x81,0x81},//M
    {0x0,0x42,0x62,0x52,0x4A,0x46,0x42,0x0},//N
    {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//O
    {0x3C,0x22,0x22,0x22,0x3C,0x20,0x20,0x20},//P
    {0x1C,0x22,0x22,0x22,0x22,0x26,0x22,0x1D},//Q
    {0x3C,0x22,0x22,0x22,0x3C,0x24,0x22,0x21},//R
    {0x0,0x1E,0x20,0x20,0x3E,0x2,0x2,0x3C},//S
    {0x0,0x3E,0x8,0x8,0x8,0x8,0x8,0x8},//T
    {0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1C},//U
    {0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18},//V
    {0x0,0x49,0x49,0x49,0x49,0x2A,0x1C,0x0},//W
    {0x0,0x41,0x22,0x14,0x8,0x14,0x22,0x41},//X
    {0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y
    {0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F},//Z
    };

    void Delay_xms(uint x)
    {
        bcm2835_delay(x);
    }
    //------------------------

    void Write_Max7219_byte(uchar DATA)
    {
        bcm2835_gpio_write(Max7219_pinCS,LOW);
        bcm2835_spi_transfer(DATA);
    }

    void Write_Max7219(uchar address1,uchar dat1)
    {
        bcm2835_gpio_write(Max7219_pinCS,LOW);
        Write_Max7219_byte(address1);
        Write_Max7219_byte(dat1); 
        bcm2835_gpio_write(Max7219_pinCS,HIGH);
    }

    void Init_MAX7219()
    {
        Write_Max7219(0x09,0x00);
        Write_Max7219(0x0a,0x03);
        Write_Max7219(0x0b,0x07);
        Write_Max7219(0x0c,0x01);
        Write_Max7219(0x0f,0x00);
    }

    void Init_BCM2835()
    {
        bcm2835_spi_begin();
        bcm2835_spi_setBitOrder(BCM2835_SPI_BIT_ORDER_MSBFIRST);
        bcm2835_spi_setDataMode(BCM2835_SPI_MODE0);
        bcm2835_spi_setClockDivider(BCM2835_SPI_CLOCK_DIVIDER_256);
        bcm2835_gpio_fsel(Max7219_pinCS, BCM2835_GPIO_FSEL_OUTP);
        bcm2835_gpio_write(disp1[0][0],HIGH);
    }

    int main(void)
    {
        uchar i,j;

        if (!bcm2835_init())
        {
            printf("Unable to init bcm2835.\n");
            return 1;
        }
        Init_BCM2835();
        Delay_xms(50);
        Init_MAX7219();
        while(1)
        {
            for(j=0;j<36;j++)
            {
                for(i=1;i<9;i++)
                {
                    Write_Max7219(i,disp1[j][i-1]);
                }
                Delay_xms(1000);
            }
        }
        // bcm2835_spi_end();
        // bcm2835_close();
        return 0;
    }

**Explication du code**

.. code-block:: c

    #define Max7219_pinCS  24

La broche CS de la matrice de LED est connectée à la broche 24.

.. note::

    Lorsque vous avez plusieurs périphériques nécessitant une communication SPI, il suffit de connecter les broches CS sur des broches différentes.

.. code-block:: c

    if (!bcm2835_init())
    {
		printf("Unable to init bcm2835.\n");
        return 1;
    }

Vérifiez si la bibliothèque bcm2835 est correctement installée, sinon affichez le message "Impossible d'initialiser bcm2835".

.. code-block:: c

    Init_BCM2835();
    Delay_xms(50);
    Init_MAX7219();

Initialisez les bibliothèques et le module.

.. code-block:: c

    while(1)
    {
        for(j=0;j<36;j++)
        {
            for(i=1;i<9;i++)
            {
                Write_Max7219(i,disp1[j][i-1]);
            }
            Delay_xms(1000);
        }
    }

La fonction ``Write_Max7219()`` vous permet d'afficher le caractère spécifié sur la matrice de LED, où le premier paramètre indique la ligne dans laquelle il est affiché et le deuxième paramètre indique un nombre binaire de 8 bits ou un nombre hexadécimal qui indique les LED allumées ou éteintes dans cette ligne (0 signifie éteint, 1 signifie allumé).

La variable ``j`` représente les lignes dans le tableau ``disp1[]`` (35 lignes) et la variable ``i`` représente les colonnes (8 colonnes).

Par exemple, lorsque j=1 et i=2, la valeur ``disp1[1][1]`` (0x18) est affichée sur la matrice de points. i boucle 8 fois pour afficher le chiffre 1 complet sur la matrice de points. Après 35 cycles de j, les chiffres 0-9 et les lettres A-Z sont affichés sur la matrice de points.

    .. image:: ../img/led_not.png
        :width: 400

Image du phénomène
-----------------------

.. image:: ../img/1.1.6led_dot_matrix.JPG
