.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _2.1.3_c:

2.1.3 M√≥dulo de Interruptor T√°ctil
====================================

Introducci√≥n
-------------------

En este proyecto, aprender√°s sobre el m√≥dulo de interruptor t√°ctil. 
Puede reemplazar los tipos tradicionales de interruptores con estas 
ventajas: operaci√≥n conveniente, sensaci√≥n de toque fino, control 
preciso y menor desgaste mec√°nico.


Componentes Necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/2.1.3component.png
    :width: 700
    :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los siguientes enlaces.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_touch_switch`
        - |link_touch_buy|

Diagrama Esquem√°tico
-------------------------

.. image:: ../img/2.1.3circuit.png
    :width: 500
    :align: center

Procedimientos Experimentales
---------------------------------

**Paso 1:** Construir el circuito.

.. image:: ../img/2.1.3fritzing.png
    :width: 700
    :align: center

**Paso 2:** Cambiar de directorio.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.1.3/

**Paso 3:** Compilar.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.3_TouchSwitch.c -lwiringPi

**Paso 4:** Ejecutar.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Mientras el c√≥digo se est√° ejecutando, el LED rojo se enciende; cuando tocas el m√≥dulo de interruptor t√°ctil, el LED amarillo se enciende.

.. note::

    Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", por favor consulta :ref:`install_wiringpi`.

**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define touchPin        0
    #define led1            3
    #define led2            2

    int main(void)
    {
        // When initialize wiring failed, print message to screen
        if(wiringPiSetup() == -1){
            printf(etup w"siringPi failed !");
            return 1; 
        }
        
        pinMode(touchPin, INPUT);
        pinMode(led1, OUTPUT);
        pinMode(led2, OUTPUT);
        
        while(1){
            // touch switch high, led1 on
            if(digitalRead(touchPin) == 1){
                digitalWrite(led1, LOW);
                digitalWrite(led2, HIGH);
                printf("You touch it! \r\n");
            }
            // touch switch low, led2 on
            if(digitalRead(touchPin) == 0){
                digitalWrite(led2, LOW);
                digitalWrite(led1, HIGH);
            }
        }

        return 0;
    }

**Explicaci√≥n del C√≥digo**

.. code-block:: c

    #define touchPin        0
    #define led1            3
    #define led2            2
    
Los pines GPIO17, GPIO22 y GPIO27 de la T_Extension Board corresponden a los GPIO0, 
GPIO3 y GPIO2 en wiringPi. Asigna GPIO0, GPIO3 y GPIO2 a ``touchPin``, ``led1`` y ``led2``. 

.. code-block:: c

    pinMode(touchPin, INPUT);
    pinMode(led1, OUTPUT);
    pinMode(led2, OUTPUT);

Configura ``led1`` y ``led2`` como salidas para escribir valores en ellos y configura
 ``touchPin`` como entrada para leer valores de √©l.

.. code-block:: c

    while(1){
        // touch switch high, led1 on
        if(digitalRead(touchPin) == 1){
            digitalWrite(led1, LOW);
            digitalWrite(led2, HIGH);
            printf("You touch it! \r\n");
        }
        // touch switch low, led2 on
        if(digitalRead(touchPin) == 0){
            digitalWrite(led2, LOW);
            digitalWrite(led1, HIGH);
        }
    }

Establece un bucle infinito, cuando tocas el m√≥dulo de interruptor t√°ctil, ``touchPin`` est√° alto, ``led1`` se encender√° e imprimir√° "You touch it!". Cuando ``touchPin`` est√° bajo, ``led2`` se encender√°.

Imagen del Fen√≥meno
------------------------

.. image:: ../img/2.1.3touch_switch_module.JPG
    :width: 500
    :align: center