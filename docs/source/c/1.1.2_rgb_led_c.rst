.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _1.1.2_c:

1.1.2 LED RGB
====================

Introducci√≥n
----------------

En este proyecto, controlaremos un LED RGB para que parpadee en varios colores.

Componentes Necesarios
--------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/list_rgb_led.png
    :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|

Diagrama Esquem√°tico
-----------------------

Despu√©s de conectar los pines de R, G y B a una resistencia limitadora de corriente, 
con√©ctalos a los GPIO17, GPIO18 y GPIO27 respectivamente. El pin m√°s largo (GND) del 
LED se conecta al GND de la Raspberry Pi. Cuando los tres pines reciben diferentes 
valores PWM, el LED RGB mostrar√° diferentes colores.

============ ======== ======== ===
Nombre T-Board f√≠sico wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../img/rgb_led_schematic.png

Procedimientos Experimentales
-------------------------------------

**Paso 1:** Construir el circuito.

.. image:: ../img/image61.png

**Paso 2:** Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: shell

    cd ~/raphael-kit/c/1.1.2/

**Paso 3:** Compila el c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: shell

    gcc 1.1.2_rgbLed.c -lwiringPi

.. note::

    Cuando se ejecuta la instrucci√≥n ``gcc``, si no se llama a ``-o``, el archivo ejecutable se llama ``a.out``.

**Paso 4:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block:: shell

    sudo ./a.out

Despu√©s de ejecutar el c√≥digo, ver√°s que el LED RGB muestra rojo, verde, azul, amarillo, rosa y cian.

.. note::

   Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", por favor consulta :ref:`install_wiringpi`.

**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>
    #define uchar unsigned char
    #define LedPinRed    0
    #define LedPinGreen  1
    #define LedPinBlue   2

    void ledInit(void){
        softPwmCreate(LedPinRed,  0, 100);
        softPwmCreate(LedPinGreen,0, 100);
        softPwmCreate(LedPinBlue, 0, 100);
    }

    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(LedPinRed,   r_val);
        softPwmWrite(LedPinGreen, g_val);
        softPwmWrite(LedPinBlue,  b_val);
    }

    int main(void){

        if(wiringPiSetup() == -1){ //when initialize wiring failed, printf messageto screen
            printf("setup wiringPi failed !");
            return 1;
        }

        ledInit();
        while(1){
            printf("Red\n");
            ledColorSet(0xff,0x00,0x00);   //red     
            delay(500);
            printf("Green\n");
            ledColorSet(0x00,0xff,0x00);   //green
            delay(500);
            printf("Blue\n");
            ledColorSet(0x00,0x00,0xff);   //blue
            delay(500);
            printf("Yellow\n");
            ledColorSet(0xff,0xff,0x00);   //yellow
            delay(500);
            printf("Purple\n");
            ledColorSet(0xff,0x00,0xff);   //purple
            delay(500);
            printf("Cyan\n");
            ledColorSet(0xc0,0xff,0x3e);   //cyan
            delay(500);
        }
        return 0;
    }

**Explicaci√≥n del C√≥digo**

.. code-block:: c

    #include <softPwm.h>

Biblioteca utilizada para realizar la funci√≥n pwm por software.

.. code-block:: c

    void ledInit(void){
        softPwmCreate(LedPinRed,  0, 100);
        softPwmCreate(LedPinGreen,0, 100);
        softPwmCreate(LedPinBlue, 0, 100);
    }

La funci√≥n es usar software para crear un pin PWM, estableciendo su per√≠odo entre 
0x100us-100x100us.

El prototipo de la funci√≥n softPwmCreate(LedPinRed, 0, 100) es el siguiente:

.. code-block:: c

    int softPwmCreate(int pin,int initialValue,int pwmRange);

* **Par√°metro pin:** Cualquier pin GPIO de la Raspberry Pi puede configurarse como un pin PWM.
* **Par√°metro initialValue:** El ancho de pulso inicial es initialValue multiplicado por 100us.
* **Par√°metro pwmRange:** el per√≠odo de PWM es pwmRange multiplicado por 100us.

.. code-block:: c

    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(LedPinRed,   r_val);
        softPwmWrite(LedPinGreen, g_val);
        softPwmWrite(LedPinBlue,  b_val);
    }

Esta funci√≥n sirve para establecer los colores del LED. Utilizando RGB, el par√°metro 
formal **r_val** representa la luminancia del rojo, **g_val** del verde, **b_val** del azul.

El prototipo de la funci√≥n softPwmWrite(LedPinBlue, b_val) es el siguienteÔºö

.. code-block:: c

    void softPwmWrite (int pin, int value) ;

* **Par√°metro pin:** Cualquier pin GPIO de la Raspberry Pi puede configurarse como un pin PWM.
* **Par√°metro value:** El ancho de pulso de PWM es value multiplicado por 100us. Nota que value solo puede ser menor que pwmRange definido previamente, si es mayor que pwmRange, el valor se le asignar√° un valor fijo, pwmRange.

.. code-block:: c

    ledColorSet(0xff,0x00,0x00);

Llama a la funci√≥n definida anteriormente. Escribe 0xff en LedPinRed y 0x00 en 
LedPinGreen y LedPinBlue. Solo el LED rojo se encender√° despu√©s de ejecutar este 
c√≥digo. Si deseas encender LEDs de otros colores, solo modifica los par√°metros.


Imagen del Fen√≥meno
------------------------

.. image:: ../img/image62.jpeg
