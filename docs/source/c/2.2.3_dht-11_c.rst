.. note::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti subito!

.. _2.2.3_c:

2.2.3 DHT-11
=====================

Introduzione
-----------------

Il sensore digitale di temperatura e umidit√† DHT11 √® un sensore composito che 
contiene un'uscita digitale calibrata di temperatura e umidit√†. La tecnologia 
di raccolta dei moduli digitali dedicati e quella di rilevamento della temperatura 
e dell'umidit√† sono applicate per garantire alta affidabilit√† ed eccellente stabilit√† 
del prodotto.

Il sensore include un sensore resistivo per l'umidit√† e un sensore di temperatura 
NTC, connessi a un microcontrollore a 8 bit ad alte prestazioni.


Componenti Necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_2.2.3_dht-11.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link seguenti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_humiture_sensor`
        - |link_humiture_buy|

Schema Elettrico
----------------------

.. image:: ../img/image326.png


Procedure Sperimentali
----------------------------

**Step 1:** Costruisci il circuito.

.. image:: ../img/image207.png

**Step 2:** Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.2.3/

**Step 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.3_DHT.c -lwiringPi

**Step 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del codice, il programma stamper√† sullo schermo del computer 
la temperatura e l'umidit√† rilevate dal DHT11.

.. note::

    Se non funziona dopo l'esecuzione o appare un errore come: \"wiringPi.h: No such file or directory\", fai riferimento a :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>

    #define maxTim 85
    #define dhtPin 0

    int dht11_dat[5] = {0,0,0,0,0};

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // abbassa il pin per 18 millisecondi
        pinMode(dhtPin, OUTPUT);
        digitalWrite(dhtPin, LOW);
        delay(18);
        // poi alzalo per 40 microsecondi
        digitalWrite(dhtPin, HIGH);
        delayMicroseconds(40); 
        // prepara la lettura del pin
        pinMode(dhtPin, INPUT);

        // rileva i cambiamenti e leggi i dati
        for ( i=0; i< maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);

            if (counter == 255) break;
            // ignora le prime 3 transizioni
            if ((i >= 4) && (i%2 == 0)) {
                // spingi ogni bit nei byte di archiviazione
                dht11_dat[j/8] <<= 1;
                if (counter > 50)
                    dht11_dat[j/8] |= 1;
                j++;
            }
        }
        // controlla che siano stati letti 40 bit (8bit x 5 ) + verifica il checksum nell'ultimo byte
        // stampa i dati se sono corretti
        if ((j >= 40) && 
                (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
            Fah = dht11_dat[2] * 9. / 5. + 32;
            printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                    dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
        }
    }

    int main (void) {
        if(wiringPiSetup() == -1){ //quando l'inizializzazione wiring fallisce, stampa messaggio a schermo
            printf("setup wiringPi failed !");
            return 1; 
        }
        while (1) {
            readDht11();
            delay(500); // attendi 1 sec per aggiornare
        }
        return 0 ;
    }

**Spiegazione del Codice**

.. code-block:: c

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // ...
    }

Questa funzione viene utilizzata per realizzare la funzione del DHT11.

Si pu√≤ generalmente dividere in 3 parti:

1. Preparazione per leggere il pin:

.. code-block:: c

    // abbassa il pin per 18 millisecondi
    pinMode(dhtPin, OUTPUT);
    digitalWrite(dhtPin, LOW);
    delay(18);
    // poi alzalo per 40 microsecondi
    digitalWrite(dhtPin, HIGH);
    delayMicroseconds(40); 
    // prepara la lettura del pin
    pinMode(dhtPin, INPUT);

Il flusso di comunicazione √® determinato dalla temporizzazione di lavoro.

.. image:: ../img/image208.png


Quando il DHT11 si avvia, il MCU invier√† un segnale a basso livello e poi 
manterr√† il segnale a livello alto per 40¬µs. Dopodich√©, inizier√† il rilevamento 
della condizione dell'ambiente esterno.

2. Lettura dei dati:

.. code-block:: c

    // rileva cambiamenti e leggi i dati  
    for ( i=0; i< maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);
            if (counter == 255) break;
            // ignora le prime 3 transizioni
            if ((i >= 4) && (i%2 == 0)) {
                // spingi ogni bit nei byte di archiviazione
                dht11_dat[j/8] <<= 1;
                if (counter > 50)
                    dht11_dat[j/8] |= 1;
                j++;
            }
        }

Il ciclo memorizza i dati rilevati nell'array dht11_dat[]. DHT11 trasmette dati 
di 40 bit alla volta. I primi 16 bit riguardano l'umidit√†, i 16 bit centrali 
riguardano la temperatura, e gli ultimi otto bit sono utilizzati per la verifica. 
Il formato dei dati √®:

**8bit dati interi umidit√†** + **8bit dati decimali umidit√†** + **8bit dati interi 
temperatura** + **8bit dati decimali temperatura** + **8bit bit di controllo**.

3. Stampa Umidit√† e Temperatura.

.. code-block:: c

    // controlla che siano stati letti 40 bit (8bit x 5 ) + verifica checksum nell'ultimo byte
    // stampa i dati se sono corretti
    if ((j >= 40) && 
            (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
        Fah = dht11_dat[2] * 9. / 5. + 32;
        printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
    }

Quando i dati memorizzati raggiungono i 40 bit, verifica la validit√† dei dati 
attraverso il **bit di controllo (dht11_dat[4])**, e poi stampa la temperatura 
e l'umidit√†.

Ad esempio, se i dati ricevuti sono 00101011 (valore a 8 bit dell'umidit√† intera) 
00000000 (valore a 8 bit dell'umidit√† decimale) 00111100 (valore a 8 bit della 
temperatura intera) 00000000 (valore a 8 bit della temperatura decimale) 01100111 
(bit di controllo)

**Calcolo:**

00101011 + 00000000 + 00111100 + 00000000 = 01100111.

Il risultato finale √® uguale ai dati del bit di controllo, quindi i dati ricevuti sono corretti:

Umidit√† = 43%, Temperatura = 60¬∞C.

Se non √® uguale ai dati del bit di controllo, la trasmissione dei dati non √® normale e i dati vengono ricevuti nuovamente.

Immagine del Fenomeno
------------------

.. image:: ../img/image209.jpeg
