.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _1.1.5_c:

1.1.5 Pantalla de 7 Segmentos de 4 D√≠gitos
================================================

Introducci√≥n
-----------------

A continuaci√≥n, sigue conmigo para intentar controlar la pantalla de 7 segmentos de 4 d√≠gitos.

Componentes Necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/list_4_digit.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

.. note::
    En este proyecto, para la pantalla de 7 segmentos de 4 d√≠gitos, debemos usar el modelo BS, si usas el modelo AS puede que no se encienda.
Diagrama Esquem√°tico
--------------------------

============== ======== ======== ===
Nombre T-Board f√≠sico   wiringPi BCM
GPIO17         Pin 11   0        17
GPIO27         Pin 13   2        27
GPIO22         Pin 15   3        22
SPIMOSI        Pin 19   12       10
GPIO18         Pin 12   1        18
GPIO23         Pin 16   4        23
GPIO24         Pin 18   5        24
============== ======== ======== ===

.. image:: ../img/schmatic_4_digit.png


Procedimientos Experimentales
-----------------------------------

**Paso 1**: Construir el circuito.

.. image:: ../img/image80.png

**Paso 2**: Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/1.1.5/

**Paso 3**: Compila el c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 1.1.5_4-Digit.c -lwiringPi

**Paso 4**: Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Despu√©s de ejecutar el c√≥digo, el programa realiza un conteo, aumentando en 1 por segundo, y la pantalla de 7 segmentos de 4 d√≠gitos muestra el conteo.


.. note::

    Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", por favor consulta :ref:`install_wiringpi`.
**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <wiringShift.h>
    #include <signal.h>
    #include <unistd.h>

    #define SDI 5
    #define RCLK 4
    #define SRCLK 1

    const int placePin[] = {12, 3, 2, 0};
    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

    int counter = 0;

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

    void hc595_shift(int8_t data)
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 0x80 & (data << i));
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void clearDisplay()
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 1);
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void loop()
    {
        while(1){
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
    
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
        }
    }

    void timer(int timer1)
    { 
        if (timer1 == SIGALRM)
        { 
            counter++;
            alarm(1); 
            printf("%d\n", counter);
        }
    }

    void main(void)
    {
        if (wiringPiSetup() == -1)
        { 
            printf("setup wiringPi failed !");
            return;
        }
        pinMode(SDI, OUTPUT); 
        pinMode(RCLK, OUTPUT);
        pinMode(SRCLK, OUTPUT);
        
        for (int i = 0; i < 4; i++)
        {
            pinMode(placePin[i], OUTPUT);
            digitalWrite(placePin[i], HIGH);
        }
        signal(SIGALRM, timer); 
        alarm(1);               
        loop(); 
    }


**Explicaci√≥n del C√≥digo**

.. code-block:: c

    const int placePin[] = {12, 3, 2, 0};

Estos cuatro pines controlan los pines de √°nodo com√∫n de la pantalla de 7 segmentos de cuatro d√≠gitos.

.. code-block:: c

    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

Un arreglo de c√≥digos de segmentos de 0 a 9 en Hexadecimal (√Ånodo com√∫n).

.. code-block:: c

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

Selecciona la posici√≥n del valor. Solo una posici√≥n debe estar habilitada cada vez. La posici√≥n habilitada se establecer√° en alto.

.. code-block:: c

    void loop()
    {
        while(1){
        clearDisplay();
        pickDigit(0);
        hc595_shift(number[counter % 10]);

        clearDisplay();
        pickDigit(1);
        hc595_shift(number[counter % 100 / 10]);

        clearDisplay();
        pickDigit(2);
        hc595_shift(number[counter % 1000 / 100]);
    
        clearDisplay();
        pickDigit(3);
        hc595_shift(number[counter % 10000 / 1000]);
        }
    }

La funci√≥n se usa para configurar el n√∫mero mostrado en la pantalla de 7 segmentos de 4 d√≠gitos.

* ``clearDisplay()``: escribe 11111111 para apagar estos ocho LED en la pantalla de 7 segmentos y as√≠ borrar el contenido mostrado.
* ``pickDigit(0)``: selecciona el cuarto d√≠gito de la pantalla de 7 segmentos.
* ``hc595_shift(number[counter%10])``: el n√∫mero en el d√≠gito de unidades del contador se mostrar√° en el cuarto segmento.

.. code-block:: c

    signal(SIGALRM, timer);

Esta es una funci√≥n proporcionada por el sistema, el prototipo del c√≥digo es:

.. code-block:: c

    sig_t signal(int signum,sig_t handler);

Despu√©s de ejecutar ``signal()``, una vez que el proceso recibe el correspondiente signum (en este caso SIGALRM), inmediatamente pausa la tarea existente y procesa la funci√≥n establecida (en este caso ``timer(sig)``).

.. code-block:: c

    alarm(1);

Esta es tambi√©n una funci√≥n proporcionada por el sistema. El prototipo del c√≥digo es:

.. code-block:: c

    unsigned int alarm (unsigned int seconds);

Genera una se√±al SIGALRM despu√©s de un cierto n√∫mero de segundos.

.. code-block:: c

    void timer(int timer1)
    { 
        if (timer1 == SIGALRM)
        { 
            counter++;
            alarm(1); 
            printf("%d\n", counter);
        }
    }

Usamos las funciones anteriores para implementar la funci√≥n de temporizador.
Despu√©s de que ``alarm()`` genera la se√±al SIGALRM, se llama a la funci√≥n del temporizador. Se suma 1 al contador, y la funci√≥n ``alarm(1)`` se llamar√° repetidamente despu√©s de 1 segundo.

Imagen del Fen√≥meno
---------------------------

.. image:: ../img/image81.jpeg
