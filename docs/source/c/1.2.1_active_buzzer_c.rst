 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.2.1_c:

1.2.1 Buzzer Actif
=========================

Introduction
------------

Dans ce projet, nous allons apprendre √† faire sonner un buzzer actif √† l'aide d'un transistor PNP.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_1.2.1.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Sch√©ma de c√¢blage
-----------------

Dans cette exp√©rience, un buzzer actif, un transistor PNP et une r√©sistance de 1k sont utilis√©s
 entre la base du transistor et le GPIO pour prot√©ger le transistor. Lorsque le GPIO17 de la 
 Raspberry Pi est aliment√© en niveau bas (0V) par programmation, le transistor sera conducteur 
 en raison de la saturation du courant et le buzzer √©mettra des sons. Mais lorsque le GPIO de 
 la Raspberry Pi est aliment√© en niveau haut, le transistor sera coup√© et le buzzer n'√©mettra 
 pas de sons.

.. image:: ../img/image332.png

Proc√©dures exp√©rimentales
-----------------------

**√âtape 1 :** Construire le circuit. (Le buzzer actif a un autocollant blanc sur la surface et un dos noir.)

.. image:: ../img/image104.png

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.2.1/

**√âtape 3 :** Compiler le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.2.1_ActiveBuzzer.c -lwiringPi

**√âtape 4 :** Ex√©cuter le fichier ex√©cutable ci-dessus.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Une fois le code ex√©cut√©, le buzzer √©met un bip.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution ou s'il y a un message d'erreur : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define BeepPin 0
    int main(void){
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print messageto screen
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(BeepPin, OUTPUT);   //set GPIO0 output
        while(1){
            //beep on
            printf("Buzzer on\n");
            digitalWrite(BeepPin, LOW);
            delay(100);
            printf("Buzzer off\n");
            //beep off
            digitalWrite(BeepPin, HIGH);
            delay(100);
        }
        return 0;
    }

**Explication du code**

.. code-block:: c

    digitalWrite(BeepPin, LOW);

Nous utilisons un buzzer actif dans cette exp√©rience, 
donc il √©mettra automatiquement un son lorsqu'il est 
connect√© au courant continu. Ce programme consiste 
√† configurer le port I/O √† un niveau bas (0V), 
afin de g√©rer le transistor et de faire sonner le buzzer.

.. code-block:: c

    digitalWrite(BeepPin, HIGH);

Pour configurer le port I/O √† un niveau haut (3,3V), ainsi le transistor 
n'est pas aliment√© et le buzzer ne sonne pas.

Image du ph√©nom√®ne
------------------

.. image:: ../img/image105.jpeg