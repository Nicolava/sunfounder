.. _1.2.1_c:

1.2.1 Active Buzzer
=========================

Introduction
------------

In this project, we will learn how to drive an active buzzer to beep with
a PNP transistor.

Components
----------

.. image:: ../img/list_1.2.1.png

* :ref:`GPIO Extension Board`
* :ref:`Breadboard`
* :ref:`Resistor`
* :ref:`Buzzer`
* :ref:`Transistor`

Schematic Diagram
-----------------

In this experiment, an active buzzer, a PNP transistor and a 1k resistor
are used between the base of the transistor and GPIO to protect the
transistor. When the GPIO17 of Raspberry Pi output is supplied with low
level (0V) by programming, the transistor will conduct because of
current saturation and the buzzer will make sounds. But when high level
is supplied to the IO of Raspberry Pi, the transistor will be cut off
and the buzzer will not make sounds.

.. image:: ../img/image332.png


Experimental Procedures
-----------------------

**Step 1:** Build the circuit. (The active buzzer has a white table sticker on the surface and a black back.)

.. image:: ../img/image104.png

**Step 2**: Open the code file.

.. raw:: html

   <run></run>

.. code-block::

    cd /home/pi/raphael-kit/c/1.2.1/

**Step 3**: Compile the code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.2.1_ActiveBuzzer.c -lwiringPi

**Step 4**: Run the executable file above.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

The code run, the buzzer beeps.

.. note::

    If it does not work after running, or there is an error prompt: \"wiringPi.h: No such file or directory\", please refer to :ref:`install_wiringpi`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define BeepPin 0
    int main(void){
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print messageto screen
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(BeepPin, OUTPUT);   //set GPIO0 output
        while(1){
            //beep on
            printf("Buzzer on\n");
            digitalWrite(BeepPin, LOW);
            delay(100);
            printf("Buzzer off\n");
            //beep off
            digitalWrite(BeepPin, HIGH);
            delay(100);
        }
        return 0;
    }

**Code Explanation**

.. code-block:: c

    digitalWrite(BeepPin, LOW);

We use an active buzzer in this experiment, so it will make sound 
automatically when connecting to the direct current. This sketch 
is to set the I/O port as low level (0V), thus to manage the 
transistor and make the buzzer beep. 

.. code-block:: c

    digitalWrite(BeepPin, HIGH);

To set the I/O port as high level(3.3V), thus the transistor is 
not energized and the buzzer doesnâ€™t beep.  

Phenomenon Picture
------------------

.. image:: ../img/image105.jpeg