.. nota::

    Ciao, benvenuto nella Community di appassionati di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme agli altri appassionati.

    **Perché unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti più recenti.
    - **Promozioni e Omaggi Festivi**: Partecipa a omaggi e promozioni speciali durante le festività.

    👉 Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _3.1.10_c:

3.1.10 Generatore di Codice Morse
====================================

Introduzione
-----------------

In questo progetto, realizzeremo un generatore di codice Morse, dove digiti 
una serie di lettere inglesi nel Raspberry Pi e le fai apparire come codice Morse.

Componenti necessari
------------------------------

In questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../img/3.1.10.png
    :align: center

È sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistare i componenti separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTI
        - LINK DI ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Schema elettrico
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../img/Schematic_three_one11.png
   :align: center

Procedura sperimentale
----------------------------

**Passo 1:** Costruisci il circuito. (Presta attenzione ai poli del cicalino: Quello con l'etichetta + è il polo positivo e l'altro è il negativo.)

.. image:: ../img/image269.png

**Passo 2**: Apri il file del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.10/

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.10_MorseCodeGenerator.c -lwiringPi

**Passo 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Dopo l'esecuzione del programma, digita una serie di caratteri e il cicalino e il LED invieranno i segnali corrispondenti in codice Morse.

.. note::

    Se non funziona dopo l'esecuzione o viene visualizzato un messaggio di errore: \"wiringPi.h: Nessun file o directory\", fai riferimento a :ref:`install_wiringpi`.

Spiegazione del codice
-------------------------------

.. code-block:: c

    struct MORSE{
        char word;
        unsigned char *code;
    };

    struct MORSE morseDict[]=
    {
        {'A',"01"}, {'B',"1000"}, {'C',"1010"}, {'D',"100"}, {'E',"0"}, 
        {'F',"0010"}, {'G',"110"}, {'H',"0000"}, {'I',"00"}, {'J',"0111"}, 
        {'K',"101"}, {'L',"0100"}, {'M',"11"}, {'N',"10"}, {'O',"111"}, 
        {'P',"0110"}, {'Q',"1101"}, {'R',"010"}, {'S',"000"}, {'T',"1"},
        {'U',"001"}, {'V',"0001"}, {'W',"011"}, {'X',"1001"}, {'Y',"1011"}, 
        {'Z',"1100"},{'1',"01111"}, {'2',"00111"}, {'3',"00011"}, {'4',"00001"}, 
        {'5',"00000"},{'6',"10000"}, {'7',"11000"}, {'8',"11100"}, {'9',"11110"},
        {'0',"11111"},{'?',"001100"}, {'/',"10010"}, {',',"110011"}, {'.',"010101"},
        {';',"101010"},{'!',"101011"}, {'@',"011010"}, {':',"111000"}
    };

Questa struttura MORSE è il dizionario del codice Morse, contenente caratteri A-Z, 
numeri 0-9 e simboli “?” “/” “:” “,” “.” “;” “!” “@” .

.. code-block:: c

    char *lookup(char key,struct MORSE *dict,int length)
    {
        for (int i=0;i<length;i++)
        {
            if(dict[i].word==key){
                return dict[i].code;
            }
        }    
    }

La funzione ``lookup()`` funziona cercando nel dizionario. Definisce una chiave 
``key`` per cercare nella struttura ``morseDict`` e restituisce le informazioni 
corrispondenti—il ``code`` della parola.

.. code-block:: c

    void on(){
        digitalWrite(ALedPin,HIGH);
        digitalWrite(BeepPin,HIGH);     
    }

Crea una funzione ``on()`` per accendere il cicalino e il LED.

.. code-block:: c

    void off(){
        digitalWrite(ALedPin,LOW);
        digitalWrite(BeepPin,LOW);
    }

La funzione ``off()`` spegne il cicalino e il LED.

.. code-block:: c

    void beep(int dt){
        on();
        delay(dt);
        off();
        delay(dt);
    }

Definisci una funzione ``beep()`` per far emettere suoni e lampeggiare il cicalino e il LED a intervalli di **dt**.

.. code-block:: c

    void morsecode(char *code){
        int pause = 250;
        char *point = NULL;
        int length = sizeof(morseDict)/sizeof(morseDict[0]);
        for (int i=0;i<strlen(code);i++)
        {
            point=lookup(code[i],morseDict,length);
            for (int j=0;j<strlen(point);j++){
                if (point[j]=='0')
                {
                    beep(pause/2);
                }else if(point[j]=='1')
                {
                    beep(pause);
                }
                delay(pause);
            }
        }
    }

La funzione ``morsecode()`` viene utilizzata per elaborare il codice Morse dei 
caratteri di input facendo in modo che il “1” del codice mantenga l'emissione 
di suoni o luci e lo “0” emetta suoni o luci brevemente, ad esempio inserendo 
“SOS”, e ci sarà un segnale contenente tre brevi, tre lunghi e poi tre brevi 
segmenti “ · · · - - - · · · ”.

.. code-block:: c

    int toupper(int c)
    {
        if ((c >= 'a') && (c <= 'z'))
            return c + ('A' - 'a');
        return c;
    }
    char *strupr(char *str)
    {
        char *orign=str;
        for (; *str!='\0'; str++)
            *str = toupper(*str);
    return orign;
    }

Prima della codifica, è necessario unificare le lettere in lettere maiuscole.

.. code-block:: c

    void main(){
        setup();
        char *code;
        int length=8;
        code = (char*)malloc(sizeof(char)*length);
        while (1){
            printf("Please input the messenger:");
            scanf("%s",code);
            code=strupr(code);
            printf("%s\n",code);
            morsecode(code);
        }
    }

Quando digiti i caratteri rilevanti con la tastiera, ``code=strupr(code)`` 
convertirà le lettere inserite nella loro forma maiuscola.

``Printf()`` stampa quindi il testo in chiaro sullo schermo del computer e la 
funzione ``morsecod()`` fa sì che il cicalino e il LED emettano il codice Morse.

Nota che la lunghezza del carattere di input non deve superare il **length** (può essere modificato).

Foto del fenomeno
-----------------------

.. image:: ../img/image270.jpeg
   :align: center
