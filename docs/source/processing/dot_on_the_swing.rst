.. note::

    Hola, ¬°bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones festivas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _dot_on_the_swing:

Punto en el Columpio
==============================

En este proyecto, se conectan 3 botones: uno para cambiar el tama√±o del punto, otro para cambiar la posici√≥n y el √∫ltimo para cambiar el color. Si presionas los 3 botones al mismo tiempo, obtendr√°s un punto que se balancea y tiene un color variable.

.. image:: img/dancing_dot.png

**Componentes Necesarios**

En este proyecto, necesitamos los siguientes componentes.

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN AL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

**Conexiones**

.. image:: img/circuit_dancing_dot.png

**Esquema**

.. code-block:: arduino

    import processing.io.*;

    // Define an instance of the Dot object
    Dot myDot;

    // Define the pins that will be reading button presses
    int[] pins = { 18, 23, 24 };

    void setup() {
        size(400, 400);
        // Change the color mode of the sketch to HSB
        colorMode(HSB, 360, 100, 100);
        noStroke();

        for (int i = 0; i < pins.length; i++) {
            GPIO.pinMode(pins[i], GPIO.INPUT_PULLUP);
        }

        // Create a Dot in the middle of the screen 
        myDot = new Dot(width / 2, height / 2, 100, 255);
    }

    void draw() {
        background(0); 

        // Modify attributes of the Dot depending on which buttons are pressed
        if (GPIO.digitalRead(pins[0]) == GPIO.LOW) {myDot.setSize();} 
        if (GPIO.digitalRead(pins[1]) == GPIO.LOW) {myDot.setPosition();} 
        if (GPIO.digitalRead(pins[2]) == GPIO.LOW) {myDot.setColor();} 

        // Update the Dot state
        myDot.update();
        // And draw it to the screen
        myDot.show();
    }

    class Dot { 

        float initX;
        float initY;
        float currentX;
        float currentY;
        int positionRange = 60;

        float initSize;
        float currentSize;
        int sizeRange = 50;

        int initColor;
        int currentColor;
        int ColorRange = 80;

        float timer = 0.0;
        float speed = 0.06;

        Dot(float x, float y, float s, int c) {
            initX = x;
            initY = y;
            currentX = x;
            currentY = y;

            initSize = s;
            currentSize = s;

            initColor = c;
            currentColor = c;
        }

        void setSize() {
            currentSize = initSize + sizeRange * sin( timer );
        }

        void setPosition() {
            currentY = initY + positionRange * cos( timer *2);
        }

        void setColor() {
            currentColor = int(initColor + ColorRange * sin( timer ));
        }

        void update() {
            timer += speed;
        }

        void show() {
            fill(currentColor, 100, 100); 
            ellipse(currentX, currentY, currentSize, currentSize);
        }
    }

**¬øC√≥mo funciona?**

En lugar de dibujar el punto directamente, creamos una clase ``Dot`` aqu√≠. 
Luego, declaramos el objeto (en este caso ``myDot``).

Esta es una forma sencilla de dibujar puntos con m√∫ltiples propiedades id√©nticas. 
Por ejemplo, si a√±adimos tres funciones al punto en este proyecto - cambiar tama√±o, cambiar posici√≥n y cambiar color - entonces cada punto que declaremos tendr√° la misma funci√≥n. 
Podemos usar el mismo bot√≥n para que hagan lo mismo, o podemos usar diferentes botones para controlar cada punto por separado.

Usar **clases** hace que tu boceto sea bonito, poderoso y flexible.

`Clase (programaci√≥n) - Wikipedia <https://es.wikipedia.org/wiki/Clase_(programaci%C3%B3n)>`_

A continuaci√≥n, echemos un vistazo m√°s de cerca a la clase ``Dot``.


.. code-block:: arduino

    Dot(float x, float y, float s, int c)

En la declaraci√≥n, necesita pasar cuatro par√°metros, que son los valores de las coordenadas X e Y de la posici√≥n, el tama√±o y el color (aqu√≠ est√° configurado en el `modo de color HSB <https://es.wikipedia.org/wiki/Modelo_de_color_HSV>`_ ).

Cada par√°metro se asignar√° a 2 conjuntos de valores (valor inicial y valor actual).


.. code-block:: arduino

    float initX;
    float initY;
    float currentX;
    float currentY;
    int positionRange = 60;

    float initSize;
    float currentSize;
    int sizeRange = 50;

    int initColor;
    int currentColor;
    int ColorRange = 80;

Adem√°s del valor inicial y el valor actual, tambi√©n hay un conjunto de valores de rango. No es dif√≠cil entender que el valor inicial se usa para determinar el estado inicial del punto (determinado por los par√°metros entrantes), mientras que el valor actual cambiar√° dentro del rango para hacer que el punto se mueva.

Por lo tanto, excepto por el valor de la coordenada X, los valores actuales de los otros tres par√°metros se calculan de la siguiente manera:

.. code-block:: arduino

    void setSize() {
        currentSize = initSize + sizeRange * sin( timer );
    }

    void setPosition() {
        currentY = initY + positionRange * cos( timer *2);
    }

    void setColor() {
        currentColor = int(initColor + ColorRange * sin( timer ));
    }


Si est√°s familiarizado con las funciones trigonom√©tricas, no deber√≠a ser dif√≠cil entender `seno y coseno <https://es.wikipedia.org/wiki/Seno>`_, que da un cambio peri√≥dico suave (de -1 a 1) del valor actual del punto.

Tambi√©n necesitamos agregar una semilla, ``timer``, para la variaci√≥n peri√≥dica. Se a√±ade el valor fijo en el m√©todo ``update()`` y se llama en ``draw()``.

.. code-block:: arduino

    void update() {
        timer += speed;
    }

Finalmente, el punto se muestra seg√∫n el valor actual utilizando el m√©todo ``show()``, que tambi√©n se llama en ``draw()``.

.. code-block:: arduino

    void show() {
        fill(currentColor, 100, 100); 
        ellipse(currentX, currentY, currentSize, currentSize);
    }

**¬øQu√© m√°s?**

Habiendo dominado el uso de clases, ya puedes dibujar m√∫ltiples puntos con las mismas propiedades, as√≠ que ¬øpor qu√© no intentas hacer algo m√°s genial?
Por ejemplo, ¬øqu√© tal dibujar un sistema binario estable, o hacer un juego 'DUET'?
