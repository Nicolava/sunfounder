.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _point_sur_la_balan√ßoire:

Point sur la Balan√ßoire
================================

Dans ce projet, 3 boutons sont connect√©s : un pour changer la taille du point, un pour changer la position et le dernier pour changer la couleur. Si vous appuyez sur les 3 boutons en m√™me temps, vous obtiendrez un point qui se balance et change de couleur.

.. image:: img/dancing_dot.png

**Composants N√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

**C√¢blage**

.. image:: img/circuit_dancing_dot.png
**Croquis**

.. code-block:: arduino

    import processing.io.*;

    // Define an instance of the Dot object
    Dot myDot;

    // Define the pins that will be reading button presses
    int[] pins = { 18, 23, 24 };

    void setup() {
        size(400, 400);
        // Change the color mode of the sketch to HSB
        colorMode(HSB, 360, 100, 100);
        noStroke();

        for (int i = 0; i < pins.length; i++) {
            GPIO.pinMode(pins[i], GPIO.INPUT_PULLUP);
        }

        // Create a Dot in the middle of the screen 
        myDot = new Dot(width / 2, height / 2, 100, 255);
    }

    void draw() {
        background(0); 

        // Modify attributes of the Dot depending on which buttons are pressed
        if (GPIO.digitalRead(pins[0]) == GPIO.LOW) {myDot.setSize();} 
        if (GPIO.digitalRead(pins[1]) == GPIO.LOW) {myDot.setPosition();} 
        if (GPIO.digitalRead(pins[2]) == GPIO.LOW) {myDot.setColor();} 

        // Update the Dot state
        myDot.update();
        // And draw it to the screen
        myDot.show();
    }

    class Dot { 

        float initX;
        float initY;
        float currentX;
        float currentY;
        int positionRange = 60;

        float initSize;
        float currentSize;
        int sizeRange = 50;

        int initColor;
        int currentColor;
        int ColorRange = 80;

        float timer = 0.0;
        float speed = 0.06;

        Dot(float x, float y, float s, int c) {
            initX = x;
            initY = y;
            currentX = x;
            currentY = y;

            initSize = s;
            currentSize = s;

            initColor = c;
            currentColor = c;
        }

        void setSize() {
            currentSize = initSize + sizeRange * sin( timer );
        }

        void setPosition() {
            currentY = initY + positionRange * cos( timer *2);
        }

        void setColor() {
            currentColor = int(initColor + ColorRange * sin( timer ));
        }

        void update() {
            timer += speed;
        }

        void show() {
            fill(currentColor, 100, 100); 
            ellipse(currentX, currentY, currentSize, currentSize);
        }
    }
**Comment √ßa marche ?**

Au lieu de dessiner directement un point, nous cr√©ons ici une classe ``Dot``.
Ensuite, nous d√©clarons l'objet (dans ce cas, ``myDot``).

C'est une mani√®re simple de dessiner des points avec plusieurs propri√©t√©s identiques. 
Par exemple, si nous ajoutons trois fonctions au point dans ce projet - changer la taille, 
changer la position et changer la couleur - alors chaque point que nous d√©clarons aura les 
m√™mes fonctions. Nous pouvons utiliser le m√™me bouton pour leur faire faire la m√™me chose, 
ou nous pouvons utiliser diff√©rents boutons pour contr√¥ler chaque point s√©par√©ment.

Utiliser des **classes** rend votre croquis plus √©l√©gant, puissant et flexible.

`Class (programmation informatique) - Wikip√©dia <https://fr.wikipedia.org/wiki/Classe_(informatique)>`_

Ensuite, examinons de plus pr√®s la classe ``Dot``. 

.. code-block:: arduino

    Dot(float x, float y, float s, int c)

Dans la d√©claration, elle doit recevoir quatre param√®tres : les valeurs de coordonn√©es X et Y de la position, la taille, et la couleur (ici d√©finie en `mode de couleur HSB <https://fr.wikipedia.org/wiki/Teinte_Saturation_Valeur>`_ ).

Chaque param√®tre sera assign√© √† deux ensembles de valeurs (valeur initiale et valeur actuelle).

.. code-block:: arduino

    float initX;
    float initY;
    float currentX;
    float currentY;
    int positionRange = 60;

    float initSize;
    float currentSize;
    int sizeRange = 50;

    int initColor;
    int currentColor;
    int ColorRange = 80;

En plus de la valeur initiale et de la valeur actuelle, il y a aussi un ensemble de valeurs de plage. Il n'est pas difficile de comprendre que la valeur initiale est utilis√©e pour d√©terminer l'√©tat initial du point (d√©termin√© par les param√®tres d'entr√©e), tandis que la valeur actuelle changera dans la plage pour faire bouger le point.

Par cons√©quent, √† l'exception de la valeur de la coordonn√©e X, les valeurs actuelles des trois autres param√®tres sont calcul√©es comme suit :

.. code-block:: arduino

    void setSize() {
        currentSize = initSize + sizeRange * sin( timer );
    }

    void setPosition() {
        currentY = initY + positionRange * cos( timer *2);
    }

    void setColor() {
        currentColor = int(initColor + ColorRange * sin( timer ));
    }

Si vous √™tes familier avec les fonctions trigonom√©triques, il ne devrait pas √™tre difficile de 
comprendre `sinus et cosinus <https://fr.wikipedia.org/wiki/Sinus>`_, qui donnent un changement 
p√©riodique lisse (de -1 √† 1) de la valeur actuelle du point.

Nous devons √©galement ajouter une variable, ``timer``, pour la variation p√©riodique. Elle ajoute 
la valeur fixe dans la m√©thode ``update()`` et est appel√©e dans ``draw()``.

.. code-block:: arduino

    void update() {
        timer += speed;
    }

Enfin, le point est affich√© en fonction de la valeur actuelle en utilisant la m√©thode ``show()``, qui est √©galement appel√©e dans ``draw()``.

.. code-block:: arduino

    void show() {
        fill(currentColor, 100, 100); 
        ellipse(currentX, currentY, currentSize, currentSize);
    }

**Que faire de plus ?**

Ayant ma√Ætris√© l'utilisation des classes, vous pouvez d√©j√† dessiner plusieurs points avec les m√™mes propri√©t√©s, alors pourquoi ne pas essayer de faire quelque chose de plus cool ?
Par exemple, que diriez-vous de dessiner un syst√®me binaire stable, ou de cr√©er un jeu 'DUET' ?
