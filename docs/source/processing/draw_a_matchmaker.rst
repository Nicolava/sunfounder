.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _draw_a_matchmaker:

Dessiner un Entremetteur
===========================

Vous utilisez maintenant l'environnement de d√©veloppement Processing (ou PDE). 
Il n'y a pas grand-chose √† savoir ; la grande zone est l'√©diteur de texte, et il y a une rang√©e de boutons en haut ; c'est la barre d'outils. 
Sous l'√©diteur se trouve la zone de messages, et en dessous se trouve la console. 
La zone de messages est utilis√©e pour les messages d'une ligne, et la console est utilis√©e pour des d√©tails plus techniques.

Familiarisons-nous avec l'utilisation de Processing et dessinons un entremetteur.

**Croquis**

Copiez le croquis ci-dessous dans Processing et ex√©cutez-le. Une nouvelle fen√™tre d'affichage appara√Ætra et un entremetteur acclamant sera dessin√©.

.. code-block:: arduino

    size(200,200);
    background(92, 168, 0); 
    rectMode(CENTER);
    rect(100,120,20,60);
    ellipse(100,80,45,45);
    line(90,150,80,170);
    line(110,150,120,170);
    line(90,110,70,100);
    line(110,110,130,100);

.. image:: img/draw_one1.png

.. note:: 

    Si vous l'ex√©cutez et que la zone de messages devient rouge et rapporte des erreurs, alors il y a quelque chose qui ne va pas avec le croquis. Assurez-vous de copier exactement le croquis d'exemple : les nombres doivent √™tre entre parenth√®ses, avec des virgules entre chaque nombre, et les lignes doivent se terminer par des points-virgules.


**Comment √ßa fonctionne ?**

L'essentiel ici est de comprendre que la fen√™tre d'affichage peut √™tre trait√©e comme un carr√© de papier.

Chaque pixel de la fen√™tre d'affichage est une coordonn√©e (x,y) qui d√©termine la position d'un point dans l'espace. L'origine (0,0) des coordonn√©es se trouve dans le coin sup√©rieur gauche, la direction positive de l'axe X est horizontalement vers la droite, et la direction positive de l'axe Y est verticalement vers le bas.

Ce que nous devons faire, c'est sp√©cifier quelle forme et quelle couleur doivent appara√Ætre √† ces coordonn√©es de pixels.

Par exemple, dessinez un rectangle de largeur 20 et de hauteur 60 avec les coordonn√©es (100,120) comme point m√©dian.

.. code-block:: arduino

    rectMode(CENTER);
    rect(100,120,20,60);

.. image:: img/draw_one_coodinate.png

Une fois que nous avons compris la relation entre la fen√™tre d'affichage et les axes, ce croquis n'est pas difficile pour nous, nous devons juste comprendre quelques instructions simples de dessin graphique.

    * ``size(width, height)``: D√©finit les dimensions de la fen√™tre d'affichage en largeur et hauteur en unit√©s de pixels.
    * ``background(red, green, blue)``: D√©finit la couleur de fond de la fen√™tre d'affichage.
    * ``rectMode(mode)``: Modifie l'emplacement √† partir duquel les rectangles sont dessin√©s en changeant la mani√®re dont les param√®tres donn√©s √† ``rect()`` sont interpr√©t√©s.
    * ``rect(x, y, width, height)``: Dessine un rectangle √† l'√©cran. 
    * ``ellipse(x, y, width, height)``: Dessine une ellipse (ovale) √† l'√©cran. 
    * ``line(x1, y1, x2, y2)``: Dessine une ligne (un chemin direct entre deux points) √† l'√©cran.

Pour plus d'informations, veuillez vous r√©f√©rer √† `Processing Reference <https://processing.org/reference/>`_.
