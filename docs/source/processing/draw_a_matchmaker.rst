.. note::

    Hola, ¬°bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _draw_a_matchmaker:

Dibuja un Casamentero
==========================

Ahora est√°s usando el Entorno de Desarrollo de Processing (o PDE). 
No hay mucho en √©l; el √°rea grande es el Editor de Texto, y hay una fila de botones en la parte superior; esta es la barra de herramientas. 
Debajo del editor est√° el √Årea de Mensajes, y debajo de eso est√° la Consola. 
El √Årea de Mensajes se utiliza para mensajes de una l√≠nea, y la Consola se usa para detalles m√°s t√©cnicos.

Vamos a familiarizarnos con el uso de Processing y dibujar un casamentero.

**Boceto**

Copia el boceto a continuaci√≥n en Processing y ejec√∫talo. Aparecer√° una nueva ventana de visualizaci√≥n y se dibujar√° un casamentero animado.

.. code-block:: arduino

    size(200,200);
    background(92, 168, 0); 
    rectMode(CENTER);
    rect(100,120,20,60);
    ellipse(100,80,45,45);
    line(90,150,80,170);
    line(110,150,120,170);
    line(90,110,70,100);
    line(110,110,130,100);

.. image:: img/draw_one1.png

.. note:: 

    Si lo ejecutas y el √°rea de mensajes se vuelve roja y reporta algunos errores, entonces hay algo mal con el boceto. Aseg√∫rate de copiar el boceto de ejemplo exactamente: los n√∫meros deben estar entre par√©ntesis, con comas entre cada n√∫mero, y las l√≠neas deben terminar con punto y coma.


**¬øC√≥mo funciona?**

La clave aqu√≠ es darse cuenta de que la ventana de visualizaci√≥n se puede tratar como un cuadrado de papel.

Cada p√≠xel de la ventana de visualizaci√≥n es una coordenada (x,y) que determina la posici√≥n de un punto en el espacio. El origen (0,0) de las coordenadas est√° en la esquina superior izquierda, la direcci√≥n positiva del eje X es horizontal hacia la derecha, y la direcci√≥n positiva del eje Y es vertical hacia abajo.

Lo que tenemos que hacer es especificar qu√© forma y color deben aparecer en estas coordenadas de p√≠xeles.

Por ejemplo, dibuja un rect√°ngulo de ancho 20 y alto 60 con coordenadas (100,120) como el punto medio.

.. code-block:: arduino

    rectMode(CENTER);
    rect(100,120,20,60);

.. image:: img/draw_one_coodinate.png

Una vez que entendemos la relaci√≥n entre la ventana de visualizaci√≥n y los ejes, este boceto no es dif√≠cil para nosotros, solo necesitamos entender algunas declaraciones simples de dibujo gr√°fico.

    * ``size(width, height)``: Define las dimensiones de la ventana de visualizaci√≥n en unidades de p√≠xeles.
    * ``background(red, green, blue)``: Establece el color de fondo de la ventana de visualizaci√≥n.
    * ``rectMode(mode)``: Modifica la ubicaci√≥n desde la que se dibujan los rect√°ngulos cambiando la forma en que se interpretan los par√°metros dados a ``rect()``.
    * ``rect(x, y, width, height)``: Dibuja un rect√°ngulo en la pantalla.
    * ``ellipse(x, y, width, height)``: Dibuja una elipse (√≥valo) en la pantalla.
    * ``line(x1, y1, x2, y2)``: Dibuja una l√≠nea (una ruta directa entre dos puntos) en la pantalla.

Para m√°s detalles, consulta `Processing Reference <https://processing.org/reference/>`_.
