.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni festive e omaggi**: Partecipa a concorsi e promozioni festive.

    ðŸ‘‰ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi!

.. _3.1.12_c_pi5:

3.1.12 GIOCO - 10 Secondi
=================================

Introduzione
-------------------

Seguimi in questo progetto per realizzare un dispositivo di gioco che sfida 
la tua concentrazione. Fissa l'interruttore a inclinazione a un bastone per 
creare una bacchetta magica. Agita la bacchetta e il display a 4 cifre inizierÃ  
a contare; agitala di nuovo e si fermerÃ . Se riesci a mantenere il conteggio 
visualizzato a **10.00**, hai vinto. Puoi giocare con i tuoi amici per vedere 
chi Ã¨ il mago del tempo.

Componenti necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_GAME_10_Second.png
    :align: center

Ãˆ sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTE
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-

Schema elettrico
------------------------

============ ======== ======== ===
Nome scheda   Pin fisico wiringPi BCM
GPIO17        Pin 11   0        17
GPIO27        Pin 13   2        27
GPIO22        Pin 15   3        22
SPIMOSI       Pin 19   12       10
GPIO18        Pin 12   1        18
GPIO23        Pin 16   4        23
GPIO24        Pin 18   5        24
GPIO26        Pin 37   25       26
============ ======== ======== ===

.. image:: ../img/Schematic_three_one13.png
   :align: center

Procedure sperimentali
---------------------------------

**Passo 1**: Costruisci il circuito.

.. image:: ../img/image277.png

**Passo 2**: Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.12/

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.12_GAME_10Second.c -lwiringPi

**Passo 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Agita la bacchetta e il display a 4 cifre inizierÃ  a contare; agitala di 
nuovo e il conteggio si fermerÃ . Se riesci a mantenere il conteggio a 
**10.00**, hai vinto. Agitala ancora una volta per iniziare il prossimo turno del gioco.

.. note::

    Se non funziona dopo l'esecuzione, o appare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

Spiegazione del codice
----------------------

.. code-block:: c

    voidÂ stateChange(){
    Â Â Â Â ifÂ (gameStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â counterÂ =Â 0;
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â Â Â Â Â ualarm(10000,10000);Â 
    Â Â Â Â }else{
    Â Â Â Â Â Â Â Â alarm(0);
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â }
    Â Â Â Â gameStateÂ =Â (gameStateÂ +Â 1)%2;
    }

Il gioco Ã¨ diviso in due modalitÃ :

gameState=0 Ã¨ la modalitÃ  "start", in cui il tempo viene cronometrato e visualizzato 
sul display a segmenti, e scuotendo l'interruttore a inclinazione si entra nella modalitÃ  "show".

gameState=1 Ã¨ la modalitÃ  "show", che ferma il cronometro e visualizza il tempo sul 
display a segmenti. Scuotendo di nuovo l'interruttore a inclinazione, il timer si 
resetterÃ  e il gioco ricomincerÃ .

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â display();
    Â Â Â Â Â Â Â Â currentState=digitalRead(sensorPin);
    Â Â Â Â Â Â Â Â if((currentState==0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â stateChange();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    }

Loop() Ã¨ la funzione principale. Per prima cosa, il tempo viene visualizzato sul 
display a 4 cifre e il valore dell'interruttore a inclinazione viene letto. Se lo 
stato dell'interruttore a inclinazione Ã¨ cambiato, viene chiamata stateChange().

Immagine del fenomeno
--------------------------

.. image:: ../img/image278.jpeg
   :align: center
