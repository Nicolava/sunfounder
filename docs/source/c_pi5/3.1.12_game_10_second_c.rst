.. note::

    Bonjour et bienvenue dans la CommunautÃ© Facebook des passionnÃ©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profondÃ©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : RÃ©solvez les problÃ¨mes aprÃ¨s-vente et les dÃ©fis techniques avec l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre et partager** : Ã‰changez des astuces et des tutoriels pour amÃ©liorer vos compÃ©tences.
    - **AperÃ§us exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits et aux aperÃ§us.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos produits les plus rÃ©cents.
    - **Promotions festives et cadeaux** : Participez Ã  des cadeaux et des promotions de vacances.

    ðŸ‘‰ PrÃªt Ã  explorer et Ã  crÃ©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _3.1.12_c_pi5:

3.1.12 JEU - 10 Secondes
==============================

Introduction
-------------------

Suivez-moi pour crÃ©er un dispositif de jeu afin de tester votre concentration. 
Attachez l'interrupteur Ã  bascule Ã  un bÃ¢ton pour en faire une baguette magique. 
Secouez la baguette, l'affichage Ã  4 chiffres commencera Ã  compter ; secouez Ã  nouveau
 pour arrÃªter le comptage. Si vous rÃ©ussissez Ã  maintenir le compte affichÃ© Ã  **10.00**, 
 vous gagnez. Vous pouvez jouer avec vos amis pour voir qui est le maÃ®tre du temps.


Composants nÃ©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_GAME_10_Second.png
    :align: center

Il est trÃ¨s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - Ã‰LÃ‰MENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez Ã©galement les acheter sÃ©parÃ©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-

SchÃ©ma de cÃ¢blage
------------------------

================ ======== ======== ===
Nom de la carte  Physique WiringPi BCM
GPIO17           Pin 11   0        17
GPIO27           Pin 13   2        27
GPIO22           Pin 15   3        22
SPIMOSI          Pin 19   12       10
GPIO18           Pin 12   1        18
GPIO23           Pin 16   4        23
GPIO24           Pin 18   5        24
GPIO26           Pin 37   25       26
================ ======== ======== ===

.. image:: ../img/Schematic_three_one13.png
   :align: center

ProcÃ©dures expÃ©rimentales
---------------------------------

**Ã‰tape 1** : Construisez le circuit.

.. image:: ../img/image277.png


**Ã‰tape 2** : AccÃ©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.12/

**Ã‰tape 3** : Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.12_GAME_10Second.c -lwiringPi

**Ã‰tape 4** : ExÃ©cutez le fichier exÃ©cutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Secouez la baguette, l'affichage Ã  4 chiffres commencera Ã  compter ; 
secouez Ã  nouveau pour arrÃªter le comptage. Si vous rÃ©ussissez Ã  maintenir 
le compte affichÃ© Ã  **10.00**, vous gagnez. Secouez-la une fois de plus pour 
commencer la prochaine partie.

.. note::

    Si cela ne fonctionne pas aprÃ¨s l'exÃ©cution ou s'il y a un message d'erreur : "wiringPi.h: No such file or directory", veuillez consulter :ref:`install_wiringpi`.

**Explication du code**

.. code-block:: c

    voidÂ stateChange(){
    Â Â Â Â ifÂ (gameStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â counterÂ =Â 0;
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â Â Â Â Â ualarm(10000,10000);Â 
    Â Â Â Â }else{
    Â Â Â Â Â Â Â Â alarm(0);
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â }
    Â Â Â Â gameStateÂ =Â (gameStateÂ +Â 1)%2;
    }

Le jeu est divisÃ© en deux modes :

gameState=0 est le mode "dÃ©marrer", oÃ¹ le temps est chronomÃ©trÃ© et affichÃ© sur l'afficheur Ã  
segments, et l'interrupteur Ã  bascule est secouÃ© pour entrer dans le mode "afficher".

gameState=1 est le mode "afficher", qui arrÃªte le chronomÃ©trage et affiche le temps sur 
l'afficheur Ã  segments. Secouer Ã  nouveau l'interrupteur Ã  bascule rÃ©initialise le chronomÃ¨tre 
et redÃ©marre le jeu.

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â display();
    Â Â Â Â Â Â Â Â currentState=digitalRead(sensorPin);
    Â Â Â Â Â Â Â Â if((currentState==0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â stateChange();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    }

Loop() est la fonction principale. Tout d'abord, le temps est affichÃ© sur l'afficheur Ã  4 chiffres 
et la valeur de l'interrupteur Ã  bascule est lue. Si l'Ã©tat de l'interrupteur Ã  bascule a changÃ©, 
stateChange() est appelÃ©.

Image du phÃ©nomÃ¨ne
-----------------------

.. image:: ../img/image278.jpeg
   :align: center



