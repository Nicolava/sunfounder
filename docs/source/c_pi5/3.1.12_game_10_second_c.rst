.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **ExpertenunterstÃ¼tzung**: LÃ¶sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre FÃ¤higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie frÃ¼hzeitigen Zugang zu neuen ProduktankÃ¼ndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: GenieÃŸen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    ðŸ‘‰ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _3.1.12_c_pi5:

3.1.12 SPIEL - 10 Sekunden
================================

EinfÃ¼hrung
-------------------

Folgen Sie mir und erstellen Sie ein SpielgerÃ¤t, um Ihre Konzentration herauszufordern.
Befestigen Sie den Neigungsschalter an einem Stock, um einen Zauberstab zu machen. SchÃ¼tteln Sie den Zauberstab, beginnt das 4-stellige Segment-Display mit dem ZÃ¤hlen, erneutes SchÃ¼tteln stoppt den ZÃ¤hler. Wenn es Ihnen gelingt, den angezeigten ZÃ¤hler bei 
**10,00** zu halten, dann haben Sie gewonnen. Spielen Sie das Spiel mit Ihren Freunden und finden Sie heraus, wer der Zeitmagier ist.

BenÃ¶tigte Komponenten
------------------------------

FÃ¼r dieses Projekt benÃ¶tigen wir folgende Komponenten.

.. image:: ../img/list_GAME_10_Second.png
    :align: center

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie kÃ¶nnen sie auch separat Ã¼ber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-

Schaltplan
------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../img/Schematic_three_one13.png
   :align: center

Experimentelle Verfahren
---------------------------------

**Schritt 1**: Bauen Sie den Schaltkreis.

.. image:: ../img/image277.png

**Schritt 2**: Navigieren Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.12/

**Schritt 3**: Kompilieren Sie den Code.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.12_GAME_10Second.c -lwiringPi

**Schritt 4**: Starten Sie die ausfÃ¼hrbare Datei.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

SchÃ¼tteln Sie den Zauberstab, das 4-stellige Segment-Display beginnt zu zÃ¤hlen, erneutes SchÃ¼tteln stoppt den ZÃ¤hler. Wenn Sie es schaffen, den angezeigten ZÃ¤hler bei **10,00** zu halten, dann haben Sie gewonnen. SchÃ¼tteln Sie ihn erneut, um die nÃ¤chste Runde des Spiels zu starten.

.. note::

    Wenn es nach dem Start nicht funktioniert oder die Fehlermeldung "wiringPi.h: No such file or directory" erscheint, beziehen Sie sich bitte auf :ref:`install_wiringpi`.

**Code ErklÃ¤rung**

.. code-block:: c

    voidÂ stateChange(){
    Â Â Â Â ifÂ (gameStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â counterÂ =Â 0;
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â Â Â Â Â ualarm(10000,10000);Â 
    Â Â Â Â }else{
    Â Â Â Â Â Â Â Â alarm(0);
    Â Â Â Â Â Â Â Â delay(1000);
    Â Â Â Â }
    Â Â Â Â gameStateÂ =Â (gameStateÂ +Â 1)%2;
    }

Das Spiel ist in zwei Modi unterteilt:

gameState=0 ist der "Start"-Modus, in dem die Zeit gemessen und auf dem Segmentdisplay angezeigt wird. SchÃ¼tteln Sie den Neigungsschalter, um in den "Show"-Modus zu wechseln.

GameState=1 ist der "Show"-Modus, der das Timing stoppt und die Zeit auf dem Segmentdisplay anzeigt. Ein erneutes SchÃ¼tteln des Neigungsschalters setzt den Timer zurÃ¼ck und startet das Spiel neu.

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â display();
    Â Â Â Â Â Â Â Â currentState=digitalRead(sensorPin);
    Â Â Â Â Â Â Â Â if((currentState==0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â stateChange();
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    }

Loop() ist die Hauptfunktion. Zuerst wird die Zeit auf dem 4-stelligen Segment-Display angezeigt und der Wert des Neigungsschalters gelesen. Wenn sich der Zustand des Neigungsschalters geÃ¤ndert hat, wird stateChange() aufgerufen.

PhÃ¤nomen-Bild
--------------------

.. image:: ../img/image278.jpeg
   :align: center



