 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.4_c_pi5:

1.1.4 Affichage 7 segments
=============================

Introduction
-----------------

Essayons de piloter un affichage √† 7 segments pour afficher des chiffres de 0 √† 9 et des lettres de A √† F.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_7_segment.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Sch√©ma de c√¢blage
---------------------

Connectez la broche ST_CP du 74HC595 √† GPIO18 du Raspberry Pi, SH_CP √† GPIO27, DS √† GPIO17, 
les ports de sortie parall√®les aux 8 segments de l'affichage LED. Les donn√©es sont entr√©es 
dans la broche DS vers le registre √† d√©calage lorsque SH_CP (l'entr√©e d'horloge du registre 
√† d√©calage) est en front montant, et vers le registre de m√©moire lorsque ST_CP (l'entr√©e d'horloge
 de la m√©moire) est en front montant. Vous pouvez alors contr√¥ler les √©tats de SH_CP et ST_CP via 
 les GPIO du Raspberry Pi pour transformer les donn√©es d'entr√©e s√©rie en donn√©es de sortie 
 parall√®le afin d'√©conomiser les GPIO du Raspberry Pi et piloter l'affichage.

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../img/schematic_7_segment.png

Proc√©dures exp√©rimentales
------------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/image73.png

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.1.4/

**√âtape 3 :** Compilez.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.4_7-Segment.c -lwiringPi

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable ci-dessus.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, vous verrez l'affichage √† 7 segments afficher 0-9, A-F.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a une erreur : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define   SDI   0   //serial data input
    #define   RCLK  1   //memory clock input(STCP)
    #define   SRCLK 2   //shift register clock input(SHCP)
    unsigned char SegCode[16] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};

    void init(void){
        pinMode(SDI, OUTPUT); 
        pinMode(RCLK, OUTPUT);
        pinMode(SRCLK, OUTPUT); 
        digitalWrite(SDI, 0);
        digitalWrite(RCLK, 0);
        digitalWrite(SRCLK, 0);
    }

    void hc595_shift(unsigned char dat){
        int i;
        for(i=0;i<8;i++){
            digitalWrite(SDI, 0x80 & (dat << i));
            digitalWrite(SRCLK, 1);
            delay(1);
            digitalWrite(SRCLK, 0);
        }
            digitalWrite(RCLK, 1);
            delay(1);
            digitalWrite(RCLK, 0);
    }

    int main(void){
        int i;
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print messageto screen
            printf("setup wiringPi failed !");
            return 1;
        }
        init();
        while(1){
            for(i=0;i<16;i++){
                printf("Print %1X on Segment\n", i); // %X means hex output
                hc595_shift(SegCode[i]);
                delay(500);
            }
        }
        return 0;
    }

**Explication du code**


.. code-block:: c

    unsigned char SegCode[16] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};

Un tableau de codes segment de 0 √† F en hexad√©cimal (cathode commune).

.. code-block:: c

    void init(void){
        pinMode(SDI, OUTPUT); 
        pinMode(RCLK, OUTPUT); 
        pinMode(SRCLK, OUTPUT); 
        digitalWrite(SDI, 0);
        digitalWrite(RCLK, 0);
        digitalWrite(SRCLK, 0);
    }

D√©finir les broches ds, st_cp, sh_cp en sortie et l'√©tat initial √† 0.

.. code-block:: c

    void hc595_shift(unsigned char dat){}

Attribuer une valeur de 8 bits au registre √† d√©calage du 74HC595.

.. code-block:: c

    digitalWrite(SDI, 0x80 & (dat << i));

Attribuer les donn√©es dat √† SDI(DS) par bits. Supposons ici dat=0x3f(0011 1111), lorsque i=2, 0x3f sera d√©cal√© √† gauche (<<) de 2 bits. 1111 1100 (0x3f << 2) & 1000 0000 (0x80) = 1000 0000, est vrai.

.. code-block:: c

    digitalWrite(SRCLK, 1);

La valeur initiale de SRCLK √©tait d√©finie √† 0, et ici elle est d√©finie √† 1, ce qui g√©n√®re une impulsion de front montant, puis d√©cale les donn√©es DS vers le registre √† d√©calage.

.. code-block:: c

    digitalWrite(RCLK, 1);

La valeur initiale de RCLK √©tait d√©finie √† 0, et ici elle est d√©finie √† 1, ce qui g√©n√®re une impulsion de front montant, puis d√©cale les donn√©es du registre √† d√©calage vers le registre de stockage.

.. code-block:: c

    while(1){
            for(i=0;i<16;i++){
                printf("Print %1X on Segment\n", i); // %X means hex output
                hc595_shift(SegCode[i]);
                delay(500);
            }
        }

Dans cette boucle for, nous utilisons ``%1X`` pour afficher i en tant que nombre hexad√©cimal. Appliquez i pour trouver le code segment correspondant dans le tableau ``SegCode[]``, et utilisez ``hc595_shift()`` pour passer le code SegCode dans le registre √† d√©calage du 74HC595.

.. note::
    Le format hexad√©cimal des nombres 0~15 est (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)

**Image du ph√©nom√®ne**

.. image:: ../img/image74.jpeg

