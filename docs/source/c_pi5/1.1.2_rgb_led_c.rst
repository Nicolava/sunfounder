 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.2_c_pi5:

1.1.2 LED RGB
====================

Introduction
--------------

Dans ce projet, nous allons contr√¥ler une LED RGB pour qu'elle affiche diff√©rentes couleurs.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_rgb_led.png
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|

Sch√©ma de c√¢blage
-----------------------

Apr√®s avoir connect√© les broches de R, G et B √† une r√©sistance de limitation de courant, 
connectez-les respectivement aux GPIO17, GPIO18 et GPIO27. La broche la plus longue (GND) 
de la LED se connecte au GND du Raspberry Pi. Lorsque les trois broches re√ßoivent diff√©rentes
 valeurs PWM, la LED RGB affichera diff√©rentes couleurs.

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../img/rgb_led_schematic.png

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/image61.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.1.2/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.1.2_rgbLed.c -lwiringPi

.. note::

    Lorsque l'instruction ``gcc`` est ex√©cut√©e, si ``-o`` n'est pas appel√©, alors le fichier ex√©cutable est nomm√© ``a.out``.

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, vous verrez que la LED RGB affiche les couleurs rouge, vert, bleu, jaune, rose et cyan.

.. note::

   Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a une erreur : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.


**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>
    #define uchar unsigned char
    #define LedPinRed    0
    #define LedPinGreen  1
    #define LedPinBlue   2

    void ledInit(void){
        softPwmCreate(LedPinRed,  0, 100);
        softPwmCreate(LedPinGreen,0, 100);
        softPwmCreate(LedPinBlue, 0, 100);
    }

    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(LedPinRed,   r_val);
        softPwmWrite(LedPinGreen, g_val);
        softPwmWrite(LedPinBlue,  b_val);
    }

    int main(void){

        if(wiringPiSetup() == -1){ //when initialize wiring failed, printf messageto screen
            printf("setup wiringPi failed !");
            return 1;
        }

        ledInit();
        while(1){
            printf("Red\n");
            ledColorSet(0xff,0x00,0x00);   //red     
            delay(500);
            printf("Green\n");
            ledColorSet(0x00,0xff,0x00);   //green
            delay(500);
            printf("Blue\n");
            ledColorSet(0x00,0x00,0xff);   //blue
            delay(500);
            printf("Yellow\n");
            ledColorSet(0xff,0xff,0x00);   //yellow
            delay(500);
            printf("Purple\n");
            ledColorSet(0xff,0x00,0xff);   //purple
            delay(500);
            printf("Cyan\n");
            ledColorSet(0xc0,0xff,0x3e);   //cyan
            delay(500);
        }
        return 0;
    }

**Explication du code**

.. code-block:: c

    #include <softPwm.h>

Biblioth√®que utilis√©e pour r√©aliser la fonction PWM par logiciel.

.. code-block:: c

    void ledInit(void){
        softPwmCreate(LedPinRed,  0, 100);
        softPwmCreate(LedPinGreen,0, 100);
        softPwmCreate(LedPinBlue, 0, 100);
    }

La fonction permet de cr√©er une broche PWM par logiciel, en d√©finissant sa p√©riode entre 0x100us et 100x100us.

Le prototype de la fonction softPwmCreate(LedPinRed, 0, 100) est le suivant :

.. code-block:: c

    int softPwmCreate(int pin,int initialValue,int pwmRange);

* **Param√®tre pin :** Toute broche GPIO du Raspberry Pi peut √™tre d√©finie comme une broche PWM.
* **Param√®tre initialValue :** La largeur d'impulsion initiale est initialValue fois 100us.
* **Param√®tre pwmRange :** La p√©riode de PWM est pwmRange fois 100us.

.. code-block:: c

    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(LedPinRed,   r_val);
        softPwmWrite(LedPinGreen, g_val);
        softPwmWrite(LedPinBlue,  b_val);
    }

Cette fonction permet de d√©finir les couleurs de la LED. 
En utilisant le RGB, le param√®tre formel **r_val** repr√©sente la luminance du rouge,
**g_val** celle du vert, **b_val** celle du bleu.

Le prototype de la fonction softPwmWrite(LedPinBlue, b_val) est le 
suivant :

.. code-block:: c

    void softPwmWrite (int pin, int value) ;

* **Param√®tre pin :** Toute broche GPIO du Raspberry Pi peut √™tre d√©finie comme une broche PWM.
* **Param√®tre Value :** La largeur d'impulsion de PWM est value fois 100us. Notez que value ne peut √™tre inf√©rieur √† pwmRange d√©fini pr√©c√©demment ; s'il est sup√©rieur √† pwmRange, la valeur sera fix√©e √† pwmRange.

.. code-block:: c

    ledColorSet(0xff,0x00,0x00);

Appelle la fonction d√©finie pr√©c√©demment. √âcrit 0xff dans LedPinRed et 0x00 dans
 LedPinGreen et LedPinBlue. Seule la LED rouge s'allume apr√®s l'ex√©cution de ce code. 
 Si vous souhaitez allumer les LED dans d'autres couleurs, il suffit de modifier les param√®tres.

Image du ph√©nom√®ne
------------------------

.. image:: ../img/image62.jpeg

