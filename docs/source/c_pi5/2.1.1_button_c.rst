.. nota::

    Ciao, benvenuto nella Community di appassionati di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.1_c_pi5:

2.1.1 Pulsante
==================

Introduzione
-----------------

In questo progetto, impareremo come accendere o spegnere un LED utilizzando un pulsante.

Componenti necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_2.1.1_Button.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

Schema di Collegamento
-------------------------

Utilizza un pulsante normalmente aperto come ingresso per Raspberry Pi, il collegamento 
√® mostrato nello schema sottostante. Quando il pulsante viene premuto, il GPIO18 sar√† 
impostato a livello basso (0V). Possiamo rilevare lo stato del GPIO18 tramite il programma. 
Ovvero, se il GPIO18 diventa a livello basso, significa che il pulsante √® stato premuto. 
Puoi eseguire il codice corrispondente quando il pulsante viene premuto e il LED si 
accender√†.

.. note::
    Il pin pi√π lungo del LED √® l'anodo, mentre quello pi√π corto √® il catodo.

.. image:: ../img/image302.png

.. image:: ../img/image303.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image152.png

**Passo 2:** Apri il file del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.1.1/

.. note::
    Cambia la directory nel percorso del codice per questo esperimento tramite **cd**.

**Passo 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.1_Button.c -lwiringPi

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del codice, premi il pulsante e il LED si accender√†; altrimenti rimarr√† spento.

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define LedPin      0
    #define ButtonPin   1

    int main(void){
        // Se l'inizializzazione di wiring fallisce, stampa un messaggio a schermo
        if(wiringPiSetup() == -1){
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(LedPin, OUTPUT);
        pinMode(ButtonPin, INPUT);
        digitalWrite(LedPin, HIGH);
        
        while(1){
            // Indica che il pulsante √® stato premuto
            if(digitalRead(ButtonPin) == 0){
                // Accendi il LED
                digitalWrite(LedPin, LOW);
            //  printf("...LED acceso\n");
            }
            else{
                // Spegni il LED
                digitalWrite(LedPin, HIGH);
            //  printf("LED spento...\n");
            }
        }
        return 0;
    }

**Spiegazione del Codice**

.. code-block:: c

    #define LedPin      0

Il pin GPIO17 sulla scheda T_Extension equivale al GPIO0 su wiringPi.

.. code-block:: c

    #define ButtonPin   1

ButtonPin √® collegato a GPIO1.

.. code-block:: c

    pinMode(LedPin, OUTPUT);

Imposta LedPin come uscita per assegnargli un valore.

.. code-block:: c

    pinMode(ButtonPin, INPUT);

Imposta ButtonPin come ingresso per leggere il valore di ButtonPin.

.. code-block:: C

    while(1){
            // Indica che il pulsante √® stato premuto
            if(digitalRead(ButtonPin) == 0){
                // Accendi il LED
                digitalWrite(LedPin, LOW);
            //  printf("...LED acceso\n");
            }
            else{
                // Spegni il LED
                digitalWrite(LedPin, HIGH);
            //  printf("LED spento...\n");
            }
        }


``if (digitalRead (ButtonPin) == 0)`` : controlla se il pulsante √® stato premuto. 
Esegue ``digitalWrite(LedPin, LOW)`` quando il pulsante √® premuto per accendere il LED.

La funzione ``digitalRead()`` serve a leggere HIGH (livello alto) o LOW (livello basso) 
del pin parametro di input, restituisce 1 quando il pin √® HIGH e restituisce 0 quando il 
pin √® LOW.

La funzione ``digitalWrite()`` serve a scrivere HIGH (livello alto) o LOW (livello basso) 
sul pin parametro di input.

Immagine del Fenomeno
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. image:: ../img/image153.jpeg


