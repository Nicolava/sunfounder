 
.. note::

    Bonjour et bienvenue dans la CommunautÃ© Facebook des passionnÃ©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profondÃ©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : RÃ©solvez les problÃ¨mes aprÃ¨s-vente et les dÃ©fis techniques avec l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre et partager** : Ã‰changez des astuces et des tutoriels pour amÃ©liorer vos compÃ©tences.
    - **AperÃ§us exclusifs** : AccÃ©dez en avant-premiÃ¨re aux annonces de nouveaux produits et aux aperÃ§us.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos produits les plus rÃ©cents.
    - **Promotions festives et cadeaux** : Participez Ã  des cadeaux et des promotions de vacances.

    ðŸ‘‰ PrÃªt Ã  explorer et Ã  crÃ©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _3.1.7_c_pi5:

3.1.7 Moniteur de Surchauffe
==================================

Introduction
-------------------

Vous pouvez vouloir crÃ©er un dispositif de surveillance de la surchauffe applicable Ã  diverses
 situations, par exemple, dans une usine, si nous voulons avoir une alarme et l'arrÃªt automatique
  de la machine en temps opportun en cas de surchauffe du circuit. Dans ce projet, nous utiliserons
   une thermistance, un joystick, un buzzer, une LED et un Ã©cran LCD pour rÃ©aliser un dispositif 
   intelligent de surveillance de la tempÃ©rature dont le seuil est ajustable.


Composants NÃ©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_Overheat_Monitor.png
    :align: center

Il est dÃ©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - Ã‰LÃ‰MENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez Ã©galement les acheter sÃ©parÃ©ment Ã  partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_joystick`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_i2c_lcd`
        - |link_i2clcd1602_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-

SchÃ©ma de CÃ¢blage
--------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin15    3        22
GPIO23       Pin16    4        23
GPIO24       Pin18    5        24
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: ../img/Schematic_three_one8.png
   :align: center
ProcÃ©dures expÃ©rimentales
-----------------------------

**Ã‰tape 1 :** Construisez le circuit.

.. image:: ../img/image258.png

**Ã‰tape 2 :** AccÃ©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.7/

**Ã‰tape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.7_OverheatMonitor.c -lm -lwiringPi

**Ã‰tape 4 :** ExÃ©cutez le fichier exÃ©cutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Pendant l'exÃ©cution du code, la tempÃ©rature actuelle et le seuil de haute tempÃ©rature **40** 
sont affichÃ©s sur le **I2C LCD1602**. Si la tempÃ©rature actuelle dÃ©passe le seuil, le buzzer 
et la LED se dÃ©clenchent pour vous alerter.

**Joystick** permet d'ajuster le seuil de haute tempÃ©rature en appuyant dessus. En dÃ©plaÃ§ant le
 **Joystick** dans la direction de l'axe X ou Y, vous pouvez augmenter ou diminuer le seuil de 
 haute tempÃ©rature actuel. Appuyez Ã  nouveau sur le **Joystick** pour rÃ©initialiser le seuil Ã  
 sa valeur initiale.

.. note::

    * Si un message d'erreur ``wiringPi.h: Aucun fichier ou dossier de ce type`` apparaÃ®t, veuillez vous rÃ©fÃ©rer Ã  :ref:`install_wiringpi`.
    * Si vous recevez l'erreur ``Impossible d'ouvrir le pÃ©riphÃ©rique I2C : Aucun fichier ou dossier de ce type``, vous devez vous rÃ©fÃ©rer Ã  :ref:`i2c_config` pour activer I2C et vÃ©rifier si le cÃ¢blage est correct.
    * Si le code et le cÃ¢blage sont corrects mais que l'Ã©cran LCD n'affiche toujours rien, vous pouvez ajuster le potentiomÃ¨tre Ã  l'arriÃ¨re pour augmenter le contraste.
**Explication du code**

.. code-block:: c

    intÂ get_joystick_value(){
    Â Â Â Â ucharÂ x_val;
    Â Â Â Â ucharÂ y_val;
    Â Â Â Â x_valÂ =Â get_ADC_Result(1);
    Â Â Â Â y_valÂ =Â get_ADC_Result(2);
    Â Â Â Â ifÂ (x_valÂ >Â 200){
    Â Â Â Â Â Â Â Â returnÂ 1;
        }
    Â Â Â Â elseÂ if(x_valÂ <Â 50){
    Â Â Â Â Â Â Â Â returnÂ -1;
        }
    Â Â Â Â elseÂ if(y_valÂ >Â 200){
    Â Â Â Â Â Â Â Â returnÂ -10;
        }
    Â Â Â Â elseÂ if(y_valÂ <Â 50){
    Â Â Â Â Â Â Â Â returnÂ 10;
        }
        else{
    Â Â Â Â Â Â Â Â returnÂ 0;
        }
    }

Cette fonction lit les valeurs de X et Y. Si ``X>200``, elle retournera
``1`` ; ``X<50``, elle retournera ``-1`` ; ``Y>200``, elle retournera
``-10``, et ``Y<50``, elle retournera ``10``.

.. code-block:: c

    voidÂ upper_tem_setting(){
    Â Â Â Â write(0,Â 0,Â "UpperÂ Adjust:");
    Â Â Â Â intÂ changeÂ =Â get_joystick_value();
    Â Â Â Â upperTemÂ =Â upperTemÂ +Â change;
    Â Â Â Â charÂ str[6];
    Â Â Â Â snprintf(str,3,"%d",upperTem);
    write(0,1,str);
    intÂ len;
    Â Â lenÂ =Â strlen(str);
    Â Â write(len,1,"Â Â Â Â Â Â Â Â Â Â Â Â Â ");
        delay(100);
    }

Cette fonction permet de rÃ©gler le seuil et de l'afficher sur le
I2C LCD1602.

.. code-block:: c

    doubleÂ temperature(){
    Â Â Â Â unsignedÂ charÂ temp_value;
    Â Â Â Â doubleÂ Vr,Â Rt,Â temp,Â cel,Â Fah;
    Â Â Â Â temp_valueÂ =Â get_ADC_Result(0);
    Â Â Â Â VrÂ =Â 5Â *Â (double)(temp_value)Â /Â 255;
    Â Â Â Â RtÂ =Â 10000Â *Â (double)(Vr)Â /Â (5Â -Â (double)(Vr));
    Â Â Â Â tempÂ =Â 1Â /Â (((log(Rt/10000))Â /Â 3950)+(1Â /Â (273.15Â +Â 25)));
    Â Â Â Â celÂ =Â tempÂ -Â 273.15;
    Â Â Â Â FahÂ =Â celÂ *Â 1.8Â +32;
    Â Â Â Â returnÂ cel;
    }

Lire la valeur analogique de **CH0** (thermistance) de **ADC0834** et
la convertir ensuite en valeur de tempÃ©rature.

.. code-block:: c

    voidÂ monitoring_temp(){
    Â Â Â Â charÂ str[6];
    Â Â Â Â doubleÂ celÂ =Â temperature();
    Â Â Â Â snprintf(str,6,"%.2f",cel);
    Â Â Â Â write(0,Â 0,Â "Temp:Â ");
    Â Â Â Â write(6,Â 0,Â str);
    Â Â Â Â snprintf(str,3,"%d",upperTem);
    Â Â Â Â write(0,Â 1,Â "Upper:Â ");
    Â Â Â Â write(7,Â 1,Â str);
        delay(100);
    Â Â Â Â if(celÂ >=Â upperTem){
    Â Â Â Â Â Â Â Â digitalWrite(buzzPin,Â HIGH);
    Â Â Â Â Â Â Â Â digitalWrite(LedPin,Â HIGH);
        }
    Â Â Â Â elseÂ if(celÂ <Â upperTem){
    Â Â Â Â Â Â Â Â digitalWrite(buzzPin,Â LOW);
    Â Â Â Â Â Â Â Â digitalWrite(LedPin,Â LOW);
        }
    }

Lorsque le code s'exÃ©cute, la tempÃ©rature actuelle et le seuil de haute tempÃ©rature 
**40** sont affichÃ©s sur le **I2C LCD1602**. Si la tempÃ©rature actuelle dÃ©passe le 
seuil, le buzzer et la LED s'activent pour vous alerter.

.. code-block:: c

    intÂ main(void)
    {
        setup();
    Â Â Â Â intÂ lastStateÂ =1;
    Â Â Â Â intÂ stage=0;
    Â Â Â Â whileÂ (1)
        {
    Â Â Â Â Â Â Â Â intÂ currentStateÂ =Â digitalRead(Joy_BtnPin);
    Â Â Â Â Â Â Â Â if(currentState==1Â &&Â lastStateÂ ==Â 0){
    Â Â Â Â Â Â Â Â Â Â Â Â stage=(stage+1)%2;
                delay(100);
                lcd_clear();
            }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â Â Â Â Â ifÂ (stage==1){
                upper_tem_setting();
            }
            else{
                monitoring_temp();
            }
        }
    Â Â Â Â returnÂ 0;
    }

La fonction ``main()`` contient tout le processus du programme comme suit :

1) Lorsque le programme dÃ©marre, la valeur initiale de **stage** est **0**, 
et la tempÃ©rature actuelle ainsi que le seuil de haute tempÃ©rature **40** 
sont affichÃ©s sur le **I2C LCD1602**. Si la tempÃ©rature actuelle dÃ©passe le 
seuil, le buzzer et la LED s'activent pour vous alerter.

2) Appuyez sur le joystick, et **stage** passera Ã  **1** vous permettant d'ajuster 
le seuil de haute tempÃ©rature. En dÃ©plaÃ§ant le joystick dans la direction de l'axe X ou Y, 
vous pouvez augmenter ou diminuer le seuil actuel. Appuyez Ã  nouveau sur le joystick pour 
rÃ©initialiser le seuil Ã  sa valeur initiale.


Image du phÃ©nomÃ¨ne
-------------------------

.. image:: ../img/image259.jpeg
   :align: center