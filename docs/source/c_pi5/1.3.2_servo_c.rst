.. nota::

    Ciao, benvenuto nella Community di appassionati di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunitÃ  e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti piÃ¹ recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni festive.

    ðŸ‘‰ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.3.2_c_pi5:

1.3.2 Servo
==================

Introduzione
------------------

In questo progetto impareremo come far ruotare un servo.

Componenti necessari
-------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_1.3.2.png

Ãˆ sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|

Schema di Collegamento
---------------------------

.. image:: ../img/image337.png


Procedure Sperimentali
------------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image125.png

**Passo 2**: Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.3.2

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.2_Servo.c -lwiringPi

**Passo 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del programma, il servo ruoterÃ  da 0 gradi a 180 gradi, e poi da 180 gradi a 0 gradi, ciclicamente.

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>

    #define ServoPin    1       //definisci il servo al GPIO1
    long Map(long value,long fromLow,long fromHigh,long toLow,long toHigh){
        return (toHigh-toLow)*(value-fromLow) / (fromHigh-fromLow) + toLow;
    }
    void setAngle(int pin, int angle){    //Crea una funzione per controllare l'angolo del servo.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

    int main(void)
    {
        int i;
        if(wiringPiSetup() == -1){ //se l'inizializzazione di wiring fallisce, stampa un messaggio a schermo
            printf("setup wiringPi failed !");
            return 1; 
        }
        softPwmCreate(ServoPin, 0, 200);       //inizializza il pin PMW del servo
        while(1){
            for(i=0;i<181;i++){     // Fai ruotare il servo da 0 a 180.            	setAngle(ServoPin,i);
                delay(2);
            }
            delay(1000);
            for(i=181;i>-1;i--){        // Fai ruotare il servo da 180 a 0.            	setAngle(ServoPin,i);
                delay(2);
            }
            delay(1000);
        }
        return 0;
    }

**Spiegazione del Codice**

.. code-block:: c

    long Map(long value,long fromLow,long fromHigh,long toLow,long toHigh){
        return (toHigh-toLow)*(value-fromLow) / (fromHigh-fromLow) + toLow;
    }

Crea una funzione ``Map()`` per mappare il valore nel codice seguente.

.. code-block:: c

    void setAngle(int pin, int angle){    //Crea una funzione per controllare l'angolo del servo.
        if(angle < 0)
            angle = 0;
        if(angle > 180)
            angle = 180;
        softPwmWrite(pin,Map(angle, 0, 180, 5, 25));   
    } 

Crea una funzione ``setAngle()`` per scrivere l'angolo sul servo.

.. code-block:: c

    softPwmWrite(pin,Map(angle,0,180,5,25));  

Questa funzione puÃ² modificare il ciclo di lavoro del PWM.

Per far ruotare il servo da 0 a 180 Â°, la larghezza dell'impulso dovrebbe variare
entro l'intervallo di 0,5 ms ~ 2,5 ms quando il periodo Ã¨ di 20 ms; nella
funzione ``softPwmCreate()`` abbiamo impostato che il periodo Ã¨
200x100us = 20ms, quindi dobbiamo mappare 0 ~ 180 a 5x100us ~ 25x100us.

Il prototipo di questa funzione Ã¨ mostrato di seguito.

.. code-block::

    int softPwmCreateï¼ˆint pinï¼Œint initialValueï¼Œint pwmRangeï¼‰;

* ``pin``: Qualsiasi pin GPIO di Raspberry Pi puÃ² essere impostato come pin PWM.
* ``initialValue``: La larghezza dell'impulso iniziale Ã¨ il valore iniziale moltiplicato per 100us.
* ``pwmRange``: il periodo del PWM Ã¨ pwmRange moltiplicato per 100us.

Immagine del Fenomeno
-------------------------

.. image:: ../img/image126.jpeg
