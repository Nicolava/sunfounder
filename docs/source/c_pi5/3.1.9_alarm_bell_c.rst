 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _3.1.9_c_pi5:

3.1.9 Cloche d'alarme
========================

Introduction
---------------

Dans ce projet, nous allons fabriquer un dispositif d'alarme manuel. Vous pouvez remplacer l'interrupteur √† bascule par une thermistance ou un capteur photosensible pour cr√©er une alarme de temp√©rature ou de lumi√®re.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_Alarm_Bell.png
    :align: center

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_slide_switch`
        - |link_slide_switch_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|

Sch√©ma de c√¢blage
-------------------

============ ======== ======== ===
Nom T-Board  physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../img/Schematic_three_one10.png
   :align: center

Proc√©dures exp√©rimentales
-------------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/image266.png

**√âtape 2 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.9/

**√âtape 3 :** Compilez.

.. raw:: html

   <run></run>

.. code-block::

    gcc 3.1.9_AlarmBell.c -lwiringPi -lpthread

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s le d√©marrage du programme, mettez l'interrupteur √† bascule √† droite, et le buzzer √©mettra des sons d'alarme. En m√™me temps, les LED rouges et vertes clignoteront √† une certaine fr√©quence.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : "wiringPi.h: No such file or directory", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Explication du code**

.. code-block:: c

    #include <pthread.h>

Dans ce code, vous utiliserez une nouvelle biblioth√®que, ``pthread.h``, qui est un ensemble de biblioth√®ques de threads courantes et peut r√©aliser le multithreading. Nous ajoutons le param√®tre ``-lpthread`` lors de la compilation pour le fonctionnement ind√©pendant de la LED et du buzzer.

.. code-block:: c

    void *ledWork(void *arg){       
        while(1)    
        {   
            if(flag==0){
                pthread_exit(NULL);
            }
            digitalWrite(ALedPin,HIGH);
            delay(500);
            digitalWrite(ALedPin,LOW);
            digitalWrite(BLedPin,HIGH);
            delay(500);
            digitalWrite(BLedPin,LOW);
        }
    }

La fonction ``ledWork()`` permet de d√©finir l'√©tat de fonctionnement de ces 2 LED : elle garde la 
LED verte allum√©e pendant 0,5s puis l'√©teint ; de m√™me, elle garde la LED rouge allum√©e pendant 
0,5s puis l'√©teint.

.. code-block:: c

    void¬†*buzzWork(void¬†*arg){
        while(1)
        {
            if(flag==0){
                pthread_exit(NULL);
            }
            if((note>=800)||(note<=130)){
    ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†pitch¬†=¬†-pitch;
            }
            note=note+pitch;
            softToneWrite(BeepPin,note);
            delay(10);
        }
    }

La fonction ``buzzWork()`` sert √† d√©finir l'√©tat de fonctionnement du buzzer. Ici, nous r√©glons la fr√©quence entre 130 et 800, pour accumuler ou diminuer √† un intervalle de 20.

.. code-block:: c

    void¬†on(){
    ¬†¬†¬†¬†flag¬†=¬†1;
    ¬†¬†¬†¬†if(softToneCreate(BeepPin)¬†==¬†-1){
    ¬†¬†¬†¬†¬†¬†¬†¬†printf("setup¬†softTone¬†failed¬†!");
            return; 
        }    
    ¬†¬†¬†¬†pthread_t¬†tLed;¬†¬†¬†¬†¬†
        pthread_create(&tLed,NULL,ledWork,NULL);    
    ¬†¬†¬†¬†pthread_t¬†tBuzz;¬†¬†
        pthread_create(&tBuzz,NULL,buzzWork,NULL);      
    }

Dans la fonction on() :

1) D√©finir le marqueur ``flag=1``, indiquant la fin du thread de contr√¥le.

2) Cr√©er une broche de tonalit√© contr√¥l√©e par logiciel ``BeepPin``.

3) Cr√©er deux threads s√©par√©s pour que la LED et le buzzer puissent fonctionner en m√™me temps.

* ``pthread_t tLed`` : D√©clarer un thread ``tLed``.
* ``pthread_create(&tLed,NULL,ledWork,NULL)`` : Cr√©er le thread et son prototype est le suivant :

.. code-block:: 

    int pthread_create(pthread_t *restrict tidp,const pthread_attr_t*restrict_attr,void*Ôºà*start_rtn)(void*),void *restrict arg);

Si cela r√©ussit, retourne 0 ; sinon, retourne le num√©ro d'erreur -1.

* Le premier param√®tre est un pointeur vers l'identifiant du thread.
* Le deuxi√®me est utilis√© pour d√©finir l'attribut du thread.
* Le troisi√®me est l'adresse de d√©part de la fonction d'ex√©cution du thread.
* Le dernier est celui qui ex√©cute la fonction.

.. code-block:: c

    void¬†off(){
    ¬†¬†¬†¬†flag¬†=¬†0;
        softToneStop(BeepPin);
        digitalWrite(ALedPin,LOW);
        digitalWrite(BLedPin,LOW);
    }

La fonction ``Off()`` d√©finit ``flag=0`` afin de quitter les threads **ledWork** et **BuzzWork** puis d'√©teindre le buzzer et la LED.

.. code-block:: c

    int¬†main(){¬†¬†¬†¬†¬†¬†¬†
        setup(); 
    ¬†¬†¬†¬†int¬†lastState¬†=¬†0;
        while(1){
    ¬†¬†¬†¬†¬†¬†¬†¬†int¬†currentState¬†=¬†digitalRead(switchPin);
    ¬†¬†¬†¬†¬†¬†¬†¬†if¬†((currentState¬†==¬†1)&&(lastState==0)){
                on();
            }
    ¬†¬†¬†¬†¬†¬†¬†¬†else¬†if((currentState¬†==¬†0)&&(lastState==1)){
                off();
            }
            lastState=currentState;
        }
    ¬†¬†¬†¬†return¬†0;
    }

Main() contient tout le processus du programme : lire d'abord la valeur de l'interrupteur √† 
glissi√®re ; si l'interrupteur est bascul√© vers la droite (la lecture est 1), la fonction ``on()`` 
est appel√©e, le buzzer √©met des sons et les LED rouges et vertes clignotent. Sinon, le buzzer et les LED ne fonctionnent pas.



Image du ph√©nom√®ne
------------------------

.. image:: ../img/image267.jpeg
   :align: center