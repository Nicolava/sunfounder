 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.1_c_pi5:

1.1.1 LED Clignotant
=========================

Introduction
-----------------

Dans ce projet, nous allons apprendre √† cr√©er une LED clignotante par programmation.
Gr√¢ce √† vos r√©glages, votre LED peut produire une s√©rie de ph√©nom√®nes int√©ressants. Allons-y.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/blinking_led_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Sch√©ma de c√¢blage
---------------------

Dans cette exp√©rience, connectez une r√©sistance de 220Œ© √† l'anode (la longue broche de la LED),
 puis la r√©sistance √† 3,3 V, et connectez la cathode (la broche courte) de la LED √† GPIO17 du Raspberry Pi.
  Ainsi, pour allumer une LED, nous devons rendre GPIO17 √† un niveau bas (0V).
   Nous pouvons obtenir ce ph√©nom√®ne par programmation.

.. note::

    **Pin11** se r√©f√®re √† la 11√®me broche du Raspberry Pi de gauche √† droite, et ses num√©ros de broche correspondants **wiringPi** et **BCM** sont indiqu√©s dans le tableau suivant.

Dans le contenu li√© au langage C, nous faisons √©quivaloir GPIO0 √† 0 dans wiringPi.
 Parmi le contenu li√© au langage Python, BCM 17 est 17 dans la colonne BCM du tableau suivant.
  En m√™me temps, ils sont les m√™mes que la 11√®me broche du Raspberry Pi, Pin 11.

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../img/image48.png
    :width: 800
    :align: center

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1:** Construisez le circuit.

.. image:: ../img/image49.png
    :width: 800
    :align: center

**√âtape 2 :** Allez dans le dossier du code.

1) Si vous utilisez un √©cran, il est recommand√© de suivre les √©tapes suivantes.

Allez dans **~/** et trouvez le dossier **raphael-kit**.

Trouvez **C** dans le dossier, cliquez dessus avec le bouton droit de la souris et s√©lectionnez **Ouvrir dans le terminal**.

.. image:: ../img/image50.png
    :width: 800
    :align: center

Ensuite, une fen√™tre appara√Ætra comme indiqu√© ci-dessous. Vous avez maintenant entr√© dans le chemin du code **1.1.1_BlinkingLed.c**.

.. image:: ../img/image51.png
    :width: 800
    :align: center

Dans les projets suivants, nous utiliserons la commande pour entrer dans le fichier de code au lieu de faire un clic droit. 
Mais vous pouvez choisir la m√©thode que vous pr√©f√©rez.


2) Si vous vous connectez √† distance au Raspberry Pi, utilisez ``cd`` pour changer de r√©pertoire :

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/c/1.1.1/

.. note::
    Changez de r√©pertoire vers le chemin du code dans cette exp√©rience via cd.

Dans tous les cas, vous √™tes maintenant dans le dossier C. 
Les proc√©dures suivantes bas√©es sur ces deux m√©thodes sont les m√™mes. Continuons.

**√âtape 3 :** Compilez le code

.. raw:: html

   <run></run>

.. code-block::

   gcc 1.1.1_BlinkingLed.c -o BlinkingLed -lwiringPi

.. note::
    gcc est GNU Compiler Collection. 
    Ici, il compile le fichier de langage C ``1.1.1_BlinkingLed.c`` et produit un fichier ex√©cutable.

Dans la commande, ``-o`` signifie sortie (le caract√®re imm√©diatement apr√®s -o est le nom de fichier de sortie apr√®s compilation,
 et un ex√©cutable nomm√© ``BlinkingLed`` sera g√©n√©r√© ici) et ``-lwiringPi`` est pour charger la biblioth√®que wiringPi (``l`` est l'abr√©viation de library).

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable g√©n√©r√© √† l'√©tape pr√©c√©dente.

.. raw:: html

   <run></run>

.. code-block::

   sudo ./BlinkingLed

.. note::

   Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a une erreur : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

Pour contr√¥ler le GPIO, vous devez ex√©cuter le programme, 
en utilisant la commande ``sudo`` (superuser do). 
La commande ``./`` indique le r√©pertoire actuel. 
La commande enti√®re est d'ex√©cuter le ``BlinkingLed`` dans le r√©pertoire actuel.


Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

Si vous souhaitez modifier le fichier de code ``1.1.1_BlinkingLed.c``, arr√™tez le code puis tapez la commande suivante pour l'ouvrir :

.. raw:: html

   <run></run>

.. code-block::

   nano 1.1.1_BlinkingLed.c


Appuyez sur ``Ctrl+X`` pour quitter. Si vous avez modifi√© le code, 
une invite vous demandera si vous souhaitez enregistrer les modifications ou non. 
Tapez ``Y`` (enregistrer) ou ``N`` (ne pas enregistrer). Puis appuyez sur ``Entr√©e`` pour quitter. 
R√©p√©tez ``√âtape 3`` et ``√âtape 4`` pour voir l'effet apr√®s modification.

.. image:: ../img/image53.png
    :width: 800
    :align: center
**Code**

Le code du programme est pr√©sent√© comme suit :

.. code-block:: c

   #include <wiringPi.h>  
   #include <stdio.h>
   #define LedPin      0
   int main(void)
   {
      // When initialize wiring failed, print message to screen
      if(wiringPiSetup() == -1){
         printf("setup wiringPi failed !");
         return 1;
      }
      pinMode(LedPin, OUTPUT);// Set LedPin as output to write value to it.
      while(1){
         // LED on
         digitalWrite(LedPin, LOW);
         printf("...LED on\n");
         delay(500);
         // LED off
         digitalWrite(LedPin, HIGH);
         printf("LED off...\n");
         delay(500);
      }
      return 0;
   }

**Explication du code**

.. code-block:: c

   #include <wiringPi.h>

La biblioth√®que de gestion mat√©rielle est con√ßue pour le langage C du Raspberry Pi. 
Ajouter cette biblioth√®que facilite l'initialisation du mat√©riel, et la sortie des ports I/O, 
PWM, etc.

.. code-block:: c

   #include <stdio.h>

Biblioth√®que standard d'E/S. La fonction printf utilis√©e pour afficher les donn√©es √† l'√©cran est r√©alis√©e par cette biblioth√®que. 
Il existe de nombreuses autres fonctions de performance √† explorer.

.. code-block:: c

   #define LedPin 0

La broche GPIO17 de la T_Extension Board correspond √† la GPIO0 dans wiringPi.
Assigner GPIO0 √† LedPin, LedPin repr√©sente GPIO0 dans le code suivant.

.. code-block:: c

   if(wiringPiSetup() == -1){
      printf("setup wiringPi failed !");
      return 1;

Cela initialise wiringPi et suppose que le programme appelant va utiliser le sch√©ma de num√©rotation des broches wiringPi.

Cette fonction doit √™tre appel√©e avec les privil√®ges root.
Lorsque l'initialisation de wiring √©choue, afficher un message √† l'√©cran.
 La fonction ``return`` est utilis√©e pour sortir de la fonction en cours.
  Utiliser return dans la fonction ``main()`` met fin au programme.

.. code-block:: c

   pinMode(LedPin, OUTPUT);

D√©finir ``LedPin`` comme sortie pour √©crire une valeur dessus.

.. code-block:: c

   digitalWrite(LedPin, LOW);

D√©finir GPIO0 √† 0V (niveau bas). √âtant donn√© que la cathode de la LED est connect√©e √† GPIO0,
 la LED s'allume si GPIO0 est r√©gl√© sur bas. Au contraire,
  d√©finir GPIO0 √† un niveau haut √©teindra la LED.

.. code-block:: c

   printf("...LED √©teinte\n");

La fonction printf est une fonction de biblioth√®que 
standard et son prototype se trouve dans le fichier d'en-t√™te ``stdio.h``.

La forme g√©n√©rale de l'appel est : ``printf(" cha√Æne de contr√¥le de format ", colonnes de tableau de sortie)``. 
La cha√Æne de contr√¥le de format est utilis√©e pour sp√©cifier le format de sortie, 
qui est divis√© en cha√Æne de format et cha√Æne sans format. 
La cha√Æne de format commence par ``%`` suivie de caract√®res de format, tels que ``%d`` pour la sortie d'entier d√©cimal. 
Les cha√Ænes sans format sont imprim√©es telles quelles. 
Ce qui est utilis√© ici est une cha√Æne sans format, 
suivie de ``\n`` qui est un caract√®re de nouvelle ligne, repr√©sentant un saut de ligne automatique apr√®s l'impression d'une cha√Æne.

.. code-block:: c

   delay(500);

Maintient l'√©tat actuel HIGH ou LOW pendant 500 ms.

Il s'agit d'une fonction qui suspend le programme pendant une p√©riode de temps. 
Et la vitesse du programme est d√©termin√©e par notre mat√©riel. 
Ici, nous allumons ou √©teignons la LED. S'il n'y a pas de fonction de d√©lai, 
le programme ex√©cutera l'ensemble du programme tr√®s rapidement et en boucle continue. 
Nous avons donc besoin de la fonction de d√©lai pour nous aider √† √©crire et d√©boguer le programme.

.. code-block:: c

   return 0;

Habituellement, il est plac√© √† la fin de la fonction principale, indiquant que la fonction renvoie 0 en cas de succ√®s.

Image du ph√©nom√®ne
--------------------

.. image:: ../img/image54.jpeg
   :width: 800
   :align: center