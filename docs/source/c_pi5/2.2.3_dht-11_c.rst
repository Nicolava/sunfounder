.. note::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Immergiti pi√π a fondo in Raspberry Pi, Arduino ed ESP32 con altri appassionati.

    **Perch√© unirti?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.3_c_pi5:

2.2.3 DHT-11
==================

Introduzione
------------------

Il sensore digitale di temperatura e umidit√† DHT11 √® un sensore composito che 
contiene un'uscita del segnale digitale calibrata per temperatura e umidit√†. 
La tecnologia di raccolta dei moduli digitali dedicati e la tecnologia di 
rilevamento di temperatura e umidit√† vengono applicate per garantire che il 
prodotto abbia un'elevata affidabilit√† e un'ottima stabilit√†.

I sensori includono un sensore resistivo per l'umidit√† e un sensore NTC per la 
temperatura, collegati a un microcontrollore a 8 bit ad alte prestazioni.


Componenti necessari
------------------------

In questo progetto abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_2.2.3_dht-11.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTE
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_humiture_sensor`
        - |link_humiture_buy|

Schema elettrico
---------------------

.. image:: ../img/image326.png


Procedure sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image207.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.2.3/

**Passo 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.3_DHT.c -lwiringPi

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del codice, il programma stamper√† sullo schermo del computer la temperatura e l'umidit√† rilevate dal DHT11.

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

Codice
---------

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>

    #define maxTim 85
    #define dhtPin 0

    int dht11_dat[5] = {0,0,0,0,0};

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // pull pin down for 18 milliseconds
        pinMode(dhtPin, OUTPUT);
        digitalWrite(dhtPin, LOW);
        delay(18);
        // then pull it up for 40 microseconds
        digitalWrite(dhtPin, HIGH);
        delayMicroseconds(40); 
        // prepare to read the pin
        pinMode(dhtPin, INPUT);

        // detect change and read data
        for ( i=0; i< maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);

            if (counter == 255) break;
            // ignora le prime 3 transizioni
            if ((i >= 4) && (i%2 == 0)) {
                // sposta ogni bit nei byte di memoria
                dht11_dat[j/8] <<= 1;
                if (counter > 50)
                    dht11_dat[j/8] |= 1;
                j++;
            }
        }
        // verifica se abbiamo letto 40 bit (8bit x 5 ) e controlla il checksum nell'ultimo byte
        // stampa se i dati sono corretti
        if ((j >= 40) && 
                (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
            Fah = dht11_dat[2] * 9. / 5. + 32;
            printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                    dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
        }
    }

    int main (void) {
        if(wiringPiSetup() == -1){ //se l'inizializzazione di wiring fallisce, stampa un messaggio sullo schermo
            printf("setup wiringPi failed !");
            return 1; 
        }
        while (1) {
            readDht11();
            delay(500); // aspetta 1 sec per aggiornare
        }
        return 0 ;
    }

**Spiegazione del Codice**


.. code-block:: c

    void readDht11() {
        uint8_t laststate = HIGH;
        uint8_t counter = 0;
        uint8_t j = 0, i;
        float Fah; // fahrenheit
        dht11_dat[0] = dht11_dat[1] = dht11_dat[2] = dht11_dat[3] = dht11_dat[4] = 0;
        // ...
    }

Questa funzione serve per implementare la funzionalit√† del DHT11.

In generale, pu√≤ essere suddivisa in 3 parti:

1. Preparazione per leggere il pin:

.. code-block:: c

    // abbassa il pin per 18 millisecondi
    pinMode(dhtPin, OUTPUT);
    digitalWrite(dhtPin, LOW);
    delay(18);
    // poi sollevalo per 40 microsecondi
    digitalWrite(dhtPin, HIGH);
    delayMicroseconds(40); 
    // preparati a leggere il pin
    pinMode(dhtPin, INPUT);

Il suo flusso di comunicazione √® determinato dalla tempistica di lavoro.

.. image:: ../img/image208.png


Quando il DHT11 si avvia, l'MCU invier√† un segnale a basso livello e poi 
manterr√† il segnale a livello alto per 40us. Successivamente, inizier√† il 
rilevamento delle condizioni dell'ambiente esterno.

2. Lettura dei dati:

.. code-block:: c

    // rileva cambiamenti e leggi i dati  
    for ( i=0; i< maxTim; i++) {
            counter = 0;
            while (digitalRead(dhtPin) == laststate) {
                counter++;
                delayMicroseconds(1);
                if (counter == 255) {
                    break;
                }
            }
            laststate = digitalRead(dhtPin);
            if (counter == 255) break;
            // ignora le prime 3 transizioni
            if ((i >= 4) && (i%2 == 0)) {
                // sposta ogni bit nei byte di memoria
                dht11_dat[j/8] <<= 1;
                if (counter > 50)
                    dht11_dat[j/8] |= 1;
                j++;
            }
        }

Il ciclo memorizza i dati rilevati nell'array dht11_dat[]. Il DHT11 trasmette 
40 bit di dati alla volta. I primi 16 bit sono relativi all'umidit√†, i successivi 
16 bit sono relativi alla temperatura e gli ultimi otto bit vengono utilizzati per 
la verifica. Il formato dei dati √®:

**8bit dati interi umidit√†** + **8bit dati decimali umidit√†** + **8bit
dati interi temperatura** + **8bit dati decimali temperatura** + **8bit
bit di controllo**.

3. Stampa Umidit√† & Temperatura.

.. code-block:: c

    // verifica se abbiamo letto 40 bit (8bit x 5 ) e controlla il checksum nell'ultimo byte
    // stampa se i dati sono corretti
    if ((j >= 40) && 
            (dht11_dat[4] == ((dht11_dat[0] + dht11_dat[1] + dht11_dat[2] + dht11_dat[3]) & 0xFF)) ) {
        Fah = dht11_dat[2] * 9. / 5. + 32;
        printf("Humidity = %d.%d %% Temperature = %d.%d *C (%.1f *F)\n", 
                dht11_dat[0], dht11_dat[1], dht11_dat[2], dht11_dat[3], Fah);
    }

Quando la memorizzazione dei dati raggiunge i 40 bit, verifica la validit√† dei 
dati tramite il **bit di controllo (dht11_dat[4])**, quindi stampa la temperatura 
e l'umidit√†.

Ad esempio, se i dati ricevuti sono 00101011 (valore di 8 bit per l'umidit√† intera) 
00000000 (valore di 8 bit per l'umidit√† decimale) 00111100 (valore di 8 bit per la 
temperatura intera) 00000000 (valore di 8 bit per la temperatura decimale) 01100111 
(bit di controllo)

**Calcolo:**

00101011 + 00000000 + 00111100 + 00000000 = 01100111.

Il risultato finale √® uguale ai dati del bit di controllo, quindi i dati ricevuti sono corretti:

Umidit√† = 43%, Temperatura = 60¬∞C.

Se non √® uguale ai dati del bit di controllo, la trasmissione dei dati non √® normale e i 
dati vengono ricevuti di nuovo.

Immagine del fenomeno
------------------------

.. image:: ../img/image209.jpeg
