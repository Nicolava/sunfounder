.. note::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Immergiti pi√π a fondo in Raspberry Pi, Arduino ed ESP32 con altri appassionati.

    **Perch√© unirti?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.3_c_pi5:

2.1.3 Modulo Interruttore Touch
======================================

Introduzione
-------------------

In questo progetto imparerai a conoscere il modulo interruttore touch. Pu√≤ sostituire 
i tipi di interruttore tradizionali con questi vantaggi: operazione conveniente, 
sensazione al tocco raffinata, controllo preciso e minima usura meccanica.

Componenti necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/2.1.3component.png
    :width: 700
    :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTE
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_touch_switch`
        - |link_touch_buy|

Schema elettrico
---------------------

.. image:: ../img/2.1.3circuit.png
    :width: 500
    :align: center

Procedure sperimentali
---------------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/2.1.3fritzing.png
    :width: 700
    :align: center

**Passo 2:** Cambia la directory.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.1.3/

**Passo 3:** Compila.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.3_TouchSwitch.c -lwiringPi

**Passo 4:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Durante l'esecuzione del codice, il LED rosso si accende; quando tocchi il modulo interruttore touch, il LED giallo si accende.

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define touchPin		   0
    #define led1		   3
    #define led2 		   2

    int main(void)
    {
        // Se l'inizializzazione di wiring fallisce, stampa un messaggio sullo schermo
        if(wiringPiSetup() == -1){
            printf(etup w"siringPi failed !");
            return 1; 
        }
        
        pinMode(touchPin, INPUT);
        pinMode(led1, OUTPUT);
        pinMode(led2, OUTPUT);
        
        while(1){
            // interruttore touch alto, led1 acceso
            if(digitalRead(touchPin) == 1){
                digitalWrite(led1, LOW);
                digitalWrite(led2, HIGH);
                printf("You touch it! \r\n");
            }
            // interruttore touch basso, led2 acceso
            if(digitalRead(touchPin) == 0){
                digitalWrite(led2, LOW);
                digitalWrite(led1, HIGH);
            }
        }

        return 0;
    }

**Spiegazione del codice**

.. code-block:: c

    #define touchPin		   0
    #define led1		   3
    #define led2 		   2
    
I pin GPIO17, GPIO22 e GPIO27 della scheda di espansione T corrispondono ai 
GPIO0, GPIO3 e GPIO2 in wiringPi. Assegna GPIO0, GPIO3 e GPIO2 a ``touchPin``, 
``led1`` e ``led2``.

.. code-block:: c

    pinMode(touchPin, INPUT);
    pinMode(led1, OUTPUT);
    pinMode(led2, OUTPUT);

Imposta ``led1`` e ``led2`` come output per scrivere valori su di essi e imposta ``touchPin`` come input per leggere il valore.

.. code-block:: c

    while(1){
        // interruttore touch alto, led1 acceso
        if(digitalRead(touchPin) == 1){
            digitalWrite(led1, LOW);
            digitalWrite(led2, HIGH);
            printf("You touch it! \r\n");
        }
        // interruttore touch basso, led2 acceso
        if(digitalRead(touchPin) == 0){
            digitalWrite(led2, LOW);
            digitalWrite(led1, HIGH);
        }
    }

Imposta un ciclo infinito, quando tocchi il modulo interruttore touch, ``touchPin`` √® alto, led1 si accender√† e verr√† stampato "Lo hai toccato!". Quando ``touchPin`` √® basso, il led2 si accender√†.

Immagine del fenomeno
----------------------------

.. image:: ../img/2.1.3touch_switch_module.JPG
    :width: 500
    :align: center