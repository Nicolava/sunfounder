.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _1.3.3_c:

1.3.3 Relais
=================

Einf√ºhrung
----------

In diesem Projekt lernen wir, ein Relais zu verwenden. Es geh√∂rt zu den h√§ufig 
verwendeten Komponenten in automatischen Steuerungssystemen. Wenn Spannung, Strom, 
Temperatur, Druck usw. einen vorbestimmten Wert erreichen, √ºberschreiten oder 
darunter liegen, schaltet das Relais den Stromkreis ein oder unterbricht ihn, um 
die Ausr√ºstung zu steuern und zu sch√ºtzen.

Ben√∂tigte Komponenten
---------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten. 

.. image:: ../img/list_1.3.4.png

Es ist definitiv praktisch, ein komplettes Kit zu kaufen, hier ist der Link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_relay`
        - |link_relay_buy|
    *   - :ref:`cpn_diode`
        - |link_diode_buy|

Schaltplan
----------

.. image:: ../img/image345.png

Experimentelle Verfahren
------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../img/image144.png

**Schritt 2:** √ñffnen Sie die Code-Datei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.3.3

**Schritt 3:** Kompilieren Sie den Code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.3_Relay.c -lwiringPi

**Schritt 4:** F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Nachdem der Code ausgef√ºhrt wurde, leuchtet die LED auf. Zus√§tzlich k√∂nnen Sie 
ein Ticktack-Ger√§usch h√∂ren, das durch das Trennen des normal geschlossenen Kontakts 
und das Schlie√üen des normal ge√∂ffneten Kontakts verursacht wird.

.. note::

    Wenn es nach dem Starten nicht funktioniert oder eine Fehlermeldung angezeigt wird: \"wiringPi.h: Datei oder Verzeichnis nicht gefunden\", ziehen Sie bitte :ref:`install_wiringpi` zu Rate.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define RelayPin 0

    int main(void){
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print message to screen
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(RelayPin, OUTPUT);   //set GPIO17(GPIO0) output
        while(1){
            // Tick
            printf("Relay Open......\n");
            digitalWrite(RelayPin, LOW);
            delay(1000);
            // Tock
            printf("......Relay Close\n");
            digitalWrite(RelayPin, HIGH);
            delay(1000);
        }

        return 0;
    }

**Code-Erkl√§rung**

.. code-block:: c

    digitalWrite(RelayPin, LOW);

Setzen Sie den I/O-Port auf niedriges Niveau (0V), sodass der Transistor nicht bestromt 
wird und die Spule nicht mit Strom versorgt wird. Es gibt keine elektromagnetische Kraft, 
also √∂ffnet das Relais, die LED schaltet sich nicht ein.

.. code-block:: c

    digitalWrite(RelayPin, HIGH);

Setzen Sie den I/O-Port auf hohes Niveau (5V), um den Transistor zu bestromen. Die Spule 
des Relais wird mit Strom versorgt und erzeugt eine elektromagnetische Kraft, das 
Relais schlie√üt und die LED leuchtet auf.

Ph√§nomen-Bild
---------------

.. image:: ../img/image145.jpeg