.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti?**

    - **Supporto esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi!

.. _3.1.6_c_pi5:

3.1.6 Semaforo
============================

Introduzione
---------------

In questo progetto, utilizzeremo luci LED di tre colori per simulare il 
cambiamento delle luci del semaforo, e un display a sette segmenti a quattro 
cifre verr√† utilizzato per visualizzare il conto alla rovescia di ciascuno stato 
del semaforo.


Componenti necessari
------------------------------

Per questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_Traffic_Light.png
    :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTE
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Schema elettrico
--------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SPICE0       Pin 24   10       8
SPICE1       Pin 26   11       7
============ ======== ======== ===

.. image:: ../img/Schematic_three_one7.png
   :align: center

Procedure sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image254.png

**Passo 2:** Cambia directory.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.6/

**Passo 3:** Compila.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.6_TrafficLight.c -lwiringPi

**Passo 4:** Esegui.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

Quando il codice viene eseguito, i LED simuleranno il cambiamento di colore 
delle luci del semaforo. Prima si accender√† il LED rosso per 60s, poi il LED 
verde per 30s, e infine il LED giallo per 5s. Dopodich√©, il LED rosso si 
riaccender√† per 60s e la sequenza si ripeter√† continuamente.

.. note::

    Se non funziona dopo l'esecuzione, o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

Codice
---------

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <wiringShift.h>
    #include <signal.h>
    #include <unistd.h>
    #define     SDI     5 
    #define     RCLK    4  
    #define     SRCLK    1   

    const int ledPin[]={6,10,11};  
    const int placePin[] = {12, 3, 2, 0};
    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

    int greenLight = 30;
    int yellowLight = 5;
    int redLight = 60;
    int colorState = 0;
    char *lightColor[]={"Red","Green","Yellow"};
    int counter = 60;

    void lightup()
    {
        for(int i=0;i<3;i++){
            digitalWrite(ledPin[i],HIGH);
        }
        digitalWrite(ledPin[colorState],LOW);    
    }

    void pickDigit(int digit)
    {
        for (int i = 0; i < 4; i++)
        {
            digitalWrite(placePin[i], 0);
        }
        digitalWrite(placePin[digit], 1);
    }

    void hc595_shift(int8_t data)
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 0x80 & (data << i));
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void clearDisplay()
    {
        int i;
        for (i = 0; i < 8; i++)
        {
            digitalWrite(SDI, 1);
            digitalWrite(SRCLK, 1);
            delayMicroseconds(1);
            digitalWrite(SRCLK, 0);
        }
        digitalWrite(RCLK, 1);
        delayMicroseconds(1);
        digitalWrite(RCLK, 0);
    }

    void display()
    {
        int a,b,c;
        
        a = counter % 10000 / 1000 + counter % 1000 / 100;
        b = counter % 10000 / 1000 + counter % 1000 / 100 + counter % 100 / 10;
        c = counter % 10000 / 1000 + counter % 1000 / 100 + counter % 100 / 10 + counter % 10;

        if (counter % 10000 / 1000 == 0){
            clearDisplay();
        }
        else{
            clearDisplay();
            pickDigit(3);
            hc595_shift(number[counter % 10000 / 1000]);
        }
        if (a == 0){
            clearDisplay();
        }
        else{
            clearDisplay();
            pickDigit(2);
            hc595_shift(number[counter % 1000 / 100]);
        }
        if (b == 0){
            clearDisplay();
        }
        else{
            clearDisplay();
            pickDigit(1);
            hc595_shift(number[counter % 100 / 10]);
        }
        if(c == 0){
            clearDisplay();
        }

        else{
            clearDisplay();
            pickDigit(0);
            hc595_shift(number[counter % 10]);
        }
    }

    void loop()
    {
        while(1){
        display();
        lightup(); 
        }
    }


    void timer(int  timer1){       //Funzione timer
        if(timer1 == SIGALRM){   
            counter --;         
            alarm(1); 
            if(counter == 0){
                if(colorState == 0) counter = greenLight;
                if(colorState == 1) counter = yellowLight;
                if(colorState == 2) counter = redLight;
                colorState = (colorState+1)%3; 
            }
            printf("counter : %d \t light color: %s \n",counter,lightColor[colorState]);
        }
    }

    int main(void)
    {
        int i;
        if(wiringPiSetup() == -1){ 
            printf("setup wiringPi failed !");
            return 1; 
        }
        pinMode(SDI,OUTPUT);        
        pinMode(RCLK,OUTPUT);
        pinMode(SRCLK,OUTPUT);
        for(i=0;i<4;i++){       
            pinMode(placePin[i],OUTPUT);
            digitalWrite(placePin[i],HIGH);
        }
        for(i=0;i<3;i++){       
            pinMode(ledPin[i],OUTPUT);
            digitalWrite(ledPin[i],HIGH);
        }
        signal(SIGALRM,timer);  
        alarm(1); 
        loop();
        return 0;
    }


Spiegazione del Codice
-------------------------

.. code-block:: c

    #define     SDI     5 
    #define     RCLK    4  
    #define     SRCLK    1   

    const int placePin[] = {12, 3, 2, 0};
    unsigned char number[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};

    void pickDigit(int digit);
    void hc595_shift(int8_t data);
    void clearDisplay();
    void display();

Questi codici vengono utilizzati per realizzare la funzione di visualizzazione 
numerica del display a sette segmenti a quattro cifre. Fare riferimento al 
capitolo 1.1.5 del documento per ulteriori dettagli. Qui, utilizziamo i codici 
per visualizzare il conto alla rovescia del tempo del semaforo.

.. code-block:: c

    const int ledPin[]={6,10,11};  

    int colorState = 0;

    void lightup()
    {
        for(int i=0;i<3;i++){
            digitalWrite(ledPin[i],HIGH);
        }
        digitalWrite(ledPin[colorState],LOW);    
    }

Questi codici vengono utilizzati per accendere e spegnere i LED.

.. code-block:: c

    int greenLight = 30;
    int yellowLight = 5;
    int redLight = 60;
    int colorState = 0;
    char *lightColor[]={"Red","Green","Yellow"};
    int counter = 60;

    void timer(int  timer1){       //Funzione timer
        if(timer1 == SIGALRM){   
            counter --;         
            alarm(1); 
            if(counter == 0){
                if(colorState == 0) counter = greenLight;
                if(colorState == 1) counter = yellowLight;
                if(colorState == 2) counter = redLight;
                colorState = (colorState+1)%3; 
            }
            printf("counter : %d \t light color: %s \n",counter,lightColor[colorState]);
        }
    }

Questi codici vengono utilizzati per attivare e disattivare il timer. 
Fare riferimento al capitolo 1.1.5 per ulteriori dettagli. Qui, quando 
il timer ritorna a zero, lo stato del colore (colorState) viene cambiato 
per cambiare il LED, e il timer viene assegnato a un nuovo valore.

.. code-block:: c

    void loop()
    {
        while(1){
        display();
        lightup(); 
        }
    }

    int main(void)
    {
        //‚Ä¶
        signal(SIGALRM,timer);  
        alarm(1); 
        loop();
        return 0;
    }

Il timer viene avviato nella funzione main(). Nella funzione loop(), viene 
utilizzato il ciclo **while(1)** e vengono chiamate le funzioni del display 
a sette segmenti e dei LED.

Immagine del fenomeno
--------------------------

.. image:: ../img/IMG_8319.jpg
   :align: center