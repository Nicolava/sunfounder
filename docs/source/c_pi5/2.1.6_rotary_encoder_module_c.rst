 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.6_c_pi5:

2.1.6 Module Encodeur Rotatif
=============================

Introduction
------------

Dans ce projet, vous allez d√©couvrir l'encodeur rotatif. Un encodeur rotatif est un 
interrupteur √©lectronique avec une s√©rie d'impulsions r√©guli√®res dans une s√©quence 
temporelle stricte. Lorsqu'il est utilis√© avec un circuit int√©gr√© (CI), 
il peut r√©aliser des op√©rations d'incr√©mentation, de d√©cr√©mentation, de changement 
de page et d'autres op√©rations telles que le d√©filement de la souris, la s√©lection de menu, etc.

Composants N√©cessaires
----------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/Part_two_25.png

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_rotary_encoder`
        - |link_rotary_encoder_buy|

**Sch√©ma de C√¢blage**
------------------------

.. image:: ../img/image349.png
   :align: center

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/2.1.6_fritzing.png
   :align: center

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.1.6/

**√âtape 3 :** Compilez le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.6_RotaryEncoder.c -lwiringPi

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Vous verrez le compteur dans le terminal. Lorsque vous tournez l'encodeur rotatif dans le sens horaire, le compteur augmente ; lorsque vous le tournez dans le sens antihoraire, le compteur diminue. Si vous appuyez sur l'interrupteur de l'encodeur rotatif, les relev√©s reviendront √† z√©ro.

.. note::

   Si cela ne fonctionne pas apr√®s l'ex√©cution ou s'il y a un message d'erreur : "wiringPi.h: No such file or directory", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

   #include <stdio.h>
   #include <string.h>
   #include <errno.h>
   #include <stdlib.h>
   #include <wiringPi.h>

   #define  clkPin    0
   #define  dtPin    1
   #define  swPin     2

   static volatile int globalCounter = 0 ;

   unsigned char flag;
   unsigned char Last_dtPin_Status;
   unsigned char Current_dtPin_Status;

   void btnISR(void)
   {
      globalCounter = 0;
   }

   void rotaryDeal(void)
   {
      Last_dtPin_Status = digitalRead(dtPin);

      while(!digitalRead(clkPin)){
         Current_dtPin_Status = digitalRead(dtPin);
         flag = 1;
      }

      if(flag == 1){
         flag = 0;
         if((Last_dtPin_Status == 0)&&(Current_dtPin_Status == 1)){
            globalCounter --;	
         }
         if((Last_dtPin_Status == 1)&&(Current_dtPin_Status == 0)){
            globalCounter ++;
         }
      }
   }

   int main(void)
   {
      if(wiringPiSetup() < 0){
         fprintf(stderr, "Unable to setup wiringPi:%s\n",strerror(errno));
         return 1;
      }

      pinMode(swPin, INPUT);
      pinMode(clkPin, INPUT);
      pinMode(dtPin, INPUT);

      pullUpDnControl(swPin, PUD_UP);

      if(wiringPiISR(swPin, INT_EDGE_FALLING, &btnISR) < 0){
         fprintf(stderr, "Unable to init ISR\n",strerror(errno));	
         return 1;
      }
      
      int tmp = 0;

      while(1){
         rotaryDeal();
         if (tmp != globalCounter){
            printf("%d\n", globalCounter);
            tmp = globalCounter;
         }
      }

      return 0;
   }

**Analyse du Code**

* Lire la valeur de dtPin lorsque clkPin est bas.
* Lorsque clkPin est haut, si dtPin passe de bas √† haut, le compteur diminue, sinon le compteur augmente.
* swPin sera en niveau bas lorsque l'arbre est press√©.

√Ä partir de cela, le flux du programme est montr√© ci-dessous :

.. image:: ../img/2.1.6_flow.png
   :align: center

**Image du Ph√©nom√®ne**
--------------------------

.. image:: ../img/2.1.6rotary_ecoder.JPG
   :align: center
