.. _3.1.1_py_pi5:

3.1.1 Fotografiemodul
==========================

Einführung
-----------------

In diesem Kit, ausgestattet mit einem Kameramodul, versuchen wir, mit dem Raspberry Pi ein Foto zu machen.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir folgende Komponenten.

.. image:: ../python_pi5/img/3.3.1_photograph_list.png
  :width: 800

Es ist definitiv praktisch, ein komplettes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM SET
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können diese auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`Kameramodul`
        - |link_camera_buy|

Experimentelle Verfahren
------------------------------

**Schritt 1:** Gehe zum Raspberry Pi Desktop. Für ein besseres Erlebnis benötigen Sie möglicherweise einen Bildschirm, siehe: `Verbinden Sie Ihren Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Oder greifen Sie remote auf den Raspberry Pi Desktop zu, für eine detaillierte Anleitung siehe :ref:`windows_remote_desktop`.

**Schritt 2:** Überprüfen Sie, ob die Kamera aktiviert ist. Für Anweisungen siehe: :ref:`enable_camera`.

**Schritt 3:** Öffnen Sie ein Terminal und wechseln Sie in den Ordner des Codes.

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 4:** Führen Sie aus.

.. code-block::

    sudo python3 3.1.1_PhotographModule_zero.py

Nachdem der Code ausgeführt wurde, wird die Kamera ein Foto machen. Jetzt können Sie das Foto mit dem Namen „my_photo.jpg“ im Verzeichnis „~“ sehen.

.. note::

    Sie können auch „3.1.1_PhotographModule.py“ im Pfad „~/raphael-kit/python-pi5/“ mit einer Python-IDE öffnen, den Ausführen-Knopf klicken, um es auszuführen, und den Code mit dem Stopp-Knopf stoppen.


Wenn Sie das Foto auf Ihren PC herunterladen möchten, siehe :ref:`filezilla`.


**Code**

.. code-block:: python

   #!/usr/bin/env python3    
   from picamera2 import Picamera2, Preview
   import os

   # Den Login-Namen des aktuellen Benutzers abrufen
   user = os.getlogin()
   # Den Pfad zum Home-Verzeichnis des Benutzers abrufen
   user_home = os.path.expanduser(f'~{user}')

   # Eine Picamera2-Instanz erstellen
   camera = Picamera2()
   # Die Standard-Vorschaukonfiguration abrufen
   preview_config = camera.preview_configuration

   try:
       # Vorschaugröße und -format einstellen
       preview_config.size = (800, 600)
       preview_config.format = 'XRGB8888'  
       # Die Kameravorschau im QTGL-Modus starten
       camera.start_preview(Preview.QTGL)
       # Die Kamera starten
       camera.start()
       # Ein Foto aufnehmen und im Home-Verzeichnis des Benutzers speichern
       camera.capture_file(f'{user_home}/my_photo.jpg')

   except KeyboardInterrupt:
       # Die Kameravorschau bei einem KeyboardInterrupt (z.B. Strg+C) stoppen
       camera.stop_preview()
       pass

**Code-Erklärung**

#. Importiert die Klassen ``Picamera2`` und ``Preview`` aus der picamera2-Bibliothek sowie das Modul ``os`` für Betriebssysteminteraktionen.

   .. code-block:: python

       #!/usr/bin/env python3    
       from picamera2 import Picamera2, Preview
       import os

#. Ruft den Login-Namen des aktuellen Benutzers und den Pfad zu dessen Home-Verzeichnis ab.

   .. code-block:: python

       # Den Login-Namen des aktuellen Benutzers abrufen
       user = os.getlogin()
       # Den Pfad zum Home-Verzeichnis des Benutzers abrufen
       user_home = os.path.expanduser(f'~{user}')

#. Erstellt eine Instanz der Klasse ``Picamera2`` und ruft die Standard-Vorschaukonfiguration ab.

   .. code-block:: python

       # Eine Picamera2-Instanz erstellen
       camera = Picamera2()
       # Die Standard-Vorschaukonfiguration abrufen
       preview_config = camera.preview_configuration

#. Legt die Größe und das Format der Kameravorschau fest. Die Größe wird auf 800x600 Pixel festgelegt, und das Format auf ``XRGB8888``.

   .. code-block:: python

       try:
           # Vorschaugröße und -format festlegen
           preview_config.size = (800, 600)
           preview_config.format = 'XRGB8888'

           ...

#. Startet die Kameravorschau im QTGL-Modus, einer Methode zur Anzeige der Vorschau, und startet dann die Kamera selbst.

   .. code-block:: python

       try:
           ...
           
           # Die Kameravorschau im QTGL-Modus starten
           camera.start_preview(Preview.QTGL)
           # Die Kamera starten
           camera.start()

           ...

#. Macht ein Bild mit der Kamera und speichert es in ``~/``.

   .. code-block:: python

       try:
           ...           
           
           # Ein Foto aufnehmen und im Home-Verzeichnis des Benutzers speichern
           camera.capture_file(f'{user_home}/my_photo.jpg')

   .. note::
       Sie können die Funktion ``camera.capture()`` und eine ``for``-Schleife zusammen verwenden, um eine kontinuierliche Aufnahme zu erreichen. Und mit der Funktion ``delay`` das Zeitintervall für das Aufnehmen von Bildern anpassen.

       .. code-block:: python

           for i in range(5):
               camera.capture(f'{user_home}/my_photo{i}.jpg')

#. Dieser Codeblock behandelt ein KeyboardInterrupt (z.B. Strg+C), indem die Kameravorschau gestoppt wird. Die Anweisung `pass` wird verwendet, um die Ausnahme zu behandeln, ohne sonst etwas zu tun.

   .. code-block:: python

       except KeyboardInterrupt:
           # Die Kameravorschau bei einem KeyboardInterrupt (z.B. Strg+C) stoppen
           camera.stop_preview()
           pass








