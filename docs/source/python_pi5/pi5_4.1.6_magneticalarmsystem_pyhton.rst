.. _4.1.6_py_pi5:

4.1.3 Magnetisches Induktions-Alarmsystem
============================================

Einführung
-----------------

Wenn Sie eine wertvolle Vase erhalten, können Sie ein magnetisches Induktions-Alarmsystem dafür erstellen, sodass Sie rechtzeitig einen Alarm hören können, egal wer sie bewegt.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir folgende Komponenten.

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_list.png
  :width: 800
  :align: center

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können diese auch separat über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`Buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`transistor`
        - |link_transistor_buy|
    *   - :ref:`reed_switch`
        - |link_reed_switch_buy|


Schaltplan
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_schematic.png
   :align: center

Experimentelle Verfahren
------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_circuit.png
  :width: 800
  :align: center

**Schritt 2:** Wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3:** Ausführen.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.6_MagneticAlarmSystem_zero.py

Wenn der Reed-Schalter durch den Magneten beeinflusst wird (zum Beispiel wird der Reed-Schalter auf der Basis platziert und der Magnet in der Vase), ist das Objekt sicher. Zu diesem Zeitpunkt ist der Reed-Schalter im geschlossenen Zustand und der Summer schweigt.
Nach Entfernen des Magneten (wie beim Diebstahl der Vase) wird der Reed-Schalter nicht mehr durch den Magneten beeinflusst, der Schalter öffnet sich, und der Summer löst einen Alarm aus.

**Code**

.. note::
    Sie können den untenstehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Bevor Sie dies tun, müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nach der Änderung des Codes können Sie ihn direkt ausführen, um die Auswirkung zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   von gpiozero import Buzzer, Button
   import time

   # Den Summer am GPIO-Pin 27 initialisieren
   buzzer = Buzzer(27)
   # Den Reed-Schalter am GPIO-Pin 17 mit aktiviertem Pull-Up-Widerstand initialisieren
   reed_switch = Button(17, pull_up=True)

   try:
       while True:
           # Überprüfen, ob der Reed-Schalter gedrückt ist
           if reed_switch.is_pressed:
               # Den Summer ausschalten, wenn der Reed-Schalter gedrückt ist
               buzzer.off()
           else:
               # Wenn der Reed-Schalter nicht gedrückt ist, den Summer piepen lassen
               buzzer.on()
               time.sleep(0.1)  # Summer für 0.1 Sekunden einschalten
               buzzer.off()
               time.sleep(0.1)  # Summer für 0.1 Sekunden ausschalten

   except KeyboardInterrupt:
       # Den Summer ausschalten, wenn das Programm unterbrochen wird (z. B. durch Tastaturunterbrechung)
       buzzer.off()
       pass




**Code-Erklärung**

#. Importiert die notwendigen Klassen ``Buzzer`` und ``Button`` aus der Bibliothek ``gpiozero`` und das Modul ``time`` aus der Standardbibliothek von Python.

    .. code-block:: python

        #!/usr/bin/env python3
        von gpiozero import Buzzer, Button
        import time

#. Der ``Buzzer``-Objekt ist mit dem GPIO-Pin 27 verbunden, und ein ``Button`` (fungiert als Reed-Schalter) ist mit dem GPIO-Pin 17 verbunden, mit dem Argument ``pull_up=True``, welches den internen Pull-Up-Widerstand aktiviert.

    .. code-block:: python

        # Den Summer am GPIO-Pin 27 initialisieren
        buzzer = Buzzer(27)
        # Den Reed-Schalter am GPIO-Pin 17 mit aktiviertem Pull-Up-Widerstand initialisieren
        reed_switch = Button(17, pull_up=True)


#. Der ``try``-Block enthält eine Endlosschleife (``while True``), die den Zustand des Reed-Schalters überprüft. Wenn gedrückt (``is_pressed``), wird der Summer ausgeschaltet. Andernfalls piept der Summer (0,1 Sekunden an, 0,1 Sekunden aus).

    .. code-block:: python

        try:
            while True:
                # Überprüfen, ob der Reed-Schalter gedrückt ist
                if reed_switch.is_pressed:
                    # Den Summer ausschalten, wenn der Reed-Schalter gedrückt ist
                    buzzer.off()
                else:
                    # Wenn der Reed-Schalter nicht gedrückt ist, den Summer piepen lassen
                    buzzer.on()
                    time.sleep(0.1)  # Summer für 0.1 Sekunden einschalten
                    buzzer.off()
                    time.sleep(0.1)  # Summer für 0.1 Sekunden ausschalten


#. Der ``except``-Block behandelt ein KeyboardInterrupt (wie ein Ctrl+C im Terminal), um den Summer sicher auszuschalten.

    .. code-block:: python

        except KeyboardInterrupt:
            # Den Summer ausschalten, wenn das Programm unterbrochen wird (z. B. durch Tastaturunterbrechung)
            buzzer.off()
            pass
