.. _1.3.1_py_pi5:

1.3.1 Motor
========================

Einleitung
-------------------

In diesem Projekt lernen wir, wie man mit einem L293D einen Gleichstrommotor antreibt und ihn im Uhrzeigersinn sowie gegen den Uhrzeigersinn drehen lässt. Da der Gleichstrommotor einen höheren Strom benötigt, verwenden wir aus Sicherheitsgründen hier das Stromversorgungsmodul, um den Motor mit Strom zu versorgen.

Benötigte Komponenten
--------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/1.3.1_motor_list.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - IN DIESEM KIT ENTHALTENE TEILE
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`power_module`
        - \-
    *   - :ref:`l293d`
        - \-
    *   - :ref:`motor`
        - |link_motor_buy|


Schaltplan
--------------------

.. image:: ../python_pi5/img/1.3.1_motor_schematic.png


Experimentelle Verfahren
------------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/1.3.1_motor_circuit.png

.. note::
    Das Stromversorgungsmodul kann mit dem 9V-Batterieclip im Kit eine 9V-Batterie verwenden. Stecken Sie die Jumperkappe des Stromversorgungsmoduls in die 5V-Stromschienen des Breadboards.

.. image:: ../python_pi5/img/1.3.1_motor_battery.jpeg

**Schritt 2**: Wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3**: Ausführen.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.1_Motor_zero.py

Während der Code ausgeführt wird, dreht sich der Motor zunächst 5 Sekunden lang im Uhrzeigersinn, dann stoppt er für 5 Sekunden, danach dreht er sich 5 Sekunden lang gegen den Uhrzeigersinn; anschließend stoppt der Motor wieder für 5 Sekunden. Diese Reihe von Aktionen wird wiederholt ausgeführt.

**Code**

.. note::

    Sie können den unten stehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Aber zuvor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Motor
   from time import sleep

   # Initialisierung des Motors mit GPIO Zero, wobei die GPIO-Pins für Vorwärts (17), Rückwärts (27) und Enable (22) Kontrolle angegeben werden
   motor = Motor(forward=17, backward=27, enable=22)

   try:
       # Hauptfunktion zur Steuerung der Richtung und Bewegung des Motors.
       # Wechselt die Drehrichtung des Motors zwischen im Uhrzeigersinn und gegen den Uhrzeigersinn mit Stopps dazwischen.
       actions = {'CW': motor.forward, 'CCW': motor.backward, 'STOP': motor.stop}  # Definition der Motoraktionen für bessere Lesbarkeit
       
       while True:
           # Durchlaufen der definierten Aktionen zur Steuerung der Motordrehrichtung
           for action in ['CW', 'STOP', 'CCW', 'STOP']:
               actions[action]()  # Ausführen der aktuellen Aktion (vorwärts, stopp, rückwärts, stopp)
               print(f"{action}")  # Anzeigen der aktuellen Aktion in der Konsole
               sleep(5)  # Pause von 5 Sekunden vor dem Wechsel zur nächsten Aktion

   except KeyboardInterrupt:
       # Elegantes Handhaben eines Tastaturinterrupts (z.B. Strg+C) zum Stoppen des Programms
       pass


**Code-Erklärung**

#. Diese Importanweisungen holen die Klasse ``Motor`` aus der Bibliothek ``gpiozero`` und die Funktion ``sleep`` aus dem Modul ``time``.
    
   .. code-block:: python  

       #!/usr/bin/env python3
       from gpiozero import Motor
       from time import sleep
      

#. Diese Zeile initialisiert ein ``Motor``-Objekt, wobei die GPIO-Pins für Vorwärts (17), Rückwärts (27) und Enable (22) Steuerung angegeben werden.
    
   .. code-block:: python
       
       # Initialisierung des Motors mit GPIO Zero, wobei die GPIO-Pins für Vorwärts (17), Rückwärts (27) und Enable (22) Kontrolle angegeben werden
       motor = Motor(forward=17, backward=27, enable=22)
      

#. Die Aktionen für die Motorsteuerung sind in einem Wörterbuch für bessere Lesbarkeit definiert. Eine Endlosschleife (`while True`) iteriert durch diese Aktionen und führt jede für 5 Sekunden aus.
    
   .. code-block:: python
       
       try:
           # Hauptfunktion zur Steuerung der Richtung und Bewegung des Motors.
           # Wechselt die Drehrichtung des Motors zwischen im Uhrzeigersinn und gegen den Uhrzeigersinn mit Stopps dazwischen.
           actions = {'CW': motor.forward, 'CCW': motor.backward, 'STOP': motor.stop}  # Definition der Motoraktionen für bessere Lesbarkeit
           
           while True:
               # Durchlaufen der definierten Aktionen zur Steuerung der Motordrehrichtung
               for action in ['CW', 'STOP', 'CCW', 'STOP']:
                   actions[action]()  # Ausführen der aktuellen Aktion (vorwärts, stopp, rückwärts, stopp)
                   print(f"{action}")  # Anzeigen der aktuellen Aktion in der Konsole
                   sleep(5)  # Pause von 5 Sekunden vor dem Wechsel zur nächsten Aktion
      

#. Dieser Abschnitt ermöglicht es, das Programm sicher mit einem Tastaturinterrupt (Strg+C) zu beenden, ohne Fehler zu verursachen.
    
   .. code-block:: python
       
       except KeyboardInterrupt:
       # Elegantes Handhaben eines Tastaturinterrupts (z.B. Strg+C) zum Stoppen des Programms
       pass
      

  