.. _4.1.14_py_pi5:

4.1.11 Passwortschloss
================================

Einführung
-------------

In diesem Projekt verwenden wir ein Tastenfeld und ein LCD, um ein Kombinationsschloss zu erstellen. Das LCD zeigt eine entsprechende Aufforderung an, um Ihr Passwort auf dem Tastenfeld einzugeben. Wenn das Passwort korrekt eingegeben wird, wird „Korrekt“ angezeigt.

Auf Basis dieses Projekts können wir zusätzliche elektronische Komponenten hinzufügen, wie z.B. einen Summer, LEDs und so weiter, um verschiedene experimentelle Phänomene bei der Passworteingabe hinzuzufügen.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/4.1.14_password_lock_list.png
    :width: 800
    :align: center

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`i2c_lcd1602`
        - |link_i2clcd1602_buy|
    *   - :ref:`keypad`
        - \-

Schaltplan
------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.14_password_lock_schematic.png
   :align: center

Experimentelle Verfahren
----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../python_pi5/img/4.1.14_password_lock_circuit.png

**Schritt 2:** Verzeichnis wechseln.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**Schritt 3:** Ausführen.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 4.1.14_PasswordLock_zero.py

Nachdem der Code ausgeführt wurde, wird das Tastenfeld verwendet, um das Passwort: 1984 einzugeben. Wenn auf dem LCD1602 „CORRECT“ erscheint, ist das Passwort korrekt; andernfalls wird „WRONG KEY“ angezeigt.

.. note::

    * Wenn Sie den Fehler ``FileNotFoundError: [Errno 2] No such file or directory: '/dev/i2c-1'`` erhalten, müssen Sie :ref:`i2c_config` zu Rate ziehen, um das I2C zu aktivieren.
    * Wenn der Fehler ``ModuleNotFoundError: No module named 'smbus2'`` auftritt, führen Sie bitte ``sudo pip3 install smbus2`` aus.
    * Wenn der Fehler ``OSError: [Errno 121] Remote I/O error`` erscheint, bedeutet das, dass das Modul falsch verdrahtet ist oder das Modul defekt ist.
    * Wenn der Code und die Verdrahtung in Ordnung sind, aber das LCD immer noch keinen Inhalt anzeigt, können Sie das Potentiometer auf der Rückseite drehen, um den Kontrast zu erhöhen.

**Code**

.. note::
    Sie können den untenstehenden Code **Modifizieren/Zurücksetzen/Kopieren/Ausführen/Stoppen**. Aber davor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import DigitalOutputDevice, Button
   from time import sleep
   import LCD1602

   class Keypad:
       def __init__(self, rows_pins, cols_pins, keys):
           """
           Initialisiert das Tastenfeld mit den angegebenen Reihen- und Spaltenpins sowie Tasten.
           :param rows_pins: Liste der GPIO-Pins für die Reihen.
           :param cols_pins: Liste der GPIO-Pins für die Spalten.
           :param keys: Liste der Tasten im Tastenfeld-Layout.
           """
           self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]  # Reihenpins einrichten
           self.cols = [Button(pin, pull_up=False) for pin in cols_pins]  # Spaltenpins einrichten
           self.keys = keys  # Tastenfeld-Tastenlayout

       def read(self):
           """
           Liest und gibt eine Liste der aktuell gedrückten Tasten zurück.
           :return: Liste der gedrückten Tasten.
           """
           pressed_keys = []
           for i, row in enumerate(self.rows):
               row.on()  # Aktuelle Reihe aktivieren
               for j, col in enumerate(self.cols):
                   if col.is_pressed:
                       index = i * len(self.cols) + j
                       pressed_keys.append(self.keys[index])
               row.off()  # Reihe nach der Überprüfung deaktivieren
           return pressed_keys

   # Passwortüberprüfungseinrichtung
   LENS = 4
   password = ['1', '9', '8', '4']  # Voreingestelltes Passwort
   testword = ['0', '0', '0', '0']  # Speicher für Benutzereingabe
   keyIndex = 0  # Index für Eingabetasten

   def check():
       """
       Überprüft, ob das eingegebene Passwort mit dem voreingestellten Passwort übereinstimmt.
       :return: 1 bei Übereinstimmung, sonst 0.
       """
       for i in range(LENS):
           if password[i] != testword[i]:
               return 0
       return 1

   def setup():
       """
       Einrichtung des Tastenfelds und der LCD-Anzeige.
       """
       global keypad, last_key_pressed
       # Pin-Konfiguration für Tastenfeld
       rows_pins = [18, 23, 24, 25]
       cols_pins = [10, 22, 27, 17]
       keys = ["1", "2", "3", "A",
               "4", "5", "6", "B",
               "7", "8", "9", "C",
               "*", "0", "#", "D"]

       # Tastenfeld und LCD initialisieren
       keypad = Keypad(rows_pins, cols_pins, keys)
       last_key_pressed = []
       LCD1602.init(0x27, 1)  # LCD initialisieren
       LCD1602.clear()
       LCD1602.write(0, 0, 'WILLKOMMEN!')
       LCD1602.write(2, 1, 'Passwort eingeben')
       sleep(2)

   def loop():
       """
       Hauptschleife zur Behandlung der Tastenfeldeingabe und Passwortüberprüfung.
       """
       global keyIndex, LENS, keypad, last_key_pressed
       while True:
           pressed_keys = keypad.read()
           if pressed_keys and pressed_keys != last_key_pressed:
               if keyIndex < LENS:
                   LCD1602.clear()
                   LCD1602.write(0, 0, "Passwort eingeben:")
                   LCD1602.write(15 - keyIndex, 1, pressed_keys[0])
                   testword[keyIndex] = pressed_keys[0]
                   keyIndex += 1

               if keyIndex == LENS:
                   if check() == 0:
                       LCD1602.clear()
                       LCD1602.write(3, 0, "FALSCHER SCHLÜSSEL!")
                       LCD1602.write(0, 1, "bitte versuchen Sie es erneut")
                   else:
                       LCD1602.clear()
                       LCD1602.write(4, 0, "KORREKT!")
                       LCD1602.write(2, 1, "willkommen zurück")
                   keyIndex = 0  # Schlüsselindex nach der Überprüfung zurücksetzen

           last_key_pressed = pressed_keys
           sleep(0.1)

   try:
       setup()
       loop()
   except KeyboardInterrupt:
       LCD1602.clear()  # LCD-Anzeige bei Unterbrechung löschen


**Code-Erklärung**

#. Dieser Abschnitt importiert die notwendigen Bibliotheken für das Projekt. ``LCD1602`` wird für das LCD-Display verwendet, ``gpiozero`` stellt Klassen für LED, Buzzer und Button zur Verfügung, ``ADC0834`` ist für die Analog-Digital-Umwandlung, und ``time`` sowie ``math`` sind Python-Standardbibliotheken für zeitbezogene Funktionen und mathematische Operationen.

   .. code-block:: python

       #!/usr/bin/env python3

       import LCD1602
       from gpiozero import LED, Buzzer, Button
       import ADC0834
       import time
       import math

#. Definiert eine benutzerdefinierte Klasse für die Verwaltung des Keypads. Sie initialisiert das Keypad mit spezifischen Zeilen- und Spaltenpins und bietet eine ``read`` Methode, um gedrückte Tasten zu erkennen.

   .. code-block:: python

       class Keypad:
           def __init__(self, rows_pins, cols_pins, keys):
               """
               Initialisiert das Keypad mit spezifischen Zeilen- und Spaltenpins und Tasten.
               :param rows_pins: Liste der GPIO-Pins für die Zeilen.
               :param cols_pins: Liste der GPIO-Pins für die Spalten.
               :param keys: Liste der Tasten im Layout des Keypads.
               """
               self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]  # Zeilenpins einrichten
               self.cols = [Button(pin, pull_up=False) for pin in cols_pins]  # Spaltenpins einrichten
               self.keys = keys  # Keypad-Tastenlayout

           def read(self):
               """
               Liest und gibt eine Liste der aktuell gedrückten Tasten zurück.
               :return: Liste der gedrückten Tasten.
               """
               pressed_keys = []
               for i, row in enumerate(self.rows):
                   row.on()  # Aktuelle Zeile aktivieren
                   for j, col in enumerate(self.cols):
                       if col.is_pressed:
                           index = i * len(self.cols) + j
                           pressed_keys.append(self.keys[index])
                   row.off()  # Zeile nach der Prüfung deaktivieren
               return pressed_keys

#. Richtet das Passwortüberprüfungssystem ein. ``LENS`` definiert die Länge des Passworts. ``password`` ist das voreingestellte korrekte Passwort, während ``testword`` verwendet wird, um die Eingabe des Benutzers zu speichern. ``keyIndex`` verfolgt die aktuelle Position in der Eingabe des Benutzers.

   .. code-block:: python

       # Passwortüberprüfungseinrichtung
       LENS = 4
       password = ['1', '9', '8', '4']  # Voreingestelltes Passwort
       testword = ['0', '0', '0', '0']  # Speicher für Benutzereingabe
       keyIndex = 0  # Index für Eingabetasten

#. Funktion zum Vergleichen des eingegebenen Passworts (``testword``) mit dem voreingestellten Passwort (``password``) und Rückgabe des Ergebnisses.

   .. code-block:: python

       def check():
           """
           Überprüft, ob das eingegebene Passwort mit dem voreingestellten Passwort übereinstimmt.
           :return: 1 bei Übereinstimmung, 0 andernfalls.
           """
           for i in range(LENS):
               if password[i] != testword[i]:
                   return 0
           return 1

#. Initialisiert das Keypad und das LCD-Display. Zeigt eine Willkommensnachricht und Anweisungen zur Passworteingabe an.

   .. code-block:: python

       def setup():
           """
           Einrichtung des Keypads und des LCD-Displays.
           """
           global keypad, last_key_pressed
           # Pin-Konfiguration für Keypad
           rows_pins = [18, 23, 24, 25]
           cols_pins = [10, 22, 27, 17]
           keys = ["1", "2", "3", "A",
                   "4", "5", "6", "B",
                   "7", "8", "9", "C",
                   "*", "0", "#", "D"]

           # Keypad und LCD initialisieren
           keypad = Keypad(rows_pins, cols_pins, keys)
           last_key_pressed = []
           LCD1602.init(0x27, 1)  # LCD initialisieren
           LCD1602.clear()
           LCD1602.write(0, 0, 'WILLKOMMEN!')
           LCD1602.write(2, 1, 'Passwort eingeben')
           sleep(2)

#. Die Hauptschleife für die Verarbeitung der Keypadeingabe und die Passwortüberprüfung. Sie aktualisiert das LCD-Display basierend auf dem eingegebenen Passwort und gibt Feedback, ob das Passwort korrekt oder falsch ist.

   .. code-block:: python

       def loop():
           """
           Hauptschleife für die Handhabung der Keypadeingabe und Passwortüberprüfung.
           """
           global keyIndex, LENS, keypad, last_key_pressed
           while True:
               pressed_keys = keypad.read()
               if pressed_keys and pressed_keys != last_key_pressed:
                   if keyIndex < LENS:
                       LCD1602.clear()
                       LCD1602.write(0, 0, "Passwort eingeben:")
                       LCD1602.write(15 - keyIndex, 1, pressed_keys[0])
                       testword[keyIndex] = pressed_keys[0]
                       keyIndex += 1

                   if keyIndex == LENS:
                       if check() == 0:
                           LCD1602.clear()
                           LCD1602.write(3, 0, "FALSCHER SCHLÜSSEL!")
                           LCD1602.write(0, 1, "bitte erneut versuchen")
                       else:
                           LCD1602.clear()
                           LCD1602.write(4, 0, "KORREKT!")
                           LCD1602.write(2, 1, "willkommen zurück")
                       keyIndex = 0  # Schlüsselindex nach der Überprüfung zurücksetzen

               last_key_pressed = pressed_keys
               sleep(0.1)

#. Führt die Einrichtung durch und tritt in die Hauptschleife ein. Ermöglicht einen sauberen Ausstieg aus dem Programm mittels Tastaturunterbrechung (Ctrl+C), wobei das LCD-Display gelöscht wird.

   .. code-block:: python

       try:
           setup()
           loop()
       except KeyboardInterrupt:
           LCD1602.clear()  # LCD-Display bei Unterbrechung löschen


