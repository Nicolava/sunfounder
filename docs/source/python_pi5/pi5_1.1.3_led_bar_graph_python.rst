.. _1.1.3_py_pi5:

1.1.3 LED-Balkendiagramm
=========================================

Einführung
-------------

In diesem Projekt beleuchten wir die Lichter auf dem LED-Balkendiagramm nacheinander.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/1.1.3_led_bar_list.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - INHALT DES KITS
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`bar_graph`
        - \-

Schaltplan
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SPICE0       Pin 24   10       8
SPICE1       Pin 26   11       7
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       22
GPIO21       Pin 40   29       21
============ ======== ======== ===

.. image:: ../python_pi5/img/1.1.3_LedBarGraph_schematic.png

Experimentelle Verfahren
------------------------------

**Schritt 1**: Baue den Schaltkreis.

.. note::

    Achten Sie auf die Richtung beim Anschließen. Wenn Sie es verkehrt herum verbinden, wird es nicht leuchten.

.. image:: ../python_pi5/img/1.1.3_LedBarGraph_circuit.png

**Schritt 2:** Gehe zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3**: Führe die ausführbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.3_LedBarGraph_zero.py

Nachdem der Code ausgeführt wurde, sehen Sie, dass die LEDs auf dem LED-Balkendiagramm regelmäßig ein- und ausschalten.

**Code**

.. note::

    Sie können den untenstehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Aber zuvor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   from time import sleep

   # Definiere die GPIO-Pins, an denen die LEDs angeschlossen sind
   led_pins = [18, 23, 24, 25, 8, 7, 12, 16, 20, 21]

   # Erstelle LED-Objekte für jeden Pin
   leds = [LED(pin) for pin in led_pins]

   def ungerade_led_balkendiagramm():
       # Beleuchte nacheinander ungerade nummerierte LEDs (Index 0, 2, 4, usw.)
       for i in range(5):
           j = i * 2  # Berechne ungeraden Index
           leds[j].on()  # Schalte ungerade nummerierte LED ein
           sleep(0.3)    # Verzögerung für visuellen Effekt
           leds[j].off() # Schalte LED aus

   def gerade_led_balkendiagramm():
       # Beleuchte nacheinander gerade nummerierte LEDs (Index 1, 3, 5, usw.)
       for i in range(5):
           j = i * 2 + 1  # Berechne geraden Index
           leds[j].on()   # Schalte gerade nummerierte LED ein
           sleep(0.3)     # Verzögerung für visuellen Effekt
           leds[j].off()  # Schalte LED aus

   def gesamtes_led_balkendiagramm():
       # Beleuchte nacheinander alle LEDs einzeln
       for led in leds:
           led.on()       # Schalte LED ein
           sleep(0.3)     # Verzögerung für visuellen Effekt
           led.off()      # Schalte LED aus

   def alle_leds_ausschalten():
       # Schalte alle LEDs auf einmal aus
       for led in leds:
           led.off()

   try:
       # Hauptloop zum Durchlaufen der LED-Muster
       while True:
           ungerade_led_balkendiagramm()   # Aktiviere ungerade nummerierte LEDs
           sleep(0.3)            # Pause zwischen den Mustern
           gerade_led_balkendiagramm()  # Aktiviere gerade nummerierte LEDs
           sleep(0.3)            # Pause zwischen den Mustern
           gesamtes_led_balkendiagramm()   # Aktiviere alle LEDs
           sleep(0.3)            # Pause vor Neustart

   except KeyboardInterrupt:
       # Handle Unterbrechung (Ctrl+C) auf elegante Weise
       alle_leds_ausschalten()      # Stelle sicher, dass alle LEDs beim Beenden ausgeschaltet sind
       pass


**Code-Erklärung**

#. Diese Zeilen importieren die notwendigen Klassen und Funktionen. ``LED`` von ``gpiozero`` für die LED-Steuerung und ``sleep`` von ``time`` für Verzögerungen.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED
       from time import sleep

#. Die Liste ``led_pins`` enthält die GPIO-Pinnummern. ``leds`` ist eine Liste von ``LED``-Objekten, jedes entspricht einem Pin in ``led_pins``.

   .. code-block:: python

       # Definiere die GPIO-Pins, an denen die LEDs angeschlossen sind
       led_pins = [18, 23, 24, 25, 8, 7, 12, 16, 20, 21]

       # Erstelle LED-Objekte für jeden Pin
       leds = [LED(pin) for pin in led_pins]

#. Lasse die LED auf der ungeraden Ziffer des LED-Balkendiagramms nacheinander leuchten.

   .. code-block:: python

       def ungerade_led_balkendiagramm():
           # Beleuchte nacheinander ungerade nummerierte LEDs (Index 0, 2, 4, usw.)
           for i in range(5):
               j = i * 2  # Berechne ungeraden Index
               leds[j].on()  # Schalte ungerade nummerierte LED ein
               sleep(0.3)    # Verzögerung für visuellen Effekt
               leds[j].off() # Schalte LED aus

#. Lasse die LED auf der geraden Ziffer des LED-Balkendiagramms nacheinander leuchten.

   .. code-block:: python

       def gerade_led_balkendiagramm():
           # Beleuchte nacheinander gerade nummerierte LEDs (Index 1, 3, 5, usw.)
           for i in range(5):
               j = i * 2 + 1  # Berechne geraden Index
               leds[j].on()   # Schalte gerade nummerierte LED ein
               sleep(0.3)     # Verzögerung für visuellen Effekt
               leds[j].off()  # Schalte LED aus

#. Lasse die LEDs auf dem LED-Balkendiagramm nacheinander leuchten.

   .. code-block:: python

       def gesamtes_led_balkendiagramm():
           # Beleuchte nacheinander alle LEDs einzeln
           for led in leds:
               led.on()       # Schalte LED ein
               sleep(0.3)     # Verzögerung für visuellen Effekt
               led.off()      # Schalte LED aus

#. Die Schleife ``while True`` durchläuft kontinuierlich die LED-Muster. Der ``except``-Block behandelt ein KeyboardInterrupt (Ctrl+C) und stellt sicher, dass alle LEDs beim Beenden ausgeschaltet sind.

   .. code-block:: python

       try:
           # Hauptloop zum Durchlaufen der LED-Muster
           while True:
               ungerade_led_balkendiagramm()   # Aktiviere ungerade nummerierte LEDs
               sleep(0.3)            # Pause zwischen den Mustern
               gerade_led_balkendiagramm()  # Aktiviere gerade nummerierte LEDs
               sleep(0.3)            # Pause zwischen den Mustern
               gesamtes_led_balkendiagramm()   # Aktiviere alle LEDs
               sleep(0.3)            # Pause vor Neustart

       except KeyboardInterrupt:
           # Handle Unterbrechung (Ctrl+C) auf elegante Weise
           alle_leds_ausschalten()      # Stelle sicher, dass alle LEDs beim Beenden ausgeschaltet sind
           pass

