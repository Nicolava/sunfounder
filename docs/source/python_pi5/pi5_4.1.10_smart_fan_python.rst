.. note::

    ¬°Hola, bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook! Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos Exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _4.1.10_py_pi5:

4.1.7 Ventilador Inteligente
================================

Introducci√≥n
-------------------

En este proyecto, utilizaremos motores, botones y termistores para crear un 
ventilador inteligente manual y autom√°tico cuya velocidad del viento es ajustable.

Componentes Necesarios
---------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../python_pi5/img/4.1.10_smart_fan_list.png
    :width: 800
    :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_power_module`
        - \-
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_motor`
        - |link_motor_buy|


Diagrama Esquem√°tico
----------------------------

============== ====== ======== ===
Nombre T-Board f√≠sica WiringPi BCM
GPIO17         Pin 11 0        17
GPIO18         Pin 12 1        18
GPIO27         Pin 13 2        27
GPIO22         Pin 15 3        22
GPIO5          Pin 29 21       5
GPIO6          Pin 31 22       6
GPIO13         Pin 33 23       13
============== ====== ======== ===

.. image:: ../python_pi5/img/4.1.10_smart_fan_schematic.png
   :align: center

Procedimientos Experimentales
-------------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../python_pi5/img/4.1.10_smart_fan_circuit.png

.. note::
    El m√≥dulo de alimentaci√≥n puede usar una bater√≠a de 9V con el conector de 
    bater√≠a de 9V incluido en el kit. Inserta el puente del m√≥dulo de alimentaci√≥n 
    en las tiras de bus de 5V de la placa de pruebas.

.. image:: ../python_pi5/img/4.1.10_smart_fan_battery.jpeg
   :align: center

**Paso 2**: Accede a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**Paso 3**: Ejecuta.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 4.1.10_SmartFan_zero.py

Cuando el c√≥digo se ejecuta, inicia el ventilador presionando el bot√≥n. 
Cada vez que presionas, se ajusta una velocidad hacia arriba o hacia abajo. 
Hay **5** niveles de velocidad: **0~4**. Cuando se establece en el nivel 
4\ :sup:`to` y presionas el bot√≥n, el ventilador deja de funcionar con una 
velocidad de viento de **0**.

Una vez que la temperatura sube o baja m√°s de 2‚ÑÉ, la velocidad autom√°ticamente 
aumenta o disminuye en 1 nivel.

C√≥digo
--------

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python-pi5``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import Motor, Button
   from time import sleep
   import ADC0834
   import math

   # Inicializar pines GPIO para el bot√≥n y control del motor
   BtnPin = Button(22)
   motor = Motor(forward=5, backward=6, enable=13)

   # Inicializar el m√≥dulo ADC0834 para la detecci√≥n de temperatura
   ADC0834.setup()

   # Inicializar variables para rastrear el nivel de velocidad del motor y las temperaturas
   level = 0
   currentTemp = 0
   markTemp = 0

   def temperature():
       """
       Reads and calculates the current temperature from the sensor.
       Returns:
           float: The current temperature in Celsius.
       """
       # Leer valor anal√≥gico del m√≥dulo ADC0834
       analogVal = ADC0834.getResult()
       # Convertir valor anal√≥gico a voltaje y luego a resistencia
       Vr = 5 * float(analogVal) / 255
       Rt = 10000 * Vr / (5 - Vr)
       # Calcular temperatura en Celsius
       temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))
       Cel = temp - 273.15
       return Cel

   def motor_run(level):
       """
       Adjusts the motor speed based on the specified level.
       Args:
           level (int): Desired motor speed level.
       Returns:
           int: Adjusted motor speed level.
       """
       # Detener el motor si el nivel es 0
       if level == 0:
           motor.stop()
           return 0
       # Limitar el nivel a 4 para velocidad m√°xima
       if level >= 4:
           level = 4
       # Configurar la velocidad del motor
       motor.forward(speed=float(level / 4))
       return level

   def changeLevel():
       """
       Changes the motor speed level when the button is pressed and updates the reference temperature.
       """
       global level, currentTemp, markTemp
       print("Button pressed")
       # Cycle through levels 0-4
       level = (level + 1) % 5
       # Actualizar la temperatura de referencia
       markTemp = currentTemp

   # Vincular el evento de presionar el bot√≥n a la funci√≥n changeLevel
   BtnPin.when_pressed = changeLevel

   def main():
       """
       Main function to continuously monitor and respond to temperature changes.
       """
       global level, currentTemp, markTemp
       # Establecer la temperatura de referencia inicial
       markTemp = temperature()
       while True:
           # Leer continuamente la temperatura actual
           currentTemp = temperature()
           # Ajustar el nivel del motor seg√∫n la diferencia de temperatura
           if level != 0:
               if currentTemp - markTemp <= -2:
                   level -= 1
                   markTemp = currentTemp
               elif currentTemp - markTemp >= 2:
                   if level < 4:
                       level += 1
                   markTemp = currentTemp
           # Ejecutar el motor al nivel ajustado
           level = motor_run(level)

   # Ejecutar la funci√≥n principal y manejar KeyboardInterrupt
   try:
       main()
   except KeyboardInterrupt:
       # Detener el motor cuando se interrumpe el script
       motor.stop()



Explicaci√≥n del C√≥digo
--------------------------

#. Importa clases para gestionar un motor y un bot√≥n, y la funci√≥n sleep para introducir pausas. Adem√°s, importa la biblioteca ADC0834 para la detecci√≥n de temperatura y la biblioteca math para c√°lculos matem√°ticos.

   .. code-block:: python

       #!/usr/bin/env python3

       from gpiozero import Motor, Button
       from time import sleep
       import ADC0834
       import math

#. Configura el bot√≥n en el pin GPIO 22 y configura el motor con pines GPIO espec√≠ficos para el control. Inicializa el m√≥dulo ADC0834 para la medici√≥n de temperatura. Tambi√©n, inicializa variables para monitorear el nivel de velocidad del motor y las temperaturas.

   .. code-block:: python

       # Inicializar pines GPIO para el control del bot√≥n y el motor
       BtnPin = Button(22)
       motor = Motor(forward=5, backward=6, enable=13)

       # Inicializar el m√≥dulo ADC0834 para la detecci√≥n de temperatura
       ADC0834.setup()

       # Inicializar variables para rastrear el nivel de velocidad del motor y las temperaturas
       level = 0
       currentTemp = 0
       markTemp = 0

#. Define una funci√≥n para leer y calcular la temperatura del sensor, convirtiendo la lectura a Celsius.

   .. code-block:: python

       def temperature():
           """
           Reads and calculates the current temperature from the sensor.
           Returns:
               float: The current temperature in Celsius.
           """
           # Leer valor anal√≥gico del m√≥dulo ADC0834
           analogVal = ADC0834.getResult()
           # Convertir valor anal√≥gico a voltaje y luego a resistencia
           Vr = 5 * float(analogVal) / 255
           Rt = 10000 * Vr / (5 - Vr)
           # Calcular temperatura en Celsius
           temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))
           Cel = temp - 273.15
           return Cel

#. Introduce una funci√≥n para ajustar la velocidad del motor seg√∫n el nivel especificado.

   .. code-block:: python

       def motor_run(level):
           """
           Adjusts the motor speed based on the specified level.
           Args:
               level (int): Desired motor speed level.
           Returns:
               int: Adjusted motor speed level.
           """
           # Detener el motor si el nivel es 0
           if level == 0:
               motor.stop()
               return 0
           # Limitar el nivel a 4 para velocidad m√°xima
           if level >= 4:
               level = 4
           # Configurar la velocidad del motor
           motor.forward(speed=float(level / 4))
           return level

#. Implementa una funci√≥n para cambiar manualmente el nivel de velocidad del motor utilizando un bot√≥n, y vincula esta funci√≥n al evento de presionar el bot√≥n.

   .. code-block:: python

       def changeLevel():
           """
           Changes the motor speed level when the button is pressed and updates the reference temperature.
           """
           global level, currentTemp, markTemp
           print("Button pressed")
           # Ciclar a trav√©s de los niveles 0-4
           level = (level + 1) % 5
           # Actualizar la temperatura de referencia
           markTemp = currentTemp

       # Vincular el evento de presionar el bot√≥n a la funci√≥n changeLevel
       BtnPin.when_pressed = changeLevel

#. La funci√≥n principal, dise√±ada para ajustar continuamente la velocidad del motor en respuesta a las fluctuaciones de temperatura, a√∫n debe ser implementada.

   .. code-block:: python

       def main():
           """
           Main function to continuously monitor and respond to temperature changes.
           """
           global level, currentTemp, markTemp
           # Establecer la temperatura de referencia inicial
           markTemp = temperature()
           while True:
               # Leer continuamente la temperatura actual
               currentTemp = temperature()
               # Ajustar el nivel del motor seg√∫n la diferencia de temperatura
               if level != 0:
                   if currentTemp - markTemp <= -2:
                       level -= 1
                       markTemp = currentTemp
                   elif currentTemp - markTemp >= 2:
                       if level < 4:
                           level += 1
                       markTemp = currentTemp
               # Ejecutar el motor al nivel ajustado
               level = motor_run(level)

#. Ejecuta la funci√≥n principal y asegura que el motor se detenga si el script es interrumpido.

   .. code-block:: python

       # Ejecutar la funci√≥n principal y manejar KeyboardInterrupt
       try:
           main()
       except KeyboardInterrupt:
           # Detener el motor cuando se interrumpe el script
           motor.stop()


