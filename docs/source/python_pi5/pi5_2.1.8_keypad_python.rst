.. _2.1.8_py_pi5:

2.1.8 Tastenfeld
====================

Einleitung
-----------------

Ein Tastenfeld ist ein rechteckiges Feld von Tasten. In diesem Projekt werden wir es verwenden, um Zeichen einzugeben.

Benötigte Komponenten
----------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/2.1.8_keypad_list.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - IN DIESEM KIT ENTHALTENE TEILE
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`keypad`
        - \-

Schaltplan
------------------

.. image:: ../python_pi5/img/2.1.8_keypad_chematic_1.png


.. image:: ../python_pi5/img/2.1.8_keypad_chematic_2.png

Experimentelle Verfahren
----------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/2.1.8_keypad_circuit.png

**Schritt 2:** Öffnen Sie die Code-Datei.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**Schritt 3:** Führen Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.8_Keypad_zero.py

Nachdem der Code ausgeführt wurde, werden die Werte der gedrückten Tasten auf dem Tastenfeld (Tastenwert) auf dem Bildschirm angezeigt.

**Code**

.. note::

    Sie können den unten stehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Aber zuvor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DigitalOutputDevice, Button
   from time import sleep

   class Keypad:
       def __init__(self, rows_pins, cols_pins, keys):
           """
           Initialisiert das Tastenfeld mit den angegebenen Reihen- und Spaltenpins sowie dem Tastenlayout.
           :param rows_pins: Liste der GPIO-Pins für die Reihen.
           :param cols_pins: Liste der GPIO-Pins für die Spalten.
           :param keys: Liste der Tasten im Tastenlayout.
           """
           # Initialisiert die Reihenpins als DigitalOutputDevice
           self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]
           # Initialisiert die Spaltenpins als Buttons
           self.cols = [Button(pin, pull_up=False) for pin in cols_pins]
           self.keys = keys  # Setzt das Tastenlayout fest

       def read(self):
           """
           Liest die aktuell gedrückten Tasten auf dem Tastenfeld.
           :return: Eine Liste der gedrückten Tasten.
           """
           pressed_keys = []
           # Scannt jede Reihe und Spalte, um gedrückte Tasten zu identifizieren
           for i, row in enumerate(self.rows):
               row.on()  # Aktiviert die aktuelle Reihe
               for j, col in enumerate(self.cols):
                   if col.is_pressed:  # Überprüft, ob die Spaltentaste gedrückt ist
                       # Berechnet den Tastenindex basierend auf Reihe und Spalte
                       index = i * len(self.cols) + j
                       pressed_keys.append(self.keys[index])
               row.off()  # Deaktiviert die aktuelle Reihe
           return pressed_keys

   try:
       # Konfiguriert Reihen, Spalten und Tastenlayout
       rows_pins = [18, 23, 24, 25]
       cols_pins = [10, 22, 27, 17]
       keys = ["1", "2", "3", "A",
               "4", "5", "6", "B",
               "7", "8", "9", "C",
               "*", "0", "#", "D"]

       # Erstellt eine Instanz der Keypad-Klasse
       keypad = Keypad(rows_pins, cols_pins, keys)
       last_key_pressed = []

       # Liest kontinuierlich das Tastenfeld und druckt neu gedrückte Tasten
       while True:
           pressed_keys = keypad.read()
           if pressed_keys and pressed_keys != last_key_pressed:
               print(pressed_keys)  # Druckt die Liste der gedrückten Tasten
               last_key_pressed = pressed_keys
           sleep(0.1)  # Kurze Verzögerung, um die CPU-Last zu reduzieren

   except KeyboardInterrupt:
       # Elegante Behandlung einer Tastaturunterbrechung (Strg+C)
       pass


**Code-Erklärung**

#. Importiert die Klassen ``DigitalOutputDevice`` und ``Button`` aus der Bibliothek ``gpiozero`` sowie die Funktion ``sleep`` für Verzögerungen.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import DigitalOutputDevice, Button
       from time import sleep

#. Definiert die Klasse ``Keypad``. Die Methode ``__init__`` initialisiert das Tastenfeld mit den angegebenen Reihen- und Spaltenpins sowie Tasten. Die Methode ``read`` scannt das Tastenfeld und gibt eine Liste der gedrückten Tasten zurück.

   .. code-block:: python

       class Keypad:
           def __init__(self, rows_pins, cols_pins, keys):
               """
               Initialisiert das Tastenfeld mit spezifizierten Reihen- und Spaltenpins und dem Tastenlayout.
               :param rows_pins: Liste der GPIO-Pins für die Reihen.
               :param cols_pins: Liste der GPIO-Pins für die Spalten.
               :param keys: Liste der Tasten im Tastenlayout.
               """
               # Initialisiert Reihenpins als DigitalOutputDevice
               self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]
               # Initialisiert Spaltenpins als Buttons
               self.cols = [Button(pin, pull_up=False) for pin in cols_pins]
               self.keys = keys  # Legt das Tastenlayout fest

           def read(self):
               """
               Liest die aktuell gedrückten Tasten auf dem Tastenfeld.
               :return: Eine Liste der gedrückten Tasten.
               """
               pressed_keys = []
               # Scannt jede Reihe und Spalte, um gedrückte Tasten zu identifizieren
               for i, row in enumerate(self.rows):
                   row.on()  # Aktiviert die aktuelle Reihe
                   for j, col in enumerate(self.cols):
                       if col.is_pressed:  # Überprüft, ob die Spaltentaste gedrückt ist
                           # Berechnet den Tastenindex basierend auf Reihe und Spalte
                           index = i * len(self.cols) + j
                           pressed_keys.append(self.keys[index])
                   row.off()  # Deaktiviert die aktuelle Reihe
               return pressed_keys

#. Richtet die GPIO-Pins für Reihen und Spalten ein und definiert das Tastenlayout.

   .. code-block:: python

       try:
           # Konfiguriert Reihen, Spalten und Tastenlayout
           rows_pins = [18, 23, 24, 25]
           cols_pins = [10, 22, 27, 17]
           keys = ["1", "2", "3", "A",
                   "4", "5", "6", "B",
                   "7", "8", "9", "C",
                   "*", "0", "#", "D"]

#. Erstellt eine Instanz der Klasse ``Keypad`` mit der spezifizierten Konfiguration.

   .. code-block:: python

       try:
           ...

           # Erstellt eine Instanz der Klasse Keypad
           keypad = Keypad(rows_pins, cols_pins, keys)
           last_key_pressed = []

#. Liest kontinuierlich das Tastenfeld nach gedrückten Tasten, druckt Veränderungen im Tastenzustand und führt eine kurze Verzögerung ein, um die CPU-Belastung zu reduzieren. Fängt ein KeyboardInterrupt (wie Strg+C) ab, um einen anmutigen Ausstieg aus dem Skript zu ermöglichen.

   .. code-block:: python

       try:
           ...

           # Liest kontinuierlich das Tastenfeld und druckt neu gedrückte Tasten
           while True:
               pressed_keys = keypad.read()
               if pressed_keys and pressed_keys != last_key_pressed:
                   print(pressed_keys)  # Druckt die Liste der gedrückten Tasten
                   last_key_pressed = pressed_keys
               sleep(0.1)  # Kurze Verzögerung, um die CPU-Belastung zu reduzieren

       except KeyboardInterrupt:
           # Behandelt ein Tastaturunterbrechung (Strg+C) für einen sauberen Ausstieg
           pass

