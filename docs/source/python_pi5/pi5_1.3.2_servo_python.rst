.. _1.3.2_py_pi5:

1.3.2 Servomotor
============================

Einleitung
----------------

In diesem Projekt lernen wir, wie man einen Servomotor rotieren lässt.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/1.3.2_servo_list.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - IN DIESEM KIT ENTHALTENE TEILE
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`servo`
        - |link_servo_buy|

Schaltplan
--------------------

.. image:: ../python_pi5/img/1.3.2_servo_schematic.png


Experimentelle Verfahren
------------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/1.3.2_Servo_circuit.png

**Schritt 2**: Wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3**: Führen Sie die ausführbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.2_Servo_zero.py

Nachdem das Programm ausgeführt wurde, wird der Servomotor von 0 Grad über 90 Grad zu 180 Grad rotieren und dann von 180 Grad über 90 Grad zurück zu 0 Grad, in einem Kreis.

**Code**

.. note::

    Sie können den unten stehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Aber zuvor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Servo
   from time import sleep

   # Festlegen der GPIO-Pin-Nummer, an die der Servomotor angeschlossen ist
   myGPIO = 18

   # Definieren eines Korrekturfaktors zur Feinabstimmung der Servoimpulsbreite
   myCorrection = 0.45
   maxPW = (2.0 + myCorrection) / 1000  # Maximale Impulsbreite berechnen
   minPW = (1.0 - myCorrection) / 1000  # Minimale Impulsbreite berechnen

   # Initialisierung des Servo-Objekts mit benutzerdefinierten Impulsbreiten
   servo = Servo(myGPIO, min_pulse_width=minPW, max_pulse_width=maxPW)

   try:
       while True:
           # Positionieren des Servos in der Mitte und warten
           servo.mid()
           print("Mitte")  # Aktuelle Position anzeigen
           sleep(0.5)    # Kurze Pause von 0,5 Sekunden

           # Bewegen des Servos in die minimale Position und warten
           servo.min()
           print("Min")  # Aktuelle Position anzeigen
           sleep(1)      # Position für 1 Sekunde halten

           # Rückkehr des Servos in die Mittelposition und warten
           servo.mid()
           print("Mitte")  # Aktuelle Position anzeigen
           sleep(0.5)    # Kurze Pause von 0,5 Sekunden

           # Bewegen des Servos in die maximale Position und warten
           servo.max()
           print("Max")  # Aktuelle Position anzeigen
           sleep(1)      # Position für 1 Sekunde halten

   except KeyboardInterrupt:
       # Skript bei einem Tastaturunterbrechung (Strg+C) elegant beenden
       pass
    

**Code-Erklärung**

#. Diese Importanweisungen holen die Klasse ``Servo`` für die Servosteuerung und die Funktion ``sleep`` für die Zeitsteuerung.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Servo
       from time import sleep

#. Legt die GPIO-Pin-Nummer 18 für den Anschluss des Servomotors fest.

   .. code-block:: python

       # Festlegen der GPIO-Pin-Nummer, an die der Servomotor angeschlossen ist
       myGPIO = 18

#. Diese Zeilen definieren einen Korrekturfaktor und verwenden ihn, um die maximale und minimale Impulsbreite für den Servo zu berechnen und damit seinen Bewegungsbereich fein abzustimmen.

   .. code-block:: python

       # Definieren eines Korrekturfaktors zur Feinabstimmung der Servoimpulsbreite
       myCorrection = 0.45
       maxPW = (2.0 + myCorrection) / 1000  # Maximale Impulsbreite berechnen
       minPW = (1.0 - myCorrection) / 1000  # Minimale Impulsbreite berechnen

#. Initialisiert das Servo-Objekt mit der angegebenen GPIO-Pin-Nummer und benutzerdefinierten Impulsbreiten.

   .. code-block:: python

       # Initialisierung des Servo-Objekts mit benutzerdefinierten Impulsbreiten
       servo = Servo(myGPIO, min_pulse_width=minPW, max_pulse_width=maxPW)

#. Der `try`-Block enthält eine `while True`-Schleife, um den Servo kontinuierlich zu bewegen. Der Servo wird an den Mittel-, Min- und Max-Punkten positioniert, mit jeder Position, die ausgedruckt und für eine bestimmte Dauer gehalten wird.

   .. code-block:: python

       try:
           while True:
               # Positionieren des Servos in der Mitte und warten
               servo.mid()
               print("Mitte")  # Aktuelle Position anzeigen
               sleep(0.5)    # Kurze Pause von 0,5 Sekunden

               # Bewegen des Servos in die minimale Position und warten
               servo.min()
               print("Min")  # Aktuelle Position anzeigen
               sleep(1)      # Position für 1 Sekunde halten

               # Rückkehr des Servos in die Mittelposition und warten
               servo.mid()
               print("Mitte")  # Aktuelle Position anzeigen
               sleep(0.5)    # Kurze Pause von 0,5 Sekunden

               # Bewegen des Servos in die maximale Position und warten
               servo.max()
               print("Max")  # Aktuelle Position anzeigen
               sleep(1)      # Position für 1 Sekunde halten

       except KeyboardInterrupt:
           # Skript bei einem Tastaturunterbrechung (Strg+C) elegant beenden
           pass
