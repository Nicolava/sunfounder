.. _2.1.3_py_pi5:

2.1.3 タッチスイッチモジュール
=================================

はじめに
-------------------

このプロジェクトでは、タッチスイッチモジュールについて学びます。これは従来のスイッチを置き換えるもので、操作が便利で、タッチ感が良く、制御が正確で、機械的な摩耗が最小限に抑えられるという利点があります。

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../python_pi5/img/2.1.3_touch_switch_list.png
    :width: 700
    :align: center

.. It's definitely convenient to buy a whole kit, here's the link: 

.. .. list-table::
..     :widths: 20 20 20
..     :header-rows: 1

..     *   - Name	
..         - ITEMS IN THIS KIT
..         - LINK
..     *   - Raphael Kit
..         - 337
..         - |link_Raphael_kit|

.. You can also buy them separately from the links below.

.. .. list-table::
..     :widths: 30 20
..     :header-rows: 1

..     *   - COMPONENT INTRODUCTION
..         - PURCHASE LINK

..     *   - :ref:`gpio_extension_board`
..         - |link_gpio_board_buy|
..     *   - :ref:`breadboard`
..         - |link_breadboard_buy|
..     *   - :ref:`wires`
..         - |link_wires_buy|
..     *   - :ref:`resistor`
..         - |link_resistor_buy|
..     *   - :ref:`led`
..         - |link_led_buy|
..     *   - :ref:`touch_switch`
..         - |link_touch_buy|

回路図
-----------------

.. image:: ../python_pi5/img/2.1.3_touch_switch_schematic.png
    :width: 500
    :align: center

実験手順
------------------------------

**ステップ 1::** 回路を組み立てる。

.. image:: ../python_pi5/img/2.1.3_touch_switch_circuit.png
    :width: 700
    :align: center

**ステップ 2:** ディレクトリを変更する。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**ステップ 3:** 実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.3_TouchSwitch_zero.py

コードが実行されている間、赤いLEDが点灯します。タッチスイッチモジュールをタップすると、黄色いLEDが点灯します。

**コード**

.. note::

    下記のコードを **変更/リセット/コピー/実行/停止** することができます。しかし、その前に ``raphael-kit/python-pi5`` のようなソースコードのパスに移動する必要があります。コードを変更した後、直接実行して効果を見ることができます。


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # gpiozeroからLEDとButtonクラスをインポート
   from time import sleep  # 遅延のためにtimeからsleepをインポート

   # プルアップ抵抗を無効にしてGPIOピン17にタッチセンサー（Button）を初期化
   touch_sensor = Button(17, pull_up=False)  # センサーが押されたときにピンをローに引くタイプに適しています

   # GPIOピン22と27にそれぞれ接続されたLED1とLED2を初期化
   led1 = LED(22)  # LED1はGPIOピン22に接続
   led2 = LED(27)  # LED2はGPIOピン27に接続

   try:
       # タッチセンサーの状態を継続的に監視し、それに応じてLEDを制御
       while True:
           if touch_sensor.is_pressed:  # タッチセンサーが押されているかチェック
               print('触れました！')  # センサーが作動したことを示すメッセージを出力
               led1.off()  # LED1を消灯
               led2.on()   # LED2を点灯
           else:  # センサーが押されていない場合
               led1.on()   # LED1を点灯
               led2.off()  # LED2を消灯

           sleep(0.5)  # センサーの状態を再チェックする前に0.5秒間待機

   except KeyboardInterrupt:
       # キーボード割り込み（Ctrl+C）を処理し、ループから清潔に退出
       pass
	

**コード説明**

#. この行はスクリプトがPython 3で実行されるように設定します。GPIOデバイスを制御するために ``gpiozero`` から ``LED`` と ``Button`` を、遅延のために ``time`` から ``sleep`` をインポートします。

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # gpiozeroからLEDとButtonクラスをインポート
       from time import sleep  # 遅延のためにtimeからsleepをインポート

#. プルアップ抵抗を無効にしてGPIOピン17にタッチセンサー（Buttonとして）を初期化し、GPIOピン22と27に二つのLEDを初期化します。

   .. code-block:: python

       # プルアップ抵抗を無効にしてGPIOピン17にタッチセンサー（Button）を初期化
       touch_sensor = Button(17, pull_up=False)  # センサーが押されたときにピンをローに引くタイプに適しています

       # GPIOピン22と27にそれぞれ接続されたLED1とLED2を初期化
       led1 = LED(22)  # LED1はGPIOピン22に接続
       led2 = LED(27)  # LED2はGPIOピン27に接続

#. メインループでは、タッチセンサーの状態をチェックします。触れられたとき、LED2が点灯しLED1が消灯します；触れられていないとき、LED1が点灯しLED2が消灯します。このループは0.5秒ごとに繰り返されます。Ctrl+C（KeyboardInterrupt）を捕捉して、スクリプトを優雅に終了させることができます。

   .. code-block:: python

       try:
           # タッチセンサーの状態を継続的に監視し、それに応じてLEDを制御
           while True:
               if touch_sensor.is_pressed:  # タッチセンサーが押されているかチェック
                   print('触れました！')  # センサーが作動したことを示すメッセージを出力
                   led1.off()  # LED1を消灯
                   led2.on()   # LED2を点灯
               else:  # センサーが押されていない場合
                   led1.on()   # LED1を点灯
                   led2.off()  # LED2を消灯

               sleep(0.5)  # センサーの状態を再チェックする前に0.5秒間待機

       except KeyboardInterrupt:
           # キーボード割り込み（Ctrl+C）を処理し、ループから清潔に退出
           pass