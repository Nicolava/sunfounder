.. _2.1.3_py_pi5:

2.1.3 Berührungsschaltermodul
==========================================

Einleitung
--------------

In diesem Projekt werden wir das Berührungsschaltermodul kennenlernen. Es kann traditionelle Schaltertypen ersetzen und bietet folgende Vorteile: bequeme Bedienung, feines Tastgefühl, präzise Steuerung und minimaler mechanischer Verschleiß.

Benötigte Komponenten
---------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/2.1.3_touch_switch_list.png
    :width: 700
    :align: center

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - IN DIESEM KIT ENTHALTENE TEILE
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`led`
        - |link_led_buy|
    *   - :ref:`touch_switch`
        - |link_touch_buy|

Schaltplan
--------------------

.. image:: ../python_pi5/img/2.1.3_touch_switch_schematic.png
    :width: 500
    :align: center

Experimentelle Verfahren
-------------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/2.1.3_touch_switch_circuit.png
    :width: 700
    :align: center

**Schritt 2:** Wechseln Sie ins Verzeichnis.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3:** Führen Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.3_TouchSwitch_zero.py

Während der Code läuft, leuchtet die rote LED; wenn Sie das Berührungsschaltermodul antippen, schaltet sich die gelbe LED ein.

**Code**

.. note::

    Sie können den unten stehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Aber zuvor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Import der Klassen LED und Button aus gpiozero
   from time import sleep  # Import der Funktion sleep für Verzögerungen

   # Initialisierung des Berührungssensors (Button) am GPIO-Pin 17, Pull-Up-Widerstand deaktiviert
   touch_sensor = Button(17, pull_up=False)  # Geeignet für Sensoren, die den Pin bei Berührung auf Low ziehen

   # Initialisierung von LED1 und LED2, verbunden mit den GPIO-Pins 22 und 27
   led1 = LED(22)  # LED1 verbunden mit GPIO-Pin 22
   led2 = LED(27)  # LED2 verbunden mit GPIO-Pin 27

   try:
       # Kontinuierliche Überwachung des Zustands des Berührungssensors und entsprechende Steuerung der LEDs
       while True:
           if touch_sensor.is_pressed:  # Überprüfung, ob der Berührungssensor gedrückt wird
               print('Berührt!')  # Ausgabe einer Nachricht, die die Aktivierung des Sensors anzeigt
               led1.off()  # LED1 ausschalten
               led2.on()   # LED2 einschalten
           else:  # Wenn der Sensor nicht berührt wird
               led1.on()   # LED1 einschalten
               led2.off()  # LED2 ausschalten

           sleep(0.5)  # Pause von 0,5 Sekunden vor erneuter Überprüfung des Sensorzustands

   except KeyboardInterrupt:
       # Sauberes Beenden des Skripts bei Tastaturunterbrechung (Strg+C)
       pass
	

**Code-Erklärung**

#. Diese Zeile legt fest, dass das Skript mit Python 3 ausgeführt wird. Es importiert die Klassen ``LED`` und ``Button`` aus ``gpiozero`` zur Steuerung von GPIO-Geräten und ``sleep`` aus ``time`` für Verzögerungen.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Import der Klassen LED und Button aus gpiozero
       from time import sleep  # Import der Funktion sleep für Verzögerungen

#. Initialisiert einen Berührungssensor (als Button) am GPIO-Pin 17 mit deaktiviertem Pull-Up-Widerstand und zwei LEDs an den GPIO-Pins 22 und 27.

   .. code-block:: python

       # Initialisierung des Berührungssensors (Button) am GPIO-Pin 17, Pull-Up-Widerstand deaktiviert
       touch_sensor = Button(17, pull_up=False)  # Geeignet für Sensoren, die den Pin bei Berührung auf Low ziehen

       # Initialisierung von LED1 und LED2, verbunden mit den GPIO-Pins 22 und 27
       led1 = LED(22)  # LED1 verbunden mit GPIO-Pin 22
       led2 = LED(27)  # LED2 verbunden mit GPIO-Pin 27

#. In der Hauptschleife wird der Zustand des Berührungssensors überprüft. Bei Berührung schaltet sich LED2 ein und LED1 aus; wenn nicht berührt, ist LED1 eingeschaltet und LED2 ausgeschaltet. Die Schleife wiederholt sich alle 0,5 Sekunden. Fängt eine Tastaturunterbrechung (wie Strg+C) ab, um das Skript anmutig zu beenden.

   .. code-block:: python

       try:
           # Kontinuierliche Überwachung des Zustands des Berührungssensors und entsprechende Steuerung der LEDs
           while True:
               if touch_sensor.is_pressed:  # Überprüfung, ob der Berührungssensor gedrückt wird
                   print('Berührt!')  # Ausgabe einer Nachricht, die die Aktivierung des Sensors anzeigt
                   led1.off()  # LED1 ausschalten
                   led2.on()   # LED2 einschalten
               else:  # Wenn der Sensor nicht berührt wird
                   led1.on()   # LED1 einschalten
                   led2.off()  # LED2 ausschalten

               sleep(0.5)  # Pause von 0,5 Sekunden vor erneuter Überprüfung des Sensorzustands

       except KeyboardInterrupt:
           # Sauberes Beenden des Skripts bei Tastaturunterbrechung (Strg+C)
           pass

