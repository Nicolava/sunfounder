.. _2.1.2_py_pi5:

2.1.2 Mikroschalter
=================================

Einleitung
------------------

In diesem Projekt lernen wir, wie man einen Mikroschalter verwendet. Ein Mikroschalter ist ein kleiner, sehr empfindlicher Schalter, der zum Aktivieren nur minimalen Druck benötigt. Aufgrund ihrer Zuverlässigkeit und Empfindlichkeit werden Mikroschalter oft als Sicherheitsvorrichtung verwendet.

Sie kommen zum Einsatz, um zu verhindern, dass Türen schließen, wenn sich etwas oder jemand im Weg befindet, und für ähnliche Anwendungen.

Benötigte Komponenten
-------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/2.1.2_micro_switch_list.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - IN DIESEM KIT ENTHALTENE TEILE
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch separat über die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`led`
        - |link_led_buy|
    *   - :ref:`micro_switch`
        - \-
    *   - :ref:`capacitor`
        - |link_capacitor_buy|

Schaltplan
-------------------

Verbinden Sie den linken Pin des Mikroschalters mit GPIO17 und zwei LEDs mit den Pins GPIO22 und GPIO27. Wenn Sie den Bewegungsarm des Mikroschalters drücken und loslassen, können Sie sehen, wie die beiden LEDs abwechselnd aufleuchten.

.. image:: ../python_pi5/img/2.1.2_micro_switch_schematic_1.png


.. image:: ../python_pi5/img/2.1.2_micro_switch_schematic_2.png


Experimentelle Verfahren
----------------------------------

**Schritt 1**: Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/2.1.2_micro_switch_circuit.png

**Schritt 2**: Wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3**: Führen Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.2_MicroSwitch_zero.py

Während der Code läuft, drücken Sie den Bewegungsarm, dann leuchtet die gelbe LED auf; lassen Sie den Bewegungsarm los, leuchtet die rote LED.

**Code**

.. note::

    Sie können den unten stehenden Code **modifizieren/zurücksetzen/kopieren/ausführen/stoppen**. Aber zuvor müssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Import der Klassen LED und Button aus gpiozero
   from time import sleep  # Import der Funktion sleep für Verzögerungen

   # Initialisierung des Mikroschalters am GPIO-Pin 17 mit deaktiviertem Pull-Up-Widerstand
   micro_switch = Button(17, pull_up=False)
   # Initialisierung von LED1, verbunden mit GPIO-Pin 22
   led1 = LED(22)
   # Initialisierung von LED2, verbunden mit GPIO-Pin 27
   led2 = LED(27)

   try:
       # Kontinuierliche Überprüfung des Zustands des Mikroschalters und entsprechende Steuerung der LEDs
       while True:
           if micro_switch.is_pressed:  # Wenn der Mikroschalter gedrückt wird
               print('LED1 AN')  # Nachricht auf der Konsole ausgeben
               led1.on()       # LED1 einschalten
               led2.off()      # LED2 ausschalten
           else:  # Wenn der Mikroschalter nicht gedrückt wird
               print('    LED2 AN')  # Nachricht auf der Konsole ausgeben
               led1.off()      # LED1 ausschalten
               led2.on()       # LED2 einschalten

           sleep(0.5)  # Pause von 0,5 Sekunden vor der erneuten Überprüfung des Schalters

   except KeyboardInterrupt:
       # Elegantes Beenden des Skripts bei Tastaturunterbrechung (Strg+C)
       pass
	

**Code-Erklärung**

#. Diese Zeile legt fest, dass das Skript mit Python 3 ausgeführt wird. Sie importiert die Klassen ``LED`` und ``Button`` aus ``gpiozero`` zur Steuerung der GPIO-Geräte und ``sleep`` aus ``time`` für Verzögerungen.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Import der Klassen LED und Button aus gpiozero
       from time import sleep  # Import der Funktion sleep für Verzögerungen

#. Initialisiert einen Mikroschalter, der mit dem GPIO-Pin 17 verbunden ist, mit deaktiviertem Pull-Up-Widerstand und zwei LEDs, die mit den GPIO-Pins 22 und 27 verbunden sind.

   .. code-block:: python

       # Initialisierung des Mikroschalters am GPIO-Pin 17 mit deaktiviertem Pull-Up-Widerstand
       micro_switch = Button(17, pull_up=False)
       # Initialisierung von LED1, verbunden mit GPIO-Pin 22
       led1 = LED(22)
       # Initialisierung von LED2, verbunden mit GPIO-Pin 27
       led2 = LED(27)

#. In der Hauptschleife wird der Zustand des Mikroschalters überprüft. Wenn gedrückt, schaltet sich LED1 ein und LED2 aus. Wenn nicht gedrückt, schaltet sich LED1 aus und LED2 ein. Die Schleife wiederholt sich alle 0,5 Sekunden. Fängt eine Tastaturunterbrechung (wie Strg+C) ab, um das Skript anmutig zu beenden.

   .. code-block:: python

       try:
           # Kontinuierliche Überprüfung des Zustands des Mikroschalters und entsprechende Steuerung der LEDs
           while True:
               if micro_switch.is_pressed:  # Wenn der Mikroschalter gedrückt wird
                   print('LED1 AN')  # Nachricht auf der Konsole ausgeben
                   led1.on()       # LED1 einschalten
                   led2.off()      # LED2 ausschalten
               else:  # Wenn der Mikroschalter nicht gedrückt wird
                   print('    LED2 AN')  # Nachricht auf der Konsole ausgeben
                   led1.off()      # LED1 ausschalten
                   led2.on()       # LED2 einschalten

               sleep(0.5)  # Pause von 0,5 Sekunden vor der erneuten Überprüfung des Schalters

       except KeyboardInterrupt:
           # Elegantes Beenden des Skripts bei Tastaturunterbrechung (Strg+C)
           pass


