 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.3_js:

2.2.3 DHT-11
==============

Introduction
---------------

Le capteur num√©rique de temp√©rature et d'humidit√© DHT11 est un capteur composite
qui contient une sortie de signal num√©rique calibr√©e pour la temp√©rature et
l'humidit√©. La technologie de collecte de modules num√©riques d√©di√©s et
la technologie de d√©tection de la temp√©rature et de l'humidit√© sont appliqu√©es
pour garantir que le produit poss√®de une grande fiabilit√© et une excellente stabilit√©.

Les capteurs incluent un capteur r√©sistif d'√©l√©ment humide et un capteur de
temp√©rature NTC, connect√©s √† un microcontr√¥leur 8 bits haute performance.

Required Components
----------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_2.2.3_dht-11.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_humiture_sensor`
        - |link_humiture_buy|

Schematic Diagram
-----------------

.. image:: ../img/image326.png


Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/image207.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**√âtape 3 :** Installez les d√©pendances.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo npm install node-dht-sensor

**√âtape 4 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node dht11.js

Apr√®s l'ex√©cution du code, le programme affichera la temp√©rature et l'humidit√©
d√©tect√©es par le DHT11 sur l'√©cran de l'ordinateur.

**Code**

.. code-block:: js

    var sensor = require("node-dht-sensor");

    setInterval(function(){ 
      sensor.read(11, 17, function(err, temperature, humidity) {
        if (!err) {
          console.log(`temp: ${temperature}\`C, humidity: ${humidity}%`);
        }
      });
    },1000);

**Explication du Code**

.. code-block:: js

    var sensor = require("node-dht-sensor");

Importez le module ``node-dht-sensor``, qui fournit des fonctions pour lire les valeurs du DHT-11.

.. note::
  Pour plus de d√©tails, veuillez consulter : https://www.npmjs.com/package/node-dht-sensor

.. code-block:: js

    sensor.read(11, 17, function(err, temperature, humidity){...})

Le module ``node-dht-sensor`` fournit la fonction ``read()`` pour lire la temp√©rature et l'humidit√© mesur√©es,
o√π **11** signifie DHT-11, **17** signifie qu'il est connect√© √† GPIO17.

.. code-block:: js

    if (!err) {
      console.log(`temp: ${temperature}\`C, humidity: ${humidity}%`);
    }    

Lorsque la lecture ne pr√©sente pas d'erreur, les valeurs de temp√©rature et d'humidit√© sont affich√©es sur le terminal.

Photo du Ph√©nom√®ne
------------------------

.. image:: ../img/image209.jpeg
