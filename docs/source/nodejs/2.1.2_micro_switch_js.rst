.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e alle anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.2_js:

2.1.2 Microinterruttore
==========================

Introduzione
----------------------

In questo progetto, impareremo come utilizzare il Microinterruttore. Un Microinterruttore √® un piccolo e molto sensibile interruttore che richiede una compressione minima per attivarsi. Grazie alla loro affidabilit√† e sensibilit√†, i microinterruttori vengono spesso utilizzati come dispositivi di sicurezza.

Vengono utilizzati per evitare che le porte si chiudano se qualcosa o qualcuno si trova in mezzo e in altre applicazioni simili.

Componenti necessari
------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/2.1.2component.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_micro_switch`
        - \-
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|

Schema elettrico
----------------

Collega il pin sinistro del Microinterruttore a GPIO17, e due LED ai pin 
GPIO22 e GPIO27 rispettivamente. Quindi, quando premi e rilasci il braccio 
mobile del Microinterruttore, vedrai i due LED accendersi alternativamente.

.. image:: ../img/image305.png


.. image:: ../img/micro_Schematic.png


Procedure sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/2.1.4fritzing.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node micro_switch.js

Mentre il codice √® in esecuzione, premi il Microinterruttore,
e il LED giallo si accender√†;
rilascia il braccio mobile e il LED rosso si accender√†.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const microSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE       
    });

    microSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });


**Spiegazione del codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const microSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE       
    });

Importa il modulo ``pigpio`` e crea tre oggetti: led1, led2 e microSwitch. 
Leggendo il livello della porta IO del microinterruttore, viene controllata 
l'accensione e lo spegnimento dei led1 e led2.

.. code-block:: js

    microSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });

Quando il livello della porta IO del microinterruttore cambia,
lo stesso livello viene scritto su led1 e il livello opposto su led2.

Immagine del fenomeno
--------------------------

.. image:: ../img/2.1.2micro_switch.JPG

