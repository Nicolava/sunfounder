 
.. _2.2.4_js:

2.2.4 Module de Commutateur Reed
===================================

Introduction
----------------

Dans ce projet, nous allons apprendre à utiliser le commutateur reed, qui est un interrupteur électrique actionné par un champ magnétique appliqué.

.. image:: ../img/2.2.4reed_switch.png
    :width: 300
    :align: center

Composants Nécessaires
----------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/2.2.4component.png
    :width: 700
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|

Schéma de Circuit
-----------------

============ ========= ======== ===
Nom T-Board   physique wiringPi BCM
GPIO17        Pin 11   0        17
GPIO27        Pin 13   2        27
GPIO22        Pin 15   3        22
============ ========= ======== ===

.. image:: ../img/reed_schematic.png
    :width: 400
    :align: center

.. image:: ../img/reed_schematic2.png
    :width: 400
    :align: center

Procédures Expérimentales
--------------------------

**Étape 1 :** Construisez le circuit.

.. image:: ../img/2.2.4fritzing.png
    :width: 700
    :align: center

**Étape 2 :** Accédez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Étape 3 :** Exécutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node reed_switch_module.js

La LED verte s'allumera lorsque le code sera exécuté. Si un aimant est placé près du module de commutateur reed, la LED rouge s'allume ; éloignez l'aimant et la LED verte s'allume à nouveau.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const reedSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

    reedSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });

**Explication du Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const reedSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

Importez le module pigpio, créez un objet ReedPin pour contrôler le port IO, définissez-le en mode entrée, tirez vers le bas (niveau bas initial) et définissez une interruption.

.. code-block:: js

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

Créez deux objets led1, led2 pour contrôler les ports IO Gpio22 et Gpio27, et définissez-les en mode sortie.   

.. code-block:: js

    reedSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });

Lorsque l'interruption est déclenchée, écrivez le même niveau sur led1 et le niveau opposé sur led2.

Image du Phénomène
------------------

.. image:: ../img/2.2.4reed_switch.JPG
    :width: 500
    :align: center
