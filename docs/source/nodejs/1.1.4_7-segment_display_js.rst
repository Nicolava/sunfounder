.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci il tuo viaggio con Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni e concorsi festivi**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.1.4_js:

1.1.4 Display a 7 segmenti
================================

Introduzione
-----------------

Proviamo a pilotare un display a 7 segmenti per mostrare le cifre da 0 a 9 e da A a F.

Componenti necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: img/list_7_segment.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Schema elettrico
---------------------

Collega il pin ST_CP del 74HC595 al GPIO18 del Raspberry Pi, SH_CP al GPIO27, 
DS al GPIO17 e le porte di uscita parallele ai 8 segmenti del display a 7 segmenti. 
Immetti i dati nel pin DS per registrarli quando SH_CP (l'ingresso del clock del 
registro a scorrimento) √® al fronte di salita e al registro di memoria quando ST_CP 
(l'ingresso del clock della memoria) √® al fronte di salita. Successivamente, puoi 
controllare gli stati di SH_CP e ST_CP tramite i GPIO del Raspberry Pi per trasformare 
l'input dati seriale in output dati parallelo, risparmiando GPIO del Raspberry Pi e 
pilotando il display.

.. image:: img/schematic_7_segment.png

Procedure sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: img/image73.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

    <run></run>

.. code-block::

    sudo node 7-segment_display.js

Dopo l'esecuzione del codice, vedrai il display a 7 segmenti mostrare da 0 a 9 e da A a F.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const segCode = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71];

    const SDI = new Gpio(17, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(18, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(27, { mode: Gpio.OUTPUT });

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

    let index = -1;
    setInterval(() => {
        index = (index+1)%16;
        hc595_shift(segCode[index]);
    }, 1000);


**Spiegazione del codice**

.. code-block:: js

    const segCode = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71];

Definisci un array di codici esadecimali (catodo comune) da 0 a F.

.. code-block:: js

    const SDI = new Gpio(17, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(18, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(27, { mode: Gpio.OUTPUT });

Inizializza i pin 17, 18 e 27 in modalit√† output e assegnali rispettivamente a ``SDI``, ``RCLK`` e ``SRCLK``.

.. code-block:: js

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

Implementa una funzione ``hc595_shift`` per convertire i campi nell'array ``segCode`` 
in numeri e visualizzarli sul display a 7 segmenti.

.. code-block:: js

    let code = 0x80 & (dat << j);
    if (code != 0) {
        code = 1;
    }
    SDI.digitalWrite(code); 

Assegna i dati dat a SDI(DS) bit per bit. Qui assumiamo che dat=0x3f(0011 1111, quando 
j=2, 0x3f si sposter√† a sinistra (<<) di 2 bit. 1111 1100 (0x3f << 2) & 1000 0000 (0x80) 
= 1000 0000, √® vero. A questo punto, viene scritto 1 su SDI.

.. code-block:: js

    SRCLK.trigger(1,1);

Genera un impulso di salita e sposta i dati DS nel registro a scorrimento.


``trigger(pulseLen, level)``
    * pulseLen - lunghezza dell'impulso in microsecondi (1 - 100)
    * level - 0 o 1

Invia un impulso di trigger al GPIO. 
Il GPIO viene impostato a livello per pulseLen microsecondi e poi ripristinato a non livello.

.. code-block:: js

    RCLK.trigger(1,1);

Genera un impulso di salita e sposta i dati dal registro a scorrimento al registro di memoria.


.. code-block:: js

    let index = -1;
    setInterval(() => {
        index = (index+1)%16;
        hc595_shift(segCode[index]);
    }, 1000);

Infine, usa la funzione ``hc595_shift()`` per convertire i campi in ``segCode`` e 
visualizzarli tramite il display a 7 segmenti.

Immagine del fenomeno
---------------------------

.. image:: img/image74.jpeg

