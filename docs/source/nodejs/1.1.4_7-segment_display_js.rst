 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.4_js:

1.1.4 Afficheur √† 7 segments
=================================

Introduction
----------------

Essayons de piloter un afficheur √† 7 segments pour afficher des chiffres de 0 √† 9 et des lettres de A √† F.

Composants requis
---------------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: img/list_7_segment.png

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Sch√©ma de c√¢blage
---------------------

Connectez la broche ST_CP du 74HC595 au GPIO18 du Raspberry Pi, SH_CP au GPIO27, DS au GPIO17, 
et les ports de sortie parall√®le aux 8 segments de l'afficheur √† 7 segments. Entrez les donn√©es 
dans la broche DS pour le registre √† d√©calage lorsque SH_CP (l'entr√©e d'horloge du registre √† 
d√©calage) est sur le front montant, et pour le registre m√©moire lorsque ST_CP (l'entr√©e d'horloge 
de la m√©moire) est sur le front montant. Ensuite, vous pouvez contr√¥ler les √©tats de SH_CP et 
ST_CP via les GPIOs du Raspberry Pi pour transformer l'entr√©e de donn√©es s√©rie en sortie de 
donn√©es parall√®le afin d'√©conomiser les GPIOs du Raspberry Pi et piloter l'afficheur.

.. image:: img/schematic_7_segment.png

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image73.png

**√âtape 2 :** Acc√©dez au dossier contenant le code.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

    <run></run>

.. code-block::

    sudo node 7-segment_display.js

Apr√®s l'ex√©cution du code, vous verrez l'afficheur 7 segments afficher de 0 √† 9 et de A √† F.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const segCode = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71];

    const SDI = new Gpio(17, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(18, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(27, { mode: Gpio.OUTPUT });

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

    let index = -1;
    setInterval(() => {
        index = (index+1)%16;
        hc595_shift(segCode[index]);
    }, 1000);

**Explication du Code**

.. code-block:: js

    const segCode = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71];

D√©finir un tableau de codes hexad√©cimaux (cathode commune) pour les segments de 0 √† F.   

.. code-block:: js

    const SDI = new Gpio(17, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(18, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(27, { mode: Gpio.OUTPUT });

Initialiser les broches 17, 18 et 27 en mode sortie, et les assigner respectivement √† ``SDI``, ``RCLK`` et ``SRCLK``.

.. code-block:: js

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

Impl√©menter une fonction ``hc595_shift`` pour convertir les champs du tableau ``segCode`` en nombres et les afficher sur le tube num√©rique.

.. code-block:: js

    let code = 0x80 & (dat << j);
    if (code != 0) {
        code = 1;
    }
    SDI.digitalWrite(code); 

Assigner les donn√©es de dat √† SDI(DS) par bits. 
Supposons que dat=0x3f (0011 1111, quand j=2, 0x3f sera d√©cal√© vers la droite (<<) de 2 bits.
1111 1100 (0x3f << 2) & 1000 0000 (0x80) = 1000 0000, ce qui est vrai.
√Ä ce moment, 1 est √©crit dans SDI.

.. code-block:: js

    SRCLK.trigger(1,1);

G√©n√©rer une impulsion montante et d√©placer les donn√©es DS vers le registre de d√©calage.


``trigger(pulseLen, level)``
    * pulseLen - longueur de l'impulsion en microsecondes (1 - 100)
    * level - 0 ou 1

Envoyer une impulsion de d√©clenchement au GPIO. 
Le GPIO est r√©gl√© sur level pendant pulseLen microsecondes, puis r√©initialis√© √† non level.

.. code-block:: js

    RCLK.trigger(1,1);

G√©n√©rer une impulsion montante et d√©placer les donn√©es du registre de d√©calage vers le registre de stockage.


.. code-block:: js

    let index = -1;
    setInterval(() => {
        index = (index+1)%16;
        hc595_shift(segCode[index]);
    }, 1000);

Enfin, utiliser la fonction ``hc595_shift()`` pour convertir les champs dans ``segCode`` et les afficher via le tube num√©rique.   

Image du Ph√©nom√®ne
---------------------------

.. image:: img/image74.jpeg





