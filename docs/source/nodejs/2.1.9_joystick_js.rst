.. note::

    ¡Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sumérgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte Experto**: Resuelve problemas post-venta y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previews Exclusivos**: Obtén acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    👉 ¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y únete hoy mismo!

.. _2.1.9_js:

2.1.9 Joystick
=================

Introducción
------------------

En este proyecto, vamos a aprender cómo funciona un joystick. Manipulamos el joystick 
y mostramos los resultados en la pantalla.

Componentes Necesarios
--------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/image317.png

Es definitivamente conveniente comprar un kit completo, aquí está el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ARTÍCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

También puedes comprarlos por separado en los siguientes enlaces.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCIÓN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_joystick`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-

Diagrama Esquemático
---------------------------

Cuando se lee la información del joystick, hay algunas diferencias entre los ejes: 
los datos de los ejes X e Y son analógicos, por lo que es necesario usar el ADC0834 
para convertir el valor analógico a digital. Los datos del eje Z son digitales, por 
lo que puedes usar directamente el GPIO para leerlos, o también puedes usar el ADC para leerlos.

.. image:: ../img/image319.png


.. image:: ../img/image320.png


Procedimientos Experimentales
-----------------------------

**Paso 1:** Construir el circuito.

.. image:: ../img/image193.png

**Paso 2:** Ir a la carpeta del código.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Paso 3:** Ejecutar el código.

.. raw:: html

   <run></run>

.. code-block::

    sudo node joystick.js

Después de ejecutar el código, mueve el joystick y los valores correspondientes 
de x, y y Btn se mostrarán en la pantalla.

**Código**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 22);
    const btn = new Gpio(25, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_UP,
    });

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);


**Explicación del Código**

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

Importamos un constructor ``ADC0834`` para usar el módulo adc0834.

.. code-block:: js

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);

Cuando se leen los valores de múltiples canales de ADC0834 al mismo tiempo, 
es necesaria la programación asíncrona. Aquí construimos una función de promesa, 
y usamos la instrucción await de la función async para escribir de manera elegante 
esta compleja tarea asíncrona.

* `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_
* `Async Function <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_

Imagen del Fenómeno
------------------------

.. image:: ../img/image194.jpeg



