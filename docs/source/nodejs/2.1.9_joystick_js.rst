.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e alle anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.9_js:

2.1.9 Joystick
================

Introduzione
----------------

In questo progetto, impareremo come funziona il joystick. Manipoleremo 
il joystick e visualizzeremo i risultati sullo schermo.

Componenti necessari
-----------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/image317.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_joystick`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-

Schema elettrico
---------------------

Quando si leggono i dati del joystick, ci sono alcune differenze tra gli assi: i 
dati degli assi X e Y sono analogici, il che richiede l'uso dell'ADC0834 per 
convertire il valore analogico in valore digitale. I dati dell'asse Z sono digitali, 
quindi √® possibile leggerli direttamente utilizzando il GPIO, oppure √® possibile 
utilizzare l'ADC per leggerli.

.. image:: ../img/image319.png


.. image:: ../img/image320.png


Procedure sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image193.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node joystick.js

Dopo l'esecuzione del codice, muovi il joystick e i valori corrispondenti 
di x, y, Btn verranno visualizzati sullo schermo.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 22);
    const btn = new Gpio(25, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_UP,
    });

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);

Spiegazione del Codice
------------------------------

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

Importiamo un costruttore ``ADC0834`` per utilizzare il modulo adc0834.

.. code-block:: js

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);

Quando si leggono i valori di pi√π canali dell'ADC0834 contemporaneamente, √® necessaria la programmazione asincrona.
Costruiamo qui una funzione promise,
E utilizziamo l'istruzione await della funzione async per scrivere in modo elegante questo compito asincrono complesso.

* `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_
* `Async Function <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_

Immagine del fenomeno
-----------------------

.. image:: ../img/image194.jpeg

