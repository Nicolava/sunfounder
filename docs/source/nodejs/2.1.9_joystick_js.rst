.. _2.1.9_js:

2.1.9 ジョイスティック
=======================

はじめに
------------

このプロジェクトでは、ジョイスティックの動作方法を学びます。ジョイスティックを操作して、結果を画面に表示します。

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/image317.png

一式を購入することは非常に便利です。以下がリンクです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`ジョイスティックモジュール`
        - \-
    *   - :ref:`ADC0834`
        - \-

回路図
-----------------

ジョイスティックのデータを読む際、軸によっては違いがあります：X軸とY軸のデータはアナログで、アナログ値をデジタル値に変換するためにADC0834を使用する必要があります。Z軸のデータはデジタルなので、GPIOを直接使用して読み取ることができますが、ADCを使用して読み取ることもできます。

.. image:: ../img/image319.png


.. image:: ../img/image320.png


実験手順
-----------------------

**ステップ1:** 回路を組み立てる。

.. image:: ../img/image193.png

**ステップ2:** コードのフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo node joystick.js

コードが実行された後、ジョイスティックを回すと、対応するx、y、Btnの値が画面に表示されます。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 22);
    const btn = new Gpio(25, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_UP,
    });

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);



**コード説明**

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

``ADC0834`` コンストラクタをインポートして、adc0834モジュールを使用します。

.. code-block:: js

    setInterval(async() => {

        x_val = await adc.read(0);
        y_val = await adc.read(1);

        btn_val = btn.digitalRead();
        console.log(`x = ${x_val}, y = ${y_val}, btn = ${btn_val}\n`);
    }, 100);

ADC0834の複数のチャネルの値を同時に読み取る際、非同期プログラミングが必要です。
ここではプロミス関数を構築しています。
そして、非同期関数のawait命令を使用して、この複雑な非同期タスクをエレガントに書きます。

* `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_
* `非同期関数 <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_

現象の画像
------------------

.. image:: ../img/image194.jpeg


