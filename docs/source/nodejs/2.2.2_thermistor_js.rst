.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino e ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e affronta le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato alle novit√† sui prodotti e anteprime speciali.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.2_js:

2.2.2 Termistore
=========================

Introduzione
-----------------

Proprio come il fotorisistore pu√≤ rilevare la luce, il termistore √® un dispositivo 
elettronico sensibile alla temperatura che pu√≤ essere utilizzato per realizzare 
funzioni di controllo della temperatura, come ad esempio la creazione di un allarme di calore.

Componenti necessari
--------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_2.2.2_thermistor.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Schema elettrico
------------------------

.. image:: ../img/image323.png


.. image:: ../img/image324.png


Procedure sperimentali
-----------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image202.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo node thermistor.js

Con l'esecuzione del codice, il termistore rileva la temperatura ambientale che 
verr√† stampata sullo schermo una volta completata la calcolazione del programma.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    exports.ADC0834 = ADC0834;

    const adc = new ADC0834(17, 18, 27);

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

**Spiegazione del Codice**

.. code-block:: js

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

Possiamo leggere il ``value`` del termistore attraverso l'istruzione ``adc.read(0).then((value) => {...})``


.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);
    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
    var cel = (temp - 273.15).toFixed(2);
    var Fah = (cel * 1.8 + 32).toFixed(2);
    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

Queste operazioni convertono il valore del termistore in una temperatura in gradi Celsius.

.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);

Queste due righe di codice servono a calcolare la distribuzione della tensione dai valori letti, ottenendo Rt (resistenza del termistore).

.. code-block:: js

    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));  

Questo codice si riferisce alla sostituzione di Rt nella formula **TK=1/(ln(RT/RN)/B+1/TN)** per ottenere la temperatura in gradi Kelvin.

.. code-block:: js

    var cel = (temp - 273.15).toFixed(2);

Questa parte serve a convertire la temperatura in gradi Kelvin in gradi Celsius con due cifre decimali.

.. code-block:: js

    var Fah = (cel * 1.8 + 32).toFixed(2);

Questa parte converte i gradi Celsius in gradi Fahrenheit con due cifre decimali.

.. code-block:: js

    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

Stampa i gradi Celsius, Fahrenheit e le loro unit√† sul terminale.

Immagine del fenomeno
--------------------------

.. image:: ../img/image203.jpeg

