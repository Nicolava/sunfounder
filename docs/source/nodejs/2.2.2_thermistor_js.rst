.. _2.2.2_js:

2.2.2 Thermistor
================

Einführung
----------

Genauso wie ein Fotowiderstand Licht erfassen kann, ist ein Thermistor ein temperaturempfindliches elektronisches Bauelement, das für die Realisierung von Temperaturregelungsfunktionen eingesetzt werden kann, beispielsweise um einen Hitzewarnmelder zu bauen.

Benötigte Komponenten
---------------------

Für dieses Projekt benötigen wir die folgenden Bauteile.

.. image:: ../img/list_2.2.2_thermistor.png

Es ist definitiv praktisch, ein gesamtes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können diese auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Schaltplan
-------------

.. image:: ../img/image323.png

.. image:: ../img/image324.png

Experimentelle Verfahren
----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../img/image202.png

**Schritt 2:** Navigieren Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Schritt 3:** Führen Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo node thermistor.js

Wenn der Code ausgeführt wird, erfasst der Thermistor die Umgebungstemperatur, die auf dem Bildschirm angezeigt wird, sobald die Programmberechnung abgeschlossen ist.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    exports.ADC0834 = ADC0834;

    const adc = new ADC0834(17, 18, 27);

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

**Code-Erklärung**

.. code-block:: js

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

Wir können den ``Wert`` des Thermistors mit der Anweisung ``adc.read(0).then((value) => {...})`` auslesen.

.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);
    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
    var cel = (temp - 273.15).toFixed(2);
    var Fah = (cel * 1.8 + 32).toFixed(2);
    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

Diese Operationen konvertieren den Thermistorwert in einen Celsius-Temperaturwert.

.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);

Diese beiden Codezeilen dienen dazu, die Spannungsverteilung aus den gelesenen Werten zu berechnen, was in Rt (Widerstand des Thermistors) resultiert.

.. code-block:: js

    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));

Dieser Code bezieht sich darauf, Rt in die Formel **TK=1/(ln(RT/RN)/B+1/TN)** einzusetzen, um die Temperatur in Kelvin zu erhalten.

.. code-block:: js

    var cel = (temp - 273.15).toFixed(2);

Dieser Abschnitt konvertiert die Kelvin-Temperatur in Celsius mit zwei Dezimalstellen.

.. code-block:: js

    var Fah = (cel * 1.8 + 32).toFixed(2);

Dieser Abschnitt konvertiert Celsius in Fahrenheit mit zwei Dezimalstellen.

.. code-block:: js

    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

Gibt Celsius, Fahrenheit und ihre Einheiten im Terminal aus.

Phänomen-Bild
----------------

.. image:: ../img/image203.jpeg
    