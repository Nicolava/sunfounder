.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.2.2_js:

2.2.2 サーミスタ
====================

はじめに
------------

フォトレジスタが光を感知できるように、サーミスタは温度に反応する電子デバイスで、ヒートアラームのような温度制御の機能を実現するために使用されます。

必要な部品
------------------------------

このプロジェクトでは、以下の部品が必要です。

.. image:: ../img/list_2.2.2_thermistor.png

キット全体を購入するのは確かに便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_transistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

回路図
-----------------

.. image:: ../img/image323.png

.. image:: ../img/image324.png

実験手順
-----------------------

**ステップ1:** 回路を組み立てます。

.. image:: ../img/image202.png

**ステップ2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo node thermistor.js

コードが実行されると、サーミスタは周囲の温度を検出し、プログラムの計算が終わると画面に表示されます。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    exports.ADC0834 = ADC0834;

    const adc = new ADC0834(17, 18, 27);

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

**コード説明**

.. code-block:: js

    setInterval(() => {
      adc.read(0).then((value) => {
        var Vr = 5 * value / 255;
        var Rt = 10000 * Vr / (5 - Vr);
        var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
        var cel = (temp - 273.15).toFixed(2);
        var Fah = (cel * 1.8 + 32).toFixed(2);
        console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);
      }, (error)=>{
        console.log("Error: " + error);
      });
    }, 1000);

サーミスタの ``value`` は、 ``adc.read(0).then((value) => {...})`` 文を通じて読み取ることができます。

.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);
    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));
    var cel = (temp - 273.15).toFixed(2);
    var Fah = (cel * 1.8 + 32).toFixed(2);
    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

これらの操作は、サーミスタの値を摂氏温度値に変換します。

.. code-block:: js

    var Vr = 5 * value / 255;
    var Rt = 10000 * Vr / (5 - Vr);

これらの2行のコードは、読み取った値からの電圧分布を計算するために使用され、サーミスタの抵抗(Rt)が得られます。

.. code-block:: js

    var temp = 1 / ((Math.log(Rt/10000) / 3950)+(1 / (273.15 + 25)));  

このコードは、ケルビンでの温度を得るためにRtを公式 **TK=1/(ln(RT/RN)/B+1/TN)** に代入することを指します。

.. code-block:: js

    var cel = (temp - 273.15).toFixed(2);

この段落は、ケルビン温度を小数点以下2桁の摂氏に変換します。

.. code-block:: js

    var Fah = (cel * 1.8 + 32).toFixed(2);

この段落は、摂氏を小数点以下2桁の華氏に変換します。

.. code-block:: js

    console.log(`Celsius: ${cel} C  Fahrenheit: ${Fah} F\n`);

端末上に摂氏、華氏およびその単位を表示します。

現象の画像
------------------

.. image:: ../img/image203.jpeg
    