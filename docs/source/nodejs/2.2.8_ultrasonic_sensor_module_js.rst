.. _2.2.8_js:

2.2.8 超音波センサモジュール
==============================

はじめに
--------------

超音波センサは、物体を正確に検出し、距離を測定するための超音波を使用します。超音波波を送出し、それらを電子信号に変換します。

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/list_2.2.5.png

全体のキットを購入するのは確かに便利です。リンクは以下の通りです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクからも別々に購入することができます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
        - |link_ultrasonic_buy|

回路図
-----------------

.. image:: ../img/image329.png

実験手順
-----------------------

**ステップ1:** 回路を組み立てる。

.. image:: ../img/image220.png

**ステップ2:** コードのフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo node ultrasonic_sensor.js

コードが実行された後、超音波センサモジュールは、前方の障害物とモジュール自体との距離を検出し、距離値が画面に表示されます。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    // The number of microseconds it takes sound to travel 1cm at 20 degrees celcius
    const MICROSECDONDS_PER_CM = 1e6/34321;

    const trigger = new Gpio(23, {mode: Gpio.OUTPUT});
    const echo = new Gpio(24, {mode: Gpio.INPUT, alert: true});

    trigger.digitalWrite(0); // Make sure trigger is low

    const watchHCSR04 = () => {
      let startTick;

      echo.on('alert', (level, tick) => {
        if (level === 1) {
          startTick = tick;
        } else {
          const endTick = tick;
          const diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic
          console.log(diff / 2 / MICROSECDONDS_PER_CM);
        }
      });
    };

    watchHCSR04();

    // Trigger a distance measurement once per second
    setInterval(() => {
      trigger.trigger(10, 1); // Set trigger high for 10 microseconds
    }, 1000);




**コード説明**

``trigger`` 関数は、GPIO上でパルスを生成するために使用でき、 ``alerts`` は、GPIOの状態変更の時間を数マイクロ秒の精度で決定するために使用できます。

これらの2つの特性は、HC-SR04超音波センサを使用して距離を測定するために組み合わせることができます。

.. code-block:: js

    setInterval(() => {
      trigger.trigger(10, 1); // Set trigger high for 10 microseconds
    }, 1000);

これは、10usの超音波パルスを定期的に送信するためのものです。

.. code-block:: js

  const watchHCSR04 = () => {

    echo.on('alert', (level, tick) => {
        if (level === 1) {
          startTick = tick;
        } else {
          const endTick = tick;
          const diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic
          console.log(diff / 2 / MICROSECDONDS_PER_CM);
        }    
    });
  };

この関数は、パルスを送信する時間（レベルが1）とエコーを受信する時間（レベルが0）の間にアラートを設定します。
時間差に音速を掛ける（そして2で割る）ことで、前方の障害物までの距離を得ることができます。

.. https://github.com/fivdi/pigpio

現象の画像
------------------

.. image:: ../img/image221.jpeg
    