.. _2.2.8_js:

2.2.8 Ultraschall-Sensormodul
=================================

Einführung
----------

Das Ultraschall-Sensormodul verwendet Ultraschall, um Objekte präzise zu erkennen und 
Entfernungen zu messen. Es sendet Ultraschallwellen aus und wandelt sie in 
elektronische Signale um.

Benötigte Komponenten
---------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../img/list_2.2.5.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch über die untenstehenden Links einzeln kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`ultrasonic_sensor`
        - |link_ultrasonic_buy|

Schaltplan
----------

.. image:: ../img/image329.png

Experimentelle Verfahren
-----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../img/image220.png

**Schritt 2:** Navigieren Sie zum Ordner mit dem Code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Schritt 3:** Führen Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo node ultrasonic_sensor.js

Nachdem der Code ausgeführt wurde, erkennt das Ultraschall-Sensormodul die Entfernung 
zwischen dem vorausliegenden Hindernis und dem Modul selbst, und der Entfernungswert wird 
auf dem Bildschirm angezeigt.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    // The number of microseconds it takes sound to travel 1cm at 20 degrees celcius
    const MICROSECDONDS_PER_CM = 1e6/34321;

    const trigger = new Gpio(23, {mode: Gpio.OUTPUT});
    const echo = new Gpio(24, {mode: Gpio.INPUT, alert: true});

    trigger.digitalWrite(0); // Make sure trigger is low

    const watchHCSR04 = () => {
      let startTick;

      echo.on('alert', (level, tick) => {
        if (level === 1) {
          startTick = tick;
        } else {
          const endTick = tick;
          const diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic
          console.log(diff / 2 / MICROSECDONDS_PER_CM);
        }
      });
    };

    watchHCSR04();

    // Trigger a distance measurement once per second
    setInterval(() => {
      trigger.trigger(10, 1); // Set trigger high for 10 microseconds
    }, 1000);

**Code-Erklärung**

Die ``trigger``-Funktion kann verwendet werden, um einen Impuls auf einem GPIO zu erzeugen, 
und ``alerts`` kann verwendet werden, um den Zeitpunkt einer GPIO-Zustandsänderung 
genau auf einige Mikrosekunden zu bestimmen.

Diese beiden Merkmale können kombiniert werden, um mit einem HC-SR04 
Ultraschallsensor die Entfernung zu messen.

.. code-block:: js

    setInterval(() => {
      trigger.trigger(10, 1); // Set trigger high for 10 microseconds
    }, 1000);

Dient dazu, in regelmäßigen Abständen einen 10us-Ultraschallimpuls auszusenden.

.. code-block:: js

  const watchHCSR04 = () => {

    echo.on('alert', (level, tick) => {
        if (level === 1) {
          startTick = tick;
        } else {
          const endTick = tick;
          const diff = (endTick >> 0) - (startTick >> 0); // Unsigned 32 bit arithmetic
          console.log(diff / 2 / MICROSECDONDS_PER_CM);
        }    
    });
  };

Dies legt einen Alarm fest, der die Zeit zwischen dem Senden des Impulses (level ist 1) 
und dem Empfangen des Echos (level ist 0) aufzeichnet. Durch Multiplikation des 
Zeitunterschieds mit der Schallgeschwindigkeit (und Division durch 2) erhalten Sie 
die Entfernung zum vorausliegenden Hindernis.

.. https://github.com/fivdi/pigpio

Phänomen-Bild
--------------------

.. image:: ../img/image221.jpeg

