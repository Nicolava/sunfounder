 
.. _1.3.3_js:

1.3.3 Relais
==============

Introduction
---------------

Dans ce projet, nous allons apprendre à utiliser un relais. C'est l'un des composants couramment 
utilisés dans les systèmes de contrôle automatique. Lorsque la tension, le courant, la température,
 la pression, etc., atteignent, dépassent ou sont inférieurs à la valeur prédéterminée, le relais 
 connectera ou interrompra le circuit, pour contrôler et protéger l'équipement.


Composants nécessaires
--------------------------

Dans ce projet, nous avons besoin des composants suivants :

.. image:: ../img/list_1.3.4.png

Il est vraiment pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ÉLÉMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_relay`
        - |link_relay_buy|
    *   - :ref:`cpn_diode`
        - |link_diode_buy|

Schéma de câblage
---------------------

.. image:: ../img/image345.png

Procédures expérimentales
-----------------------------

**Étape 1 :** Construire le circuit.

.. image:: ../img/image144.png

**Étape 2 :** Accéder au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Étape 3 :** Exécuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node relay.js

Pendant l'exécution du code, la LED s'allume. De plus, vous pouvez entendre un tic-tac causé par
 l'ouverture du contact normalement fermé et la fermeture du contact normalement ouvert.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const relay = new Gpio(17,{mode: Gpio.OUTPUT});

    setInterval(() => {
        relay.digitalWrite(!relay.digitalRead());
    }, 500);

    process.on('SIGINT',function(){
        relay.digitalWrite(0);
        process.exit();
    });

**Explication du code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const relay = new Gpio(17,{mode: Gpio.OUTPUT});

Importer le module ``pigpio`` et instancier un objet relais de Gpio pour contrôler le port IO 
Gpio17, et le définir en mode sortie.

.. code-block:: js

    setInterval(() => {
        relay.digitalWrite(!relay.digitalRead());
    }, 500);

Le relais s'ouvre et se ferme continuellement, et les LED s'allument et s'éteignent également en 
continu à des intervalles de 500 ms.

.. code-block:: js

    process.on('SIGINT',function(){
        relay.digitalWrite(0);
        process.exit();
    });

Lorsque ctrl+c est capturé, le relais est ouvert.

Image du phénomène
------------------

.. image:: ../img/image145.jpeg
