.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e alle anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.3.3_js:

1.3.3 Rel√®
============

Introduzione
---------------

In questo progetto, impareremo a utilizzare un rel√®. √à uno dei componenti pi√π 
comuni nei sistemi di controllo automatico. Quando la tensione, la corrente, 
la temperatura, la pressione, ecc., raggiunge, supera o scende al di sotto di 
un valore prestabilito, il rel√® collega o interrompe il circuito, per controllare 
e proteggere l'apparecchiatura.

Componenti necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_1.3.4.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_relay`
        - |link_relay_buy|
    *   - :ref:`cpn_diode`
        - |link_diode_buy|

Schema elettrico
--------------------

.. image:: ../img/image345.png


Procedure sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image144.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/


**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node relay.js

Durante l'esecuzione del codice, il LED si accende. Inoltre, puoi sentire un 
ticchettio causato dall'apertura del contatto normalmente chiuso e dalla chiusura 
del contatto normalmente aperto.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const relay = new Gpio(17,{mode: Gpio.OUTPUT});

    setInterval(() => {
        relay.digitalWrite(!relay.digitalRead());
    }, 500);

    process.on('SIGINT',function(){
        relay.digitalWrite(0);
        process.exit();
    });


**Spiegazione del codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const relay = new Gpio(17,{mode: Gpio.OUTPUT});

Importa il modulo ``pigpio`` e istanzia un oggetto relay di Gpio per controllare la porta IO Gpio17, impostandola in modalit√† output.


.. code-block:: js

    setInterval(() => {
        relay.digitalWrite(!relay.digitalRead());
    }, 500);

Il rel√® si apre e si chiude continuamente e i LED si accendono e si spengono a intervalli di 500 ms.


.. code-block:: js

    process.on('SIGINT',function(){
        relay.digitalWrite(0);
        process.exit();
    });

Quando viene rilevato ctrl+c, il rel√® si apre.

Immagine del fenomeno
------------------------

.. image:: ../img/image145.jpeg
