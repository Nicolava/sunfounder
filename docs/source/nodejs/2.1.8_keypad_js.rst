 

.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.8_js:

2.1.8 Clavier
===============

Introduction
---------------

Un clavier est une matrice rectangulaire de boutons. Dans ce projet, nous allons l'utiliser pour 
saisir des caract√®res.

Composants n√©cessaires
--------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/list_2.1.5_keypad.png

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_keypad`
        - \-

Sch√©ma de c√¢blage
--------------------

.. image:: ../img/image315.png


.. image:: ../img/image316.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image186.png

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/nodejs/

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo node keypad.js

Apr√®s l'ex√©cution du code, les valeurs des boutons press√©s sur le clavier (valeur du bouton) 
seront affich√©es √† l'√©cran.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    var rowsPins = [18,23,24,25];
    var colsPins = [10,6,27,17];
    var keys = ["1","2","3","A",
            "4","5","6","B",
            "7","8","9","C",
            "*","0","#","D"];      

    for(let i=0;i<rowsPins.length;i++){
        rowsPins[i] = new Gpio(rowsPins[i],{mode: Gpio.OUTPUT})
    }
    for(let i=0;i<colsPins.length;i++){
        colsPins[i] = new Gpio(colsPins[i],{
            mode: Gpio.INPUT,
            pullUpDown: Gpio.PUD_DOWN,
            edge: Gpio.RISING_EDGE
        })
    }

    var last_key_pressed = 0;

    var col=-1;
    for(let i=0;i<colsPins.length;i++){
        colsPins[i].on('interrupt',()=>{
            col=i;
            pressed_keys=keys[row*colsPins.length+col];
            if(last_key_pressed!=pressed_keys){
                console.log(`${pressed_keys}`);
            }
            last_key_pressed = pressed_keys;
        });
    }

    var row=-1;
    setInterval(() => {
        row=(row+1)%rowsPins.length;
        for(let i=0;i<rowsPins.length;i++){
            rowsPins[i].digitalWrite(0);
        }
        rowsPins[row].digitalWrite(1);
    }, 10);


**Explication du Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    var rowsPins = [18,23,24,25];
    var colsPins = [10,6,27,17];
    var keys = ["1","2","3","A",
            "4","5","6","B",
            "7","8","9","C",
            "*","0","#","D"];      

    for(let i=0;i<rowsPins.length;i++){
        rowsPins[i] = new Gpio(rowsPins[i],{mode: Gpio.OUTPUT})
    }
    for(let i=0;i<colsPins.length;i++){
        colsPins[i] = new Gpio(colsPins[i],{
            mode: Gpio.INPUT,
            pullUpDown: Gpio.PUD_DOWN,
            edge: Gpio.RISING_EDGE
        })
    }



Dans le style du clavier, d√©clarez deux ensembles de broches et une matrice.

Quatre des broches sont les lignes du clavier, d√©finissez ces broches en mode OUTPUT ;
Les quatre autres broches sont les colonnes du clavier, d√©finissez ces broches en mode INPUT et configurez l'interruption sur front montant pour elles.

Le principe selon lequel le contr√¥leur principal peut obtenir la valeur de la touche est le suivant :
Les quatre broches de ligne fournissent √† tour de r√¥le un niveau haut, si un bouton est press√©,
La broche de colonne correspondante obtiendra le niveau haut √©mis par la broche de ligne, ce qui d√©clenchera l'interruption sur front montant.

Par exemple, si j'appuie sur le bouton **3**, lorsque les 2e, 3e et 4e broches de ligne √©mettent le niveau haut, il n'y a pas d'effet ;
Lorsque la broche de ligne en premi√®re position √©met le niveau haut, la troisi√®me broche de colonne sera en mesure d'obtenir le niveau haut et de d√©clencher l'interruption sur front montant. √Ä ce moment, les 1√®re, 2e et 4e broches de colonne ne d√©clenchent aucun √©v√©nement.

Ensuite, selon la 1√®re broche de ligne qui √©met le niveau haut et la 3e broche de colonne qui obtient le niveau haut, le contr√¥leur principal pourra savoir que la position du bouton press√© est (1,3), c'est-√†-dire le bouton **3**.

.. image:: ../img/image187.png


.. code-block:: js

    var row=-1;
    setInterval(() => {
        row=(row+1)%rowsPins.length;
        for(let i=0;i<rowsPins.length;i++){
            rowsPins[i].digitalWrite(0);
        }
        rowsPins[row].digitalWrite(1);
    }, 10);

Les quatre broches de ligne sont p√©riodiquement aliment√©es en haut niveau, et la variable ``row`` est utilis√©e pour localiser la broche de ligne actuellement active.

.. code-block:: js

    var col=-1;
    for(let i=0;i<colsPins.length;i++){
        colsPins[i].on('interrupt',()=>{
            col=i;
            // pressed_keys=keys[row*colsPins.length+col];
            // if(last_key_pressed!=pressed_keys){
            //     console.log(`${pressed_keys}`);
            // }
            // last_key_pressed = pressed_keys;
        });
    }

Configurez des fonctions d'interruption pour les quatre broches de colonne,
et la variable ``col`` est utilis√©e pour localiser les broches de colonne qui d√©clenchent l'√©v√©nement d'interruption sur front montant.


.. code-block:: js

    pressed_keys=keys[row*colsPins.length+col];
    if(last_key_pressed!=pressed_keys){
        console.log(`${pressed_keys}`);
    }
    last_key_pressed = pressed_keys;

Il y a aussi un morceau de code dans la fonction d'interruption pour obtenir la valeur de la touche sp√©cifique √† partir de la matrice ``keys`` selon ``row`` et ``col``.
Et chaque fois que vous obtenez une nouvelle valeur de touche, imprimez la valeur.

Image du ph√©nom√®ne
------------------

.. image:: ../img/image188.jpeg


