.. _2.1.1_js:

2.1.1 ボタン
===============

はじめに
-----------------

このプロジェクトでは、ボタンを使ってLEDをオンまたはオフにする方法を学びます。

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/list_2.1.1_Button.png

全てのキットをまとめて購入するのは非常に便利です。以下はリンクです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前	
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`ボタン`
        - |link_button_buy|

回路図
-----------------

通常開きのボタンをRaspberry Piの入力として使用します。接続は以下の回路図で示されています。ボタンが押されると、GPIO18は低レベル（0V）になります。プログラミングを通じてGPIO18の状態を検出できます。つまり、GPIO18が低レベルになった場合、ボタンが押されたことを意味します。ボタンが押されたときに対応するコードを実行すると、LEDが点灯します。

.. note::
    LEDの長いピンはアノードで、短いピンはカソードです。

.. image:: ../img/image302.png

.. image:: ../img/image303.png

実験手順
---------------------------

**ステップ1**: 回路を組む。

.. image:: ../img/image152.png

**ステップ2**: コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/nodejs/

**ステップ3**: コードを実行します。

.. raw:: html

   <run></run>

.. code-block:: 

    sudo node button.js

コードが実行されると、ボタンを押すとLEDが点灯し、
ボタンを離すとLEDが消えます。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    
    const led = new Gpio(17, {mode: Gpio.OUTPUT});
   
    const button = new Gpio(18, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.EITHER_EDGE        
    });

    
    button.on('interrupt', (level) => {  
      led.digitalWrite(level);          
    });

**コード説明**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;    

    const led = new Gpio(17, {mode: Gpio.OUTPUT});

``pigpio`` モジュールをインポートし、ledオブジェクトを作成してIOポートGpio17を制御し、出力モードに設定します。

.. code-block:: js

    const button = new Gpio(18, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.EITHER_EDGE       
    });

ボタンオブジェクトを作成してIOポートGpio18を制御し、入力モードに設定します。
プルダウン（ボタンが押されていないときは低く、ボタンが押されているときは高く）。
そして、割り込み関数を設定します。モードはEITHER_EDGEです。つまり、立ち上がりエッジと立ち下がりエッジの両方が割り込み関数をトリガーします。

.. code-block:: js

    button.on('interrupt', (level) => {  
      led.digitalWrite(level);          
    });

割り込み関数を記述します。ボタンが押されると、それは立ち下がりエッジであり、割り込み関数をトリガーします。
この時、ボタンのIOポートの低レベルをledのIOポートに書き込み、ledが点灯します。

ボタンが放されると、それは立ち上がりエッジであり、割り込み関数をトリガーします。
この時、ボタンのIOポートの高レベルをledのIOポートに書き込み、ledはオフになります。     

現象の画像
---------------

.. image:: ../img/image153.jpeg


