.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e alle anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.1_js:

2.1.1 Pulsante
=================

Introduzione
-----------------

In questo progetto, impareremo a accendere o spegnere il LED utilizzando un pulsante.

Componenti necessari
--------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_2.1.1_Button.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

Schema elettrico
--------------------

Utilizzare un pulsante normalmente aperto come ingresso del Raspberry Pi, la 
connessione √® mostrata nello schema elettrico qui sotto. Quando il pulsante 
viene premuto, il GPIO18 passer√† a livello basso (0V). Possiamo rilevare lo 
stato del GPIO18 attraverso la programmazione. Cio√®, se il GPIO18 passa a 
livello basso, significa che il pulsante √® stato premuto. Puoi eseguire il 
codice corrispondente quando il pulsante viene premuto e il LED si accender√†.

.. note::
    Il pin pi√π lungo del LED √® l'anodo e quello pi√π corto √® il catodo.

.. image:: ../img/image302.png


.. image:: ../img/image303.png


Procedure sperimentali
---------------------------

**Passo 1**: Costruisci il circuito.

.. image:: ../img/image152.png

**Passo 2**: Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 3**: Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node button.js

Adesso, premi il pulsante e il LED si accender√†; 
rilascia il pulsante e il LED si spegner√†.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 


    const led = new Gpio(17, {mode: Gpio.OUTPUT});
   
    const button = new Gpio(18, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.EITHER_EDGE        
    });


    button.on('interrupt', (level) => {  
      led.digitalWrite(level);          
    });

**Spiegazione del codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;    

    const led = new Gpio(17, {mode: Gpio.OUTPUT});

Importa il modulo ``pigpio``, crea un oggetto led per controllare la porta IO Gpio17 e impostalo in modalit√† output.

.. code-block:: js

    const button = new Gpio(18, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.EITHER_EDGE       
    });

Crea un oggetto pulsante per controllare la porta IO Gpio18, 
impostandolo in modalit√† input, Pull down (basso quando il 
pulsante non √® premuto, alto quando il pulsante √® premuto). 
Imposta inoltre la funzione di interrupt, in modalit√† EITHER_EDGE, 
cio√® sia i fronti di salita che quelli di discesa attiveranno la 
funzione di interrupt.

.. code-block:: js

    button.on('interrupt', (level) => {  
      led.digitalWrite(level);          
    });

Scrivi una funzione di interrupt, quando il pulsante viene premuto, 
si verifica un fronte di discesa che attiva la funzione di interrupt, 
in questo momento scrive il livello basso della porta IO del pulsante 
nella porta IO del LED e il LED si accende.

Quando il pulsante viene rilasciato, si verifica un fronte di salita 
che attiva la funzione di interrupt, in questo momento scrive il livello 
alto della porta IO del pulsante nella porta IO del LED e il LED si spegne.

Immagine del fenomeno
------------------------

.. image:: ../img/image153.jpeg

