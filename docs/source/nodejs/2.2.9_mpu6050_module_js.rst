 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.9_js:

2.2.9 Module MPU6050
=======================

Introduction
----------------

Le MPU-6050 est le premier et unique dispositif de suivi de mouvement √† 6 axes au monde 
(gyroscope √† 3 axes et acc√©l√©rom√®tre √† 3 axes) con√ßu pour les smartphones, les tablettes 
et les capteurs portables. Il poss√®de des caract√©ristiques telles que la faible consommation 
d'√©nergie, le faible co√ªt et les performances √©lev√©es.

Dans cette exp√©rience, nous utiliserons l'I2C pour obtenir les valeurs du capteur d'acc√©l√©ration 
√† trois axes et du gyroscope √† trois axes du MPU6050 et les afficher √† l'√©cran.


Composants n√©cessaires
--------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_2.2.6.png

Il est vraiment pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_mpu6050`
        - |link_mpu6050_buy|

Sch√©ma de connexion
-----------------

Le MPU6050 communique avec le microcontr√¥leur via l'interface de bus I2C. Les broches SDA1 et 
SCL1 doivent √™tre connect√©es aux broches correspondantes.

.. image:: ../img/image330.png


Proc√©dures exp√©rimentales
--------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image227.png

**√âtape 2 :** Configurer l'I2C (voir l'Annexe :ref:`i2c_config`. Si vous avez d√©j√† configur√© l'I2C, passez cette √©tape.)

**√âtape 3 :** Aller dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**√âtape 4 :** Installer les d√©pendances.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo npm install mpu6050-gyro

**√âtape 5 :** Ex√©cuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node mpu6050_module.js

Lorsque le code est ex√©cut√©, l'angle de d√©flexion des axes x et y, ainsi que l'acc√©l√©ration et la 
vitesse angulaire sur chaque axe lues par le MPU6050 seront imprim√©s √† l'√©cran apr√®s calcul.


**Code**

.. code-block:: js

    var gyro = require("mpu6050-gyro");
    
    var address = 0x68; //MPU6050 address
    var bus = 1; //i2c bus used   
    var gyro = new gyro( bus,address );
    
    async function update_telemetry() {
        
        var gyro_xyz = gyro.get_gyro_xyz();
        var accel_xyz = gyro.get_accel_xyz();
        
        var gyro_data = {
            gyro_xyz: gyro_xyz,
            accel_xyz: accel_xyz,
            rollpitch: gyro.get_roll_pitch( gyro_xyz, accel_xyz )
        }
        
        console.log(gyro_data);
        
        setTimeout(update_telemetry, 500);
    }
    
    if ( gyro ) {
        update_telemetry();
    }

**Explication du code**

.. code-block:: js

    var gyro = require("mpu6050-gyro");
    
    var address = 0x68; //MPU6050 address
    var bus = 1; //i2c bus used   
    var gyro = new gyro( bus,address );

Importer le module ``mpu6050-gyro``, d√©terminer l'adresse du MPU6050 et le bus de cr√©ation de 
l'objet gyro. Cela permet d'appeler facilement les fonctions encapsul√©es dans le module.

.. note:: 
    Pour plus de d√©tails sur ce module, veuillez consulter : https://www.npmjs.com/package/mpu6050-gyro

.. code-block:: js

    var gyro_xyz = gyro.get_gyro_xyz();
    var accel_xyz = gyro.get_accel_xyz();
    
    var gyro_data = {
        gyro_xyz: gyro_xyz,
        accel_xyz: accel_xyz,
        rollpitch: gyro.get_roll_pitch( gyro_xyz, accel_xyz )
    }
    
    console.log(gyro_data);
    
    setTimeout(update_telemetry, 500);

Le module encapsule trois fonctions disponibles :

``gyro.get_gyro_xyz()`` : Renvoie un objet JSON avec les donn√©es brutes x, y, z du gyroscope.

``gyro.get_accel_xyz()`` : Renvoie un objet JSON avec les donn√©es brutes x, y, z de l'acc√©l√©rom√®tre.

``gyro.get_roll_pitch(gyro_xyz, accel_xyz)`` : Renvoie un objet JSON avec le roulis et le tangage en degr√©s.

Image du ph√©nom√®ne
------------------

.. image:: ../img/image228.jpeg
