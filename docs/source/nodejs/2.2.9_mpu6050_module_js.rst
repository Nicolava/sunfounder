.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.2.9_js:

2.2.9 MPU6050モジュール
=========================

はじめに
------------

MPU-6050は、スマートフォン、タブレット、ウェアラブルセンサー向けに設計された、世界初かつ唯一の6軸モーショントラッキングデバイス（3軸ジャイロスコープと3軸加速度センサー）です。これらの特長には、低電力、低コスト、および高性能の要件が含まれます。

この実験では、I2Cを使用してMPU6050の三軸加速度センサと三軸ジャイロスコープの値を取得し、画面に表示します。

必要な部品
------------------------------

このプロジェクトでは、以下の部品が必要です。

.. image:: ../img/list_2.2.6.png

一式を購入するのが便利です、リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_mpu6050`
        - |link_mpu6050_buy|

回路図
-----------------

MPU6050はI2Cバスインターフェースを介してマイクロコントローラと通信します。SDA1およびSCL1は対応するピンに接続する必要があります。

.. image:: ../img/image330.png


実験手順
-------------------------------

**ステップ1：** 回路を組む。

.. image:: ../img/image227.png

**ステップ2**：I2Cの設定（付録 :ref:`i2c_config` を参照。I2Cを設定済みの場合は、このステップをスキップしてください。）

**ステップ3：** コードのフォルダに移動。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ4：** 依存関係をインストール。

.. raw:: html

   <run></run>

.. code-block::

    sudo npm install mpu6050-gyro

**ステップ5：** コードを実行。

.. raw:: html

   <run></run>

.. code-block::

    sudo node mpu6050_module.js

コードを実行すると、MPU6050で読み取られた各軸上の加速度、角速度、およびx軸とy軸の偏差角が計算された後、画面に表示されます。



**コード**

.. code-block:: js

    var gyro = require("mpu6050-gyro");
    
    var address = 0x68; //MPU6050 address
    var bus = 1; //i2c bus used   
    var gyro = new gyro( bus,address );
    
    async function update_telemetry() {
        
        var gyro_xyz = gyro.get_gyro_xyz();
        var accel_xyz = gyro.get_accel_xyz();
        
        var gyro_data = {
            gyro_xyz: gyro_xyz,
            accel_xyz: accel_xyz,
            rollpitch: gyro.get_roll_pitch( gyro_xyz, accel_xyz )
        }
        
        console.log(gyro_data);
        
        setTimeout(update_telemetry, 500);
    }
    
    if ( gyro ) {
        update_telemetry();
    }

**コード説明**

.. code-block:: js

    var gyro = require("mpu6050-gyro");
    
    var address = 0x68; //MPU6050 address
    var bus = 1; //i2c bus used   
    var gyro = new gyro( bus,address );

``mpu6050-gyro`` モジュールをインポートし、MPU6050のアドレスとジャイロのバス作成オブジェクトを決定します。
モジュール内のカプセル化された関数を呼び出すのが便利です。

.. note:: 
    このモジュールに関しては、以下を参照してください: https://www.npmjs.com/package/mpu6050-gyro

.. code-block:: js

    var gyro_xyz = gyro.get_gyro_xyz();
    var accel_xyz = gyro.get_accel_xyz();
    
    var gyro_data = {
        gyro_xyz: gyro_xyz,
        accel_xyz: accel_xyz,
        rollpitch: gyro.get_roll_pitch( gyro_xyz, accel_xyz )
    }
    
    console.log(gyro_data);
    
    setTimeout(update_telemetry, 500);

モジュールは、利用可能な3つの関数をカプセル化しています：

``gyro.get_gyro_xyz()``: ジャイロスコープからの生のx,y,zデータを持つJSONオブジェクトを返します。

``gyro.get_accel_xyz()``: 加速度計からの生のx,y,zデータを持つJSONオブジェクトを返します。

``gyro.get_roll_pitch( gyro_xyz, accel_xyz )``: ロールとピッチを度で表したJSONオブジェクトを返します。

現象の画像
------------------

.. image:: ../img/image228.jpeg
    