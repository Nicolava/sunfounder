.. _1.3.2_js:

1.3.2 サーボ
================

はじめに
--------------

このプロジェクトでは、サーボを回転させる方法を学びます。

必要な部品
------------------------------

このプロジェクトでは、以下の部品が必要です。

.. image:: ../img/list_1.3.2.png

一式を購入するのは確かに便利です。以下にリンクを示します。

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから、個別に購入することも可能です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`サーボ`
        - |link_servo_buy|

回路図
-----------------

.. image:: ../img/image337.png


実験の手順
-----------------------

**ステップ1:** 回路を組み立てる。

.. image:: ../img/image125.png

**ステップ2**: コードのフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3**: コードを実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo node servo.js

プログラムが実行された後、サーボは0度から180度まで回転し、その後180度から0度まで回転します。これが繰り返されます。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    SERVO_MIN_ANGLE = 0
    SERVO_MAX_ANGLE = 180
    SERVO_MIN_PULSE = 500
    SERVO_MAX_PULSE = 2500

    ServoPin = new Gpio(18,{mode: Gpio.OUTPUT})

    function map(value, inMin, inMax, outMin, outMax){
        return (outMax - outMin) * (value - inMin) / (inMax - inMin) + outMin
    }

    function angle2pulse(angle){
        return Math.floor(map(angle,SERVO_MIN_ANGLE,SERVO_MAX_ANGLE,SERVO_MIN_PULSE ,SERVO_MAX_PULSE))
    }

    let angle=90;
    let step=5;
    setInterval(() => {
        if(angle>=180||angle<=0){
            step=-step
        }
        angle+=step;
        ServoPin.servoWrite(angle2pulse(angle));
    }, 20);


**コード説明**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    ServoPin = new Gpio(18,{mode: Gpio.OUTPUT})

pigpioモジュールをインポートし、Gpio18の出力を制御するためのGpioクラスのオブジェクト、ServoPinを作成します。


.. code-block:: js

    SERVO_MIN_ANGLE = 0
    SERVO_MAX_ANGLE = 180
    SERVO_MIN_PULSE = 500
    SERVO_MAX_PULSE = 2500

    function map(value, inMin, inMax, outMin, outMax){
        return (outMax - outMin) * (value - inMin) / (inMax - inMin) + outMin
    }

    function angle2pulse(angle){
        return Math.floor(map(angle,SERVO_MIN_ANGLE,SERVO_MAX_ANGLE,SERVO_MIN_PULSE ,SERVO_MAX_PULSE))
    }

ここでは、角度をパルス幅にマッピングする関数を定義しています。
これは、Gpioクラスにカプセル化されたサーボ制御関数 ``servoWrite(pulseWidth)`` が角度の代わりにパルス幅を書き込む必要があるためです。
私たちが使用するサーボの角度範囲は0~180であり、これをパルス幅の範囲、500~2500にマッピングする必要があります。

.. code-block:: js

    let angle=90;
    let step=5;
    setInterval(() => {
        if(angle>=180||angle<=0){
            step=-step
        }
        angle+=step;
        ServoPin.servoWrite(angle2pulse(angle));
    }, 20);

サーボ角度を0から180まで前後に偏向させる。

現象の画像
------------------


.. image:: ../img/image126.jpeg

