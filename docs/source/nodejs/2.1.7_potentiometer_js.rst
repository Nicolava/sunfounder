.. _2.1.7_js:

2.1.7 ポテンショメータ
========================

はじめに
------------

ADC機能はアナログ信号をデジタル信号に変換するために使用できます。この実験では、ADC0834を用いてADCを取り扱う機能を得ることができます。ここでは、このプロセスをポテンショメータを使って実装します。ポテンショメータは物理的な量である電圧を変化させることができ、それがADC機能によって変換されます。

必要な部品
------------------------------

このプロジェクトでは、以下のコンポーネントが必要です。

.. image:: ../img/list_2.1.4_potentiometer.png

一つのキットを購入するのは非常に便利です、以下がリンクです:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`ポテンショメータ`
        - |link_potentiometer_buy|
    *   - :ref:`ADC0834`
        - \-

回路図
-----------------

.. image:: ../img/image311.png

.. image:: ../img/image312.png

実験手順
-----------------------

**ステップ1:** 回路を組み立てる。

.. image:: ../img/image180.png

.. note::
    チップを配置する際は、写真で示される対応する位置を参照してください。チップの溝が左側になるように配置してください。

**ステップ2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo node potentionmeter.js

コードが実行された後、ポテンショメータのノブを回すと、LEDの明るさが変わります。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 27);
    const led = new Gpio(22, {mode: Gpio.OUTPUT});

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

**コード説明**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

``pigpio`` モジュールをインポートします。

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

``ADC0834`` コンストラクタをインポートして、adc0834モジュールを使用します。


.. code-block:: js

   const adc = new ADC0834(17, 18, 27);

ADC0834オブジェクトをインスタンス化します。3つのパラメータは、それの3つのピンです。

これはPromiseオブジェクトです。以下のリンクからこの概念を理解する必要があるかもしれません。

* `Promise <https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_

.. code-block:: js

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

ADC0834のチャネル0の値（チャネル0はポテンショメータに接続されています）は、100msごとに読み取られ、その値は ``value`` に格納されます。

``value`` を出力して、LEDの明るさを制御するために使用します。これで、ポテンショメータの値に応じてLEDの明るさが変わるのがわかります。

現象の画像
------------------

.. image:: ../img/image181.jpeg


