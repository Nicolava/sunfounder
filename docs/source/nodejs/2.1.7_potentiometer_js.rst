.. _2.1.7_js:

2.1.7 Potentiometer
=====================

Einführung
----------

Die ADC-Funktion kann verwendet werden, um analoge Signale in digitale Signale umzuwandeln. In diesem Experiment verwenden wir den ADC0834, um die Funktion in Verbindung mit ADC zu nutzen. Hier setzen wir diesen Prozess mit einem Potentiometer um. Ein Potentiometer ändert die physikalische Größe – die Spannung, die dann von der ADC-Funktion umgewandelt wird.

Benötigte Komponenten
---------------------

Für dieses Projekt benötigen wir folgende Komponenten:

.. image:: ../img/list_2.1.4_potentiometer.png

Es ist definitiv praktisch, ein ganzes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch über die untenstehenden Links einzeln kaufen:

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`led`
        - |link_led_buy|
    *   - :ref:`potentiometer`
        - |link_potentiometer_buy|
    *   - :ref:`adc0834`
        - \-

Schaltplan
----------

.. image:: ../img/image311.png

.. image:: ../img/image312.png

Experimentelle Verfahren
-----------------------------

**Schritt 1:** Bauen Sie die Schaltung auf.

.. image:: ../img/image180.png

.. note::
    Bitte positionieren Sie den Chip entsprechend der Darstellung auf dem Bild. Beachten Sie, dass die Rillen des Chips links liegen sollten, wenn er platziert wird.

**Schritt 2:** Wechseln Sie in den Ordner mit dem Code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Schritt 3:** Führen Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo node potentionmeter.js

Nachdem der Code ausgeführt wurde, drehen Sie den Knopf am Potentiometer. Die Intensität der LED wird entsprechend verändert.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 27);
    const led = new Gpio(22, {mode: Gpio.OUTPUT});

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

**Code-Erklärung**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

Import des ``pigpio`` Moduls.

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

Wir importieren einen ``ADC0834`` Konstruktor, um das adc0834 Modul zu verwenden.

.. code-block:: js

   const adc = new ADC0834(17, 18, 27);

Ein ADC0834-Objekt instanziieren; die drei Parameter sind seine drei Pins.

Dies ist ein Promise-Objekt. Sie könnten das Konzept unter dem folgenden Link verstehen wollen:

* `Promise <https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_

.. code-block:: js

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

Der Wert des ADC0834 Kanal 0 (Kanal 0 ist mit dem Potentiometer verbunden) wird alle 100ms gelesen, und der Wert wird in ``value`` gespeichert.

Geben Sie ``value`` aus und verwenden Sie es, um die Helligkeit der LED zu steuern. Nun sehen Sie, dass die Helligkeit der LED sich mit dem Wert des Potentiometers ändert.

Phänomen-Bild
----------------

.. image:: ../img/image181.jpeg


