.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e alle anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.7_js:

2.1.7 Potenziometro
======================

Introduzione
---------------

La funzione ADC pu√≤ essere utilizzata per convertire segnali analogici 
in segnali digitali, e in questo esperimento, viene utilizzato l'ADC0834 
per ottenere la funzione di conversione ADC. In questo caso, implementiamo 
questo processo utilizzando un potenziometro. Il potenziometro cambia la 
quantit√† fisica -- la tensione, che viene convertita dalla funzione ADC.

Componenti necessari
-------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_2.1.4_potentiometer.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_potentiometer`
        - |link_potentiometer_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Schema elettrico
---------------------

.. image:: ../img/image311.png


.. image:: ../img/image312.png


Procedure sperimentali
----------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image180.png


.. nota::
    Posiziona il chip facendo riferimento alla posizione corrispondente 
    raffigurata nell'immagine. Nota che le scanalature sul chip devono 
    essere a sinistra quando viene posizionato.

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node potentionmeter.js

Dopo l'esecuzione del codice, ruota la manopola del potenziometro e l'intensit√† del LED cambier√† di conseguenza.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const ADC0834 = require('./adc0834.js').ADC0834;

    const adc = new ADC0834(17, 18, 27);
    const led = new Gpio(22, {mode: Gpio.OUTPUT});

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

Spiegazione del Codice
----------------------------

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

Importa il modulo ``pigpio``.

.. code-block:: js

    const ADC0834 = require('./adc0834.js').ADC0834;

Importiamo un costruttore ``ADC0834`` per utilizzare il modulo adc0834.


.. code-block:: js

   const adc = new ADC0834(17, 18, 27);

Istanzia un oggetto ADC0834, i tre parametri rappresentano i suoi tre pin.

Questo √® un oggetto promise, potresti aver bisogno di approfondire il concetto dal seguente link.

* `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_


.. code-block:: js

    setInterval(() => {
        adc.read(0).then((value) => {
            console.log(`Current analogVal: ${value}\n`);
            led.pwmWrite(value);
        }, (error)=>{
            console.log("Error: " + error);
        });
    }, 100);

Il valore del canale 0 dell'ADC0834 (il canale 0 √® collegato al potenziometro) 
viene letto ogni 100ms, e il valore verr√† memorizzato in ``value``.

Stampa il ``value`` e utilizzalo per controllare la luminosit√† del LED, ora puoi 
vedere che la luminosit√† del LED cambia in base al valore del potenziometro.


Immagine del fenomeno
---------------------

.. image:: ../img/image181.jpeg

