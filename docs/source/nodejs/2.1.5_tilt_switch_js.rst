.. _2.1.5_js:

2.1.5 Kippschalter
=====================

Einführung
----------

Dies ist ein Kippschalter mit einem Metallball im Inneren. Er wird verwendet, um Neigungen eines kleinen Winkels zu erkennen.

Benötigte Komponenten
---------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../img/list_2.1.3_tilt_switch.png

Es ist definitiv praktisch, ein komplettes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`led`
        - |link_led_buy|
    *   - :ref:`tilt_switch`
        - \-

Schaltplan
----------

.. image:: ../img/image307.png

.. image:: ../img/image308.png

Experimentelle Verfahren
----------------------------

**Schritt 1:** Schaltung aufbauen.

.. image:: ../img/image169.png

**Schritt 2:** Zum Ordner des Codes navigieren.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Schritt 3:** Code ausführen.

.. raw:: html

   <run></run>

.. code-block::

    sudo node tilt_switch.js

Stellen Sie den Kippschalter vertikal auf, und die grüne LED leuchtet. Neigen Sie ihn, und die rote LED leuchtet. Stellen Sie ihn wieder vertikal auf, und die grüne LED leuchtet erneut.

**Code**

.. raw:: html

    <run></run>

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const led1 = new Gpio(22, { mode: Gpio.OUTPUT });
    const led2 = new Gpio(27, { mode: Gpio.OUTPUT });

    const tilt = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

    tilt.on('interrupt', (level) => {  
        if (level) {
            console.log("Horizontally");
        }
        else {
            console.log("Vertically");
        }
        led1.digitalWrite(level);
        led2.digitalWrite(!level);    
    });

**Code-Erklärung**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const led1 = new Gpio(22, { mode: Gpio.OUTPUT });
    const led2 = new Gpio(27, { mode: Gpio.OUTPUT });

    const tilt = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    }); 

Das Modul pigpio wird importiert und drei Objekte led1, led2, tilt erstellt. Durch das Auslesen des Pegels des IO-Ports tilt werden led1 und led2 gesteuert.    

.. code-block:: js

    const tilt = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE       
    });

Erstellung eines Kippschalter-Objekts zur Steuerung des IO-Ports Gpio17, Einstellung auf Eingabemodus, Pull-Down-Widerstand (initial niedriger Pegel). Und Einstellung der Interrupt-Funktion, Modus ist EITHER_EDGE, d.h. sowohl steigende als auch fallende Flanken lösen die Interrupt-Funktion aus.

.. code-block:: js

    tilt.on('interrupt', (level) => {  
        if (level) {
            console.log("Horizontally");
        }
        else {
            console.log("Vertically");
        }
        led1.digitalWrite(level);
        led2.digitalWrite(!level);    
    });

Wenn der Interrupt ausgelöst wird, wird derselbe Pegel an led1 und der gegenteilige Pegel an led2 geschrieben. Wenn der IO-Port tilt hoch ist, gibt das Terminal "Horizontal" aus; wenn der IO-Port tilt niedrig ist, gibt das Terminal "Vertikal" aus.

Phänomen-Bild
-------------

.. image:: ../img/image170.jpeg
