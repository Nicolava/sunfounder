 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.7_js:

2.2.7 PIR
=========

Introduction
------------

Dans ce projet, nous allons cr√©er un dispositif en utilisant des capteurs infrarouges 
pyro√©lectriques pour le corps humain. Lorsque quelqu'un s'approche de la LED, celle-ci 
s'allumera automatiquement. Sinon, la lumi√®re s'√©teindra. Ce capteur de mouvement infrarouge 
est un type de capteur capable de d√©tecter l'infrarouge √©mis par les humains et les animaux.


Composants N√©cessaires
-----------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_2.2.4_pir2.png

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|
    *   - :ref:`cpn_pir`
        - \-

Sch√©ma de C√¢blage
---------------------

.. image:: ../img/image327.png

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image214.png

**√âtape 2 :** Aller dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**√âtape 3 :** Ex√©cuter le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node pir.js

Apr√®s l'ex√©cution du code, le PIR d√©tecte les environs et fait briller la LED RGB en 
jaune s'il d√©tecte quelqu'un passant √† proximit√©. Il y a deux potentiom√®tres sur le 
module PIR : l'un pour ajuster la sensibilit√© et l'autre pour ajuster la distance de 
d√©tection. Afin d'optimiser le fonctionnement du module PIR, il est n√©cessaire d'ajuster 
ces deux potentiom√®tres.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const pirPin = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,
        edge: Gpio.EITHER_EDGE
    })    // the pir connect to pin17

    const redPin = new Gpio(18, { mode: Gpio.OUTPUT, })
    const greenPin = new Gpio(27, { mode: Gpio.OUTPUT, })
    const bluePin = new Gpio(22, { mode: Gpio.OUTPUT, })
    //'Red':18, 'Green':27, 'Blue':22

    var p_R, p_G, p_B

    // Set all led as pwm channel and frequece to 2KHz
    p_R = redPin.pwmFrequency(2000)
    p_G = greenPin.pwmFrequency(2000)
    p_B = bluePin.pwmFrequency(2000)

    // Set all begin with value 0
    p_R.pwmWrite(0)
    p_G.pwmWrite(0)
    p_B.pwmWrite(0)

    // Define a MAP function for mapping values.  Like from 0~255 to 0~100
    function MAP(x, in_min, in_max, out_min, out_max) {
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
    }

    // Define a function to set up colors
    function setColor(color) {
        // configures the three LEDs' luminance with the inputted color value .
        // Devide colors from 'color' veriable
        R_val = (color & 0xFF0000) >> 16
        G_val = (color & 0x00FF00) >> 8
        B_val = (color & 0x0000FF) >> 0
        // Map color value from 0~255 to 0~100
        R_val = MAP(R_val, 0, 255, 0, 100)
        G_val = MAP(G_val, 0, 255, 0, 100)
        B_val = MAP(B_val, 0, 255, 0, 100)

        //Assign the mapped duty cycle value to the corresponding PWM channel to change the luminance.
        p_R.pwmWrite(R_val)
        p_G.pwmWrite(G_val)
        p_B.pwmWrite(B_val)
        //print ("color_msg: R_val = %s, G_val = %s, B_val = %s"%(R_val, G_val, B_val))
    }

    pirPin.on('interrupt', (level) => {
        if (level) {
            setColor(0xFFFF00)
        }else{
            setColor(0x0000FF)
        }
    });

    process.on('SIGINT', function () {
        p_R.pwmWrite(0)
        p_G.pwmWrite(0)
        p_B.pwmWrite(0)
        process.exit();
    })

**Explication du Code**

Le code de cet exemple est une combinaison de :ref:`2.1.1_js` et :ref:`1.1.2_js`, inutile d'entrer dans les d√©tails.


Image du Ph√©nom√®ne
------------------

.. image:: ../img/image215.jpeg
