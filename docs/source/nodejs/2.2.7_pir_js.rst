.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime esclusive.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni durante le festivit√†.

    üëâ Pronto per esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.7_js:

2.2.7 PIR
============

Introduzione
---------------

In questo progetto, realizzeremo un dispositivo utilizzando i sensori piroelettrici 
a infrarossi per il corpo umano. Quando qualcuno si avvicina al LED, quest'ultimo si 
accender√† automaticamente. In caso contrario, la luce si spegner√†. Questo sensore di 
movimento a infrarossi √® un tipo di sensore in grado di rilevare l'infrarosso emesso 
da esseri umani e animali.

Componenti necessari
------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_2.2.4_pir2.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK DI ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|
    *   - :ref:`cpn_pir`
        - \-

Schema elettrico
-------------------

.. image:: ../img/image327.png


Procedure sperimentali
-------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image214.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 3:** Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node pir.js

Dopo l'esecuzione del codice, il PIR rileva l'ambiente circostante e fa accendere l'RGB 
LED con colore giallo se rileva il passaggio di qualcuno. Ci sono due potenziometri sul 
modulo PIR: uno per regolare la sensibilit√† e l'altro per regolare la distanza di 
rilevamento. Per far funzionare meglio il modulo PIR, √® necessario provare a regolare 
questi due potenziometri.

**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    const pirPin = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,
        edge: Gpio.EITHER_EDGE
    })    // the pir connect to pin17

    const redPin = new Gpio(18, { mode: Gpio.OUTPUT, })
    const greenPin = new Gpio(27, { mode: Gpio.OUTPUT, })
    const bluePin = new Gpio(22, { mode: Gpio.OUTPUT, })
    //'Red':18, 'Green':27, 'Blue':22

    var p_R, p_G, p_B

    // Set all led as pwm channel and frequece to 2KHz
    p_R = redPin.pwmFrequency(2000)
    p_G = greenPin.pwmFrequency(2000)
    p_B = bluePin.pwmFrequency(2000)

    // Set all begin with value 0
    p_R.pwmWrite(0)
    p_G.pwmWrite(0)
    p_B.pwmWrite(0)

    // Define a MAP function for mapping values.  Like from 0~255 to 0~100
    function MAP(x, in_min, in_max, out_min, out_max) {
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
    }

    // Define a function to set up colors
    function setColor(color) {
        // configures the three LEDs' luminance with the inputted color value .
        // Devide colors from 'color' veriable
        R_val = (color & 0xFF0000) >> 16
        G_val = (color & 0x00FF00) >> 8
        B_val = (color & 0x0000FF) >> 0
        // Map color value from 0~255 to 0~100
        R_val = MAP(R_val, 0, 255, 0, 100)
        G_val = MAP(G_val, 0, 255, 0, 100)
        B_val = MAP(B_val, 0, 255, 0, 100)

        //Assign the mapped duty cycle value to the corresponding PWM channel to change the luminance.
        p_R.pwmWrite(R_val)
        p_G.pwmWrite(G_val)
        p_B.pwmWrite(B_val)
        //print ("color_msg: R_val = %s, G_val = %s, B_val = %s"%(R_val, G_val, B_val))
    }

    pirPin.on('interrupt', (level) => {
        if (level) {
            setColor(0xFFFF00)
        }else{
            setColor(0x0000FF)
        }
    });

    process.on('SIGINT', function () {
        p_R.pwmWrite(0)
        p_G.pwmWrite(0)
        p_B.pwmWrite(0)
        process.exit();
    })

**Spiegazione del codice**

Il codice di questo esempio √® una combinazione di :ref:`2.1.1_js` e :ref:`1.1.2_js`, quindi non √® necessario approfondire i dettagli.

Immagine del fenomeno
---------------------------

.. image:: ../img/image215.jpeg
