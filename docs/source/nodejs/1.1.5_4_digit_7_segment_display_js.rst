.. _1.1.5_js:

1.1.5 4桁の7セグメントディスプレイ
====================================

はじめに
-----------------

次に、私に続いて4桁の7セグメントディスプレイを制御してみましょう。

必要な部品
------------------------------

このプロジェクトでは、以下の部品が必要です。

.. image:: img/list_4_digit.png

全体のキットを購入すると非常に便利です。以下がリンクです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクからも個別に購入することができます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`4-digit`
        - \-
    *   - :ref:`74HC595`
        - |link_74hc595_buy|

.. note::
    このプロジェクトでは、4桁の7セグメントディスプレイにはBSモデルを使用する必要があります。ASモデルを使用すると、点灯しない場合があります。

回路図
--------------------

.. image:: img/schmatic_4_digit.png


実験手順
-------------------------

**ステップ1**：回路を組み立てます。

.. image:: img/image80.png

**ステップ2**：コードのフォルダに移動します。

.. raw:: html

    <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3**：コードを実行します。

.. raw:: html

    <run></run>

.. code-block::

    sudo node 4_digit_7_segment_display.js

コードが実行された後、プログラムはカウントを取り、1秒ごとに1ずつ増加します。そして、4桁の7セグメントディスプレイでカウントが表示されます。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    var counter = 0;

    const number = [0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90]; //for BS
    
    const SDI = new Gpio(24, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(23, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(18, { mode: Gpio.OUTPUT });

    const pin1 = new Gpio(10, { mode: Gpio.OUTPUT });
    const pin2 = new Gpio(22, { mode: Gpio.OUTPUT });
    const pin3 = new Gpio(27, { mode: Gpio.OUTPUT });
    const pin4 = new Gpio(17, { mode: Gpio.OUTPUT });
    const placePin = [pin1, pin2, pin3, pin4];

    function clearDisplay() {
        hc595_shift(0xff); //for BS
    }

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

    function pickDigit(digit) {
        for(let i=0;i<4;i++){
            placePin[i].digitalWrite(0);
        }
        placePin[digit].digitalWrite(1);
    }


    let digit = -1
    setInterval(() => {
        digit = (digit +1)% 4
        clearDisplay();
        pickDigit(digit);
        switch(digit){
            case 0:
                hc595_shift(number[Math.floor(counter % 10)]);  
                break;
            case 1:
                hc595_shift(number[Math.floor(counter % 100 / 10)]);
                break;        
            case 2:
                hc595_shift(number[Math.floor(counter % 1000 / 100)]);
                break;        
            case 3:
                hc595_shift(number[Math.floor(counter % 10000 / 1000)]);
                break;
        }
    }, 5);

    setInterval(() => {
        counter++;
    }, 1000);

**コード説明**

.. code-block:: js

    const pin1 = new Gpio(10, {mode: Gpio.OUTPUT});
    const pin2 = new Gpio(25, {mode: Gpio.OUTPUT});
    const pin3 = new Gpio(27, {mode: Gpio.OUTPUT});
    const pin4 = new Gpio(17, {mode: Gpio.OUTPUT});
    const placePin = [pin1,pin2,pin3,pin4];    

4桁の7セグメントディスプレイの共通アノードを制御しやすくするため、ピン10、25、27、17を出力モードとして初期化し、それらを ``placePin`` 配列に配置します。

.. code-block:: js

    const number = [0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90];

0から9までの16進セグメントコード（共通アノード）を表すための定数配列 ``number`` を定義します。

.. code-block:: js

    function clearDisplay() {
        hc595_shift(0xff); 
    }

デジタルチューブを消灯するために0xffを書き込みます。

.. code-block:: js

    function pickDigit(digit) {
        for(let i=0;i<4;i++){
            placePin[i].digitalWrite(0);
        }
        placePin[digit].digitalWrite(1);
    }

値の場所を選択します。
一度に有効にするべき場所は1つだけです。
有効にされた場所はハイに書き込まれます。

.. code-block:: js

    let digit = -1
    setInterval(() => {
        digit = (digit +1)% 4
        clearDisplay();
        pickDigit(digit);
        switch(digit){
            case 0:
                hc595_shift(number[Math.floor(counter % 10)]);  
                break;
            case 1:
                hc595_shift(number[Math.floor(counter % 100 / 10)]);
                break;        
            case 2:
                hc595_shift(number[Math.floor(counter % 1000 / 100)]);
                break;        
            case 3:
                hc595_shift(number[Math.floor(counter % 10000 / 1000)]);
                break;
        }
    }, 5);

このコードは、4桁の7セグメントディスプレイに表示される数字を設定するために使用されます。

まず、4番目のセグメントディスプレイを起動し、1桁の数字を書き込みます。
次に、3番目のセグメントディスプレイを開始し、10桁の数字を入力します。
その後、2番目と1番目のセグメントディスプレイを順番に起動し、
それぞれ百桁と千桁の数字を書き込みます。
リフレッシュ速度が非常に速いため、完全な4桁のディスプレイを見ることができます。

.. code-block:: js

    setInterval(() => {
        counter++;
    }, 1000);

経過した毎秒に ``counter`` に1を加算します
（4桁のデジタルチューブ表示の数字が1加算される）。

現象の画像
-------------------------

.. image:: img/image81.jpeg



