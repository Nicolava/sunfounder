.. note::

    ¬°Hola, bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s profundamente en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _1.1.5_js:

1.1.5 Pantalla de 7 segmentos de 4 d√≠gitos
==========================================

Introducci√≥n
-------------

A continuaci√≥n, sigue conmigo para intentar controlar la pantalla de 7 segmentos de 4 d√≠gitos.

Componentes Necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: img/list_4_digit.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

.. note::
    En este proyecto, para la pantalla de 7 segmentos de 4 d√≠gitos, debemos usar el modelo BS. Si usas el modelo AS, puede que no se encienda.

Diagrama Esquem√°tico
-------------------------

.. image:: img/schmatic_4_digit.png

Procedimientos Experimentales
---------------------------------

**Paso 1**: Construye el circuito.

.. image:: img/image80.png

**Paso 2**: Ve a la carpeta del c√≥digo.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Paso 3**: Ejecuta el c√≥digo.

.. raw:: html

    <run></run>

.. code-block::

    sudo node 4_digit_7_segment_display.js

Despu√©s de ejecutar el c√≥digo, el programa lleva una cuenta, aumentando en 1 por segundo, y la pantalla de 7 segmentos de 4 d√≠gitos muestra el conteo.
**C√≥digo**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    var counter = 0;

    const number = [0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90]; //for BS
    
    const SDI = new Gpio(24, { mode: Gpio.OUTPUT });
    const RCLK = new Gpio(23, { mode: Gpio.OUTPUT });
    const SRCLK = new Gpio(18, { mode: Gpio.OUTPUT });

    const pin1 = new Gpio(10, { mode: Gpio.OUTPUT });
    const pin2 = new Gpio(22, { mode: Gpio.OUTPUT });
    const pin3 = new Gpio(27, { mode: Gpio.OUTPUT });
    const pin4 = new Gpio(17, { mode: Gpio.OUTPUT });
    const placePin = [pin1, pin2, pin3, pin4];

    function clearDisplay() {
        hc595_shift(0xff); //for BS
    }

    function hc595_shift(dat) {
        for (let j = 0; j < 8; j++) {
            let code = 0x80 & (dat << j);
            if (code != 0) {
                code = 1;
            }
            SDI.digitalWrite(code);
            SRCLK.trigger(1,1);
        }
        RCLK.trigger(1,1);
    }

    function pickDigit(digit) {
        for(let i=0;i<4;i++){
            placePin[i].digitalWrite(0);
        }
        placePin[digit].digitalWrite(1);
    }


    let digit = -1
    setInterval(() => {
        digit = (digit +1)% 4
        clearDisplay();
        pickDigit(digit);
        switch(digit){
            case 0:
                hc595_shift(number[Math.floor(counter % 10)]);  
                break;
            case 1:
                hc595_shift(number[Math.floor(counter % 100 / 10)]);
                break;        
            case 2:
                hc595_shift(number[Math.floor(counter % 1000 / 100)]);
                break;        
            case 3:
                hc595_shift(number[Math.floor(counter % 10000 / 1000)]);
                break;
        }
    }, 5);

    setInterval(() => {
        counter++;
    }, 1000);

**Explicaci√≥n del C√≥digo**

.. code-block:: js

    const pin1 = new Gpio(10, {mode: Gpio.OUTPUT});
    const pin2 = new Gpio(25, {mode: Gpio.OUTPUT});
    const pin3 = new Gpio(27, {mode: Gpio.OUTPUT});
    const pin4 = new Gpio(17, {mode: Gpio.OUTPUT});
    const placePin = [pin1,pin2,pin3,pin4];    

Inicializa los pines 10, 25, 27 y 17 en modo de salida y col√≥calos en la matriz ``placePin`` para facilitar el control del √°nodo com√∫n de la pantalla de 7 segmentos de cuatro d√≠gitos.

.. code-block:: js

    const number = [0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90];

Define una matriz constante ``number`` para representar el c√≥digo de segmento hexadecimal del 0 al 9 (√°nodo com√∫n).

.. code-block:: js

    function clearDisplay() {
        hc595_shift(0xff); 
    }

Escribe 0xff para apagar el tubo digital.

.. code-block:: js

    function pickDigit(digit) {
        for(let i=0;i<4;i++){
            placePin[i].digitalWrite(0);
        }
        placePin[digit].digitalWrite(1);
    }

Selecciona el lugar del valor. 
Solo debe haber un lugar habilitado cada vez. 
El lugar habilitado se escribir√° en alto.

.. code-block:: js

    let digit = -1
    setInterval(() => {
        digit = (digit +1)% 4
        clearDisplay();
        pickDigit(digit);
        switch(digit){
            case 0:
                hc595_shift(number[Math.floor(counter % 10)]);  
                break;
            case 1:
                hc595_shift(number[Math.floor(counter % 100 / 10)]);
                break;        
            case 2:
                hc595_shift(number[Math.floor(counter % 1000 / 100)]);
                break;        
            case 3:
                hc595_shift(number[Math.floor(counter % 10000 / 1000)]);
                break;
        }
    }, 5);

Este c√≥digo se usa para configurar el n√∫mero mostrado en la pantalla de 7 segmentos de 4 d√≠gitos.

Primero, inicia el cuarto segmento de la pantalla y escribe el n√∫mero de un solo d√≠gito. 
Luego, inicia el tercer segmento de la pantalla y escribe el d√≠gito de las decenas; 
despu√©s de eso, inicia el segundo y el primer segmento de la pantalla respectivamente, 
y escribe los d√≠gitos de las centenas y miles respectivamente. 
Debido a que la velocidad de actualizaci√≥n es muy r√°pida, vemos una pantalla de cuatro d√≠gitos completa.

.. code-block:: js

    setInterval(() => {
        counter++;
    }, 1000);

Agrega uno al ``counter`` 
(el tubo digital de cuatro d√≠gitos muestra el n√∫mero incrementado en uno) 
cada segundo que pasa.

Imagen del Fen√≥meno
-------------------------

.. image:: img/image81.jpeg
