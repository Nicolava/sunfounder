.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.1.3_js:

2.1.3 タッチスイッチモジュール
=================================

はじめに
-------------------

このプロジェクトでは、タッチスイッチモジュールについて学びます。これは従来のスイッチを置き換えることができるもので、以下の利点があります：便利な操作性、優れたタッチ感、正確な制御、そして最小の機械的摩耗。

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/2.1.3component.png
    :width: 700
    :align: center

全てのキットをまとめて購入するのは非常に便利です。以下はリンクです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_touch_switch`
        - |link_touch_buy|

回路図
-----------------

.. image:: ../img/2.1.3circuit.png
    :width: 500
    :align: center

**実験手順**
------------------------------

**ステップ1:** 回路を組む。

.. image:: ../img/2.1.3fritzing.png
    :width: 700
    :align: center

**ステップ2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo node touch_switch.js

コードが実行されている間、赤いLEDが点灯します。タッチスイッチモジュールをタップすると、黄色いLEDが点灯します。

**コード**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const touchSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

    touchSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });   

**コード説明**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const touchSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

``pigpio`` モジュールをインポートし、led1、led2、touchSwitchの3つのオブジェクトを作成します。
touchSwitch IOポートのレベルを読み取ることで、led1とled2のオンとオフを制御します。

.. code-block:: js

    touchSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });   

touchSwitch IOポートのレベルが変化すると、
led1に同じレベルを、led2に反対のレベルを書き込みます。

現象の画像
------------------------


.. image:: ../img/2.1.3touch_switch_module.JPG
    :width: 500
    :align: center
    