 
.. _2.1.3_js:

2.1.3 Module Interrupteur Tactile
=======================================

Introduction
-------------------

Dans ce projet, vous apprendrez à utiliser un module interrupteur tactile. Il peut remplacer les types traditionnels d'interrupteurs avec les avantages suivants : opération pratique, sensation tactile fine, contrôle précis et usure mécanique minimale.

Composants Nécessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/2.1.3component.png
    :width: 700
    :align: center

Il est vraiment pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ÉLÉMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_touch_switch`
        - |link_touch_buy|

Schéma de Câblage
--------------------

.. image:: ../img/2.1.3circuit.png
    :width: 500
    :align: center

**Procédures Expérimentales**
--------------------------------

**Étape 1 :** Construire le circuit.

.. image:: ../img/2.1.3fritzing.png
    :width: 700
    :align: center

**Étape 2 :** Accédez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Étape 3 :** Exécutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node touch_switch.js

Pendant l'exécution du code, la LED rouge s'allume ; lorsque vous appuyez sur le module interrupteur tactile, la LED jaune s'allume.

**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const touchSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

    touchSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });   

**Explication du Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio; 

    const led1 = new Gpio(22, {mode: Gpio.OUTPUT});
    const led2 = new Gpio(27, {mode: Gpio.OUTPUT});

    const touchSwitch = new Gpio(17, {
        mode: Gpio.INPUT,
        pullUpDown: Gpio.PUD_DOWN,     
        edge: Gpio.EITHER_EDGE        
    });

Importer le module ``pigpio`` et créer trois objets : led1, led2, touchSwitch. 
En lisant le niveau du port IO de touchSwitch, on contrôle l'allumage et l'extinction de led1 et led2.

.. code-block:: js

    touchSwitch.on('interrupt', (level) => {  
        led1.digitalWrite(level);   
        led2.digitalWrite(!level);       
    });   

Lorsque le niveau du port IO de touchSwitch change, écrire le même 
niveau sur led1 et le niveau opposé sur led2.


**Image du Phénomène**
------------------------

.. image:: ../img/2.1.3touch_switch_module.JPG
    :width: 500
    :align: center
