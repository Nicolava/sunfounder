.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.2.5_js:

2.2.5 IR障害物回避センサー
============================

はじめに
-----------------

このプロジェクトでは、IR障害物回避モジュールについて学びます。これは、短い距離での障害物を検出できるセンサーモジュールで、干渉が少なく、組み立てやすく、使いやすいなどの特徴があります。ロボットの障害物回避、回避カート、組み立てラインのカウントなど、幅広く使用されます。

.. image:: ../img/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

全体のキットを購入するのは確かに便利です。リンクは以下の通りです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクからも別々に購入することができます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

回路図
-----------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

実験手順
-------------------------

**ステップ1:** 回路を組み立てる

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**ステップ2:** コードのフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行する。

.. raw:: html

   <run></run>

.. code-block::

   sudo node ir_obstacle.js

コードを実行すると、モジュールのプローブの前に手を置くと、モジュールの出力インジケータが点灯し、手を取り除くまで「Detected Barrier!」と画面に繰り返し表示されます。

**コード**

.. code-block:: js

   const Gpio = require('pigpio').Gpio; 

   const ir_ob = new Gpio(17, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.FALLING_EDGE        
   });

   ir_ob.on('interrupt', () => {  
      console.log('Detected Barrier!');        
   });


**コード説明**

.. code-block:: js

   const Gpio = require('pigpio').Gpio; 

   const ir_ob = new Gpio(17, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.FALLING_EDGE        
   });

pigpioモジュールをインポートし、Gpio17のIOポートを制御するオブジェクトを作成します。
入力モードに設定し、フォーリングエッジでの割り込みを設定します。

.. code-block:: js

   ir_ob.on('interrupt', () => {  
      console.log('Detected Barrier!');        
   });

割り込みがトリガされると、障害物が検出されたことを意味し、「Detected Barrier!」と出力します。

現象の画像
-----------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   