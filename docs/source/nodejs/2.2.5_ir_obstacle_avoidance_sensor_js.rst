 
.. _2.2.5_js:

2.2.5 Capteur d'évitement d'obstacles IR
============================================

Introduction
-----------------

Dans ce projet, nous allons apprendre à utiliser le module d'évitement d'obstacles IR, qui est un module de capteur pouvant être utilisé pour détecter des obstacles à courte distance, avec peu d'interférences, facile à assembler, facile à utiliser, etc. Il peut être largement utilisé dans l'évitement d'obstacles pour robots, les chariots d'évitement d'obstacles, le comptage sur ligne d'assemblage, etc.

.. image:: ../img/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

Composants nécessaires
--------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

Il est définitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Schéma de câblage
---------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Procédures Expérimentales
----------------------------

**Étape 1 :** Construire le circuit

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**Étape 2 :** Aller dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/nodejs/

**Étape 3 :** Exécuter le code.

.. raw:: html

   <run></run>

.. code-block::

   sudo node ir_obstacle.js

Après l'exécution du code, lorsque vous mettez votre main devant la sonde du module, l'indicateur 
de sortie sur le module s'allume et "Detected Barrier!" sera imprimé à l'écran de manière répétée jusqu'à ce que votre main soit retirée.

**Code**

.. code-block:: js

   const Gpio = require('pigpio').Gpio; 

   const ir_ob = new Gpio(17, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.FALLING_EDGE        
   });

   ir_ob.on('interrupt', () => {  
      console.log('Detected Barrier!');        
   });

**Explication du Code**

.. code-block:: js

   const Gpio = require('pigpio').Gpio; 

   const ir_ob = new Gpio(17, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.FALLING_EDGE        
   });

Importer le module pigpio, créer un objet pour contrôler le port IO Gpio17,
le régler en mode input et en interruption sur le front descendant.

.. code-block:: js

   ir_ob.on('interrupt', () => {  
      console.log('Detected Barrier!');        
   });

Lorsque l'interruption est déclenchée, signifiant qu'un obstacle est détecté, imprimer "Detected Barrier!".

Image du Phénomène
------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500

