.. _2.2.5_js:

2.2.5 IR Hindernisvermeidungssensor
===================================

Einführung
-----------------

In diesem Projekt lernen wir den IR-Hindernisvermeidungsmodul kennen. Es handelt sich hierbei um einen Sensor, der dazu verwendet werden kann, Hindernisse auf kurze Distanzen zu erkennen. Er zeichnet sich durch geringe Störungen, einfache Montage und Benutzerfreundlichkeit aus. Der Sensor findet breite Anwendung in Robotern zur Hindernisvermeidung, vermeidungsgesteuerten Wagen, Zählungen in Fertigungsstraßen und vielem mehr.

.. image:: ../img/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir folgende Komponenten:

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

Es ist definitiv praktisch, ein komplettes Set zu kaufen. Hier ist der Link dazu:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Die Teile können auch einzeln über die folgenden Links erworben werden:

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_infrared_avoidance`
        - |link_obstacle_avoidance_buy|

Schaltplan
-----------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Experimentelle Verfahren
-------------------------

**Schritt 1:** Schaltung aufbauen

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**Schritt 2:** Wechseln Sie in das Verzeichnis des Codes.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/nodejs/

**Schritt 3:** Starten Sie den Code.

.. raw:: html

   <run></run>

.. code-block::

   sudo node ir_obstacle.js

Nachdem der Code ausgeführt wurde und Sie Ihre Hand vor den Sensor halten, leuchtet die Ausgabeanzeige auf und "Detected Barrier!" wird solange auf dem Bildschirm angezeigt, bis Sie Ihre Hand entfernen.

**Code**

.. code-block:: js

   const Gpio = require('pigpio').Gpio; 

   const ir_ob = new Gpio(17, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.FALLING_EDGE        
   });

   ir_ob.on('interrupt', () => {  
      console.log('Detected Barrier!');        
   });

**Code Erklärung**

.. code-block:: js

   const Gpio = require('pigpio').Gpio; 

   const ir_ob = new Gpio(17, {
      mode: Gpio.INPUT,
      pullUpDown: Gpio.PUD_DOWN,     
      edge: Gpio.FALLING_EDGE        
   });

Importieren Sie das pigpio-Modul und erstellen Sie ein Objekt, um den IO-Port Gpio17 zu steuern. Stellen Sie ihn auf den Eingabemodus und unterbrechen Sie ihn bei fallender Flanke.

.. code-block:: js

   ir_ob.on('interrupt', () => {  
      console.log('Detected Barrier!');        
   });

Wenn ein Interrupt ausgelöst wird, was bedeutet, dass ein Hindernis erkannt wurde, geben Sie "Detected Barrier!" aus.

Phänomen-Bild
-----------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   