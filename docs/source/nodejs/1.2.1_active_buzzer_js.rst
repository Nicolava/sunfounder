.. _1.2.1_js:

1.2.1 Aktiver Summer
====================

Einführung
----------

In diesem Projekt lernen wir, wie man mit einem PNP-Transistor einen aktiven Summer zum Piepen bringt.

Benötigte Komponenten
---------------------

Für dieses Projekt benötigen wir folgende Komponenten.

.. image:: ../img/list_1.2.1.png

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können diese auch separat über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Schaltplan
----------

In diesem Versuch werden ein aktiver Summer, ein PNP-Transistor und ein 1k-Widerstand verwendet, der zwischen der Basis des Transistors und GPIO geschaltet ist, um den Transistor zu schützen. Wenn der GPIO17-Ausgang des Raspberry Pi durch Programmierung mit niedrigem Pegel (0V) versorgt wird, wird der Transistor aufgrund von Stromsättigung leiten und der Summer wird Töne erzeugen. Wenn jedoch ein hoher Pegel an den IO des Raspberry Pi angelegt wird, wird der Transistor gesperrt und der Summer gibt keine Töne aus.

.. image:: ../img/image332.png

Experimentelle Verfahren
------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf. (Der aktive Summer hat einen weißen Tischaufkleber auf der Oberfläche und eine schwarze Rückseite.)

.. image:: ../img/image104.png

**Schritt 2:** Navigieren Sie zum Ordner mit dem Code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Schritt 3:** Ausführen.

.. raw:: html

   <run></run>

.. code-block::

    sudo node active_buzzer.js

Wenn der Code läuft, piept der Summer.

**Code**

.. code-block:: js

  const Gpio = require('pigpio').Gpio;
  const active = new Gpio(17,{mode: Gpio.OUTPUT});

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

  process.on('SIGINT',function(){
    active.digitalWrite(1);
    process.exit();
  });

**Code-Erklärung**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const active = new Gpio(17,{mode: Gpio.OUTPUT});

Importieren Sie das Modul ``pigpio`` und erstellen Sie ein Objekt active, um den IO-Port Gpio17 zu steuern. Der Modus ist auf Ausgabe eingestellt.

.. code-block:: js

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

Der aktive Summer funktioniert ähnlich wie die LED und kann mit ``digitalWrite()`` gesteuert werden. ``digitalRead()`` wird verwendet, um den aktuellen Pin-Zustand zu lesen. Hier wechselt der aktive Summer alle 500ms seinen Arbeitszustand.

.. code-block:: js

  process.on('SIGINT', function() {
      /* DO SOME STUFF HERE */

      process.exit()
  })

Behandeln von Ctrl+C. Hier wird verwendet, um den Summer beim Beenden des Programms zu stoppen.

`Process - NodeJS <https://nodejs.org/api/process.html>`_

Phänomen-Bild
---------------

.. image:: ../img/image105.jpeg
