.. note::

    ¬°Hola, bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s profundamente en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _1.2.1_js:

1.2.1 Zumbador Activo
====================

Introducci√≥n
----------------

En este proyecto, aprenderemos c√≥mo activar un zumbador activo para que emita un pitido 
utilizando un transistor PNP.

Componentes Necesarios
------------------------------

En este proyecto, necesitaremos los siguientes componentes. 

.. image:: ../img/list_1.2.1.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
Diagrama Esquem√°tico
------------------------

En este experimento, se utiliza un zumbador activo, un transistor PNP y una resistencia 
de 1k entre la base del transistor y el GPIO para proteger el transistor. Cuando el GPIO17 
de la Raspberry Pi se suministra con un nivel bajo (0V) mediante programaci√≥n, el transistor 
conducir√° debido a la saturaci√≥n de corriente y el zumbador emitir√° sonidos. Pero cuando se 
suministra un nivel alto al IO de la Raspberry Pi, el transistor se cortar√° y el zumbador no 
emitir√° sonidos.

.. image:: ../img/image332.png


Procedimientos Experimentales
---------------------------------

**Paso 1:** Construir el circuito. (El zumbador activo tiene una etiqueta blanca en la superficie y un respaldo negro.)

.. image:: ../img/image104.png

**Paso 2**: Ir a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Paso 3**: Ejecutar.

.. raw:: html

   <run></run>

.. code-block::

    sudo node active_buzzer.js

El c√≥digo se ejecuta y el zumbador emite un pitido.

**C√≥digo**

.. code-block:: js

  const Gpio = require('pigpio').Gpio;
  const active = new Gpio(17,{mode: Gpio.OUTPUT});

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

  process.on('SIGINT',function(){
    active.digitalWrite(1);
    process.exit();
  });

**Explicaci√≥n del C√≥digo**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const active = new Gpio(17,{mode: Gpio.OUTPUT});

Importar el m√≥dulo ``pigpio``, e instanciar un objeto active para controlar el puerto IO Gpio17, y el modo se establece en modo de salida.

.. code-block:: js

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

El zumbador activo es similar al LED en uso y puede ser controlado con ``digitalWrite()``, y ``digitalRead()`` se utiliza para leer el nivel actual del pin.
Aqu√≠ hacemos que el zumbador activo cambie su estado de funcionamiento cada 500ms.

.. code-block:: js

  process.on('SIGINT', function() {
      /* DO SOME STUFF HERE */

      process.exit()
  })

Manejar Ctrl+C, aqu√≠ se usa para detener el sonido del zumbador al salir del programa.

`Process - NodeJS <https://nodejs.org/api/process.html>`_

Imagen del Fen√≥meno
-------------------------

.. image:: ../img/image105.jpeg