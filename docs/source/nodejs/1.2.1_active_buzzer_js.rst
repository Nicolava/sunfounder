.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _1.2.1_js:

1.2.1 アクティブブザー
========================

はじめに
------------

このプロジェクトでは、PNPトランジスタを使用してアクティブブザーを鳴らす方法を学びます。

必要な部品
------------------------------

このプロジェクトで必要な部品は以下のとおりです。

.. image:: ../img/list_1.2.1.png

全体のキットを購入するのは非常に便利です。リンクはこちらです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

回路図
-----------------

この実験では、アクティブブザー、PNPトランジスタ、トランジスタのベースとGPIOの間に1kの抵抗が使用されます。Raspberry PiのGPIO17がプログラムによって低レベル（0V）で出力されると、トランジスタは電流飽和のために導通し、ブザーが音を出します。しかし、Raspberry PiのIOに高レベルが供給されると、トランジスタがオフになり、ブザーが音を出さなくなります。

.. image:: ../img/image332.png

実験手順
----------------------

**ステップ1:** 回路を作成します。（アクティブブザーには、表面に白いテーブルステッカーと黒い背面があります。）

.. image:: ../img/image104.png

**ステップ2**: コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3**: 実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo node active_buzzer.js

コードが実行されると、ブザーが鳴ります。

**コード**

.. code-block:: js

  const Gpio = require('pigpio').Gpio;
  const active = new Gpio(17,{mode: Gpio.OUTPUT});

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

  process.on('SIGINT',function(){
    active.digitalWrite(1);
    process.exit();
  });

**コード説明**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const active = new Gpio(17,{mode: Gpio.OUTPUT});

``pigpio`` モジュールをインポートし、IOポートGpio17を制御するためのオブジェクトactiveをインスタンス化します。モードは出力モードに設定されています。

.. code-block:: js

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

アクティブブザーはLEDの使用方法と似ており、 ``digitalWrite()`` で制御できます。 ``digitalRead()`` は現在のピンレベルを読むために使用されます。ここでは、アクティブブザーを500msごとに動作状態を変更させます。

.. code-block:: js

  process.on('SIGINT', function() {
      /* DO SOME STUFF HERE */

      process.exit()
  })

Ctrl+Cを処理します。ここでは、プログラムを終了するときにブザーの音を止めるために使用されます。

`Process - NodeJS <https://nodejs.org/api/process.html>`_

現象の画像
------------------

.. image:: ../img/image105.jpeg