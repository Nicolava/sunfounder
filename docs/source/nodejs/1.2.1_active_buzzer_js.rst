 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.2.1_js:

1.2.1 Buzzer Actif
========================

Introduction
---------------

Dans ce projet, nous apprendrons √† faire √©mettre un bip √† un buzzer actif √† l'aide d'un transistor PNP.

Composants N√©cessaires
--------------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/list_1.2.1.png

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Sch√©ma de C√¢blage
--------------------

Dans cette exp√©rience, un buzzer actif, un transistor PNP et une r√©sistance de 1k sont utilis√©s 
entre la base du transistor et le GPIO pour prot√©ger le transistor. Lorsque le GPIO17 du 
Raspberry Pi est aliment√© en niveau bas (0V) par programmation, le transistor sera conducteur en 
raison de la saturation du courant et le buzzer √©mettra des sons. Mais lorsque le niveau haut est 
fourni √† l'IO du Raspberry Pi, le transistor sera coup√© et le buzzer n'√©mettra pas de sons.

.. image:: ../img/image332.png


Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1:** Construire le circuit. (Le buzzer actif a un autocollant blanc sur la surface et un dos noir.)

.. image:: ../img/image104.png

**√âtape 2**: Aller dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**√âtape 3**: Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo node active_buzzer.js

Le code s'ex√©cute, le buzzer √©met un bip.

**Code**

.. code-block:: js

  const Gpio = require('pigpio').Gpio;
  const active = new Gpio(17,{mode: Gpio.OUTPUT});

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

  process.on('SIGINT',function(){
    active.digitalWrite(1);
    process.exit();
  });

**Explication du Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;
    const active = new Gpio(17,{mode: Gpio.OUTPUT});

Importer le module ``pigpio``, et instancier un objet actif pour contr√¥ler le port IO Gpio17, et le mode est d√©fini en mode sortie.

.. code-block:: js

  setInterval(() => {
    active.digitalWrite(!active.digitalRead());
  }, 500);

Le buzzer actif est similaire √† la LED en termes d'utilisation et peut √™tre contr√¥l√© avec ``digitalWrite()``, et ``digitalRead()`` est utilis√© pour lire le niveau de la broche actuelle.
Ici, nous faisons en sorte que le buzzer actif change son √©tat de fonctionnement toutes les 500ms.

.. code-block:: js

  process.on('SIGINT', function() {
      /* DO SOME STUFF HERE */

      process.exit()
  })

G√©rer Ctrl+C, ici utilis√© pour arr√™ter le son du buzzer lors de la sortie du programme.

`Process - NodeJS <https://nodejs.org/api/process.html>`_

Image du Ph√©nom√®ne
------------------

.. image:: ../img/image105.jpeg