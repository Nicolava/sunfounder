 
.. _1.3.1_js:

1.3.1 Moteur
=================

Introduction
-----------------

Dans ce projet, nous apprendrons à utiliser le L293D pour piloter un moteur à courant continu 
(DC) et le faire tourner dans le sens horaire et antihoraire. Comme le moteur DC nécessite un 
courant plus important, par mesure de sécurité, nous utilisons ici le module d'alimentation pour 
alimenter les moteurs.

Composants Nécessaires
-------------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/list_1.3.1.png

Il est vraiment pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_power_module`
        - \-
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_motor`
        - |link_motor_buy|

Schéma de Câblage
--------------------

Branchez le module d'alimentation sur la breadboard, et insérez le cavalier sur la broche 5V, 
il délivrera alors une tension de 5V. Connectez la broche 1 du L293D au GPIO22 et réglez-la à 
un niveau haut. Connectez la broche 2 au GPIO27 et la broche 7 au GPIO17, puis réglez une broche 
sur haut et l'autre sur bas. Ainsi, vous pouvez changer le sens de rotation du moteur.

.. image:: ../img/image336.png


**Procédures Expérimentales**

**Étape 1 :** Construisez le circuit.

.. image:: ../img/image117.png


.. note::
    Le module d'alimentation peut utiliser une batterie de 9V avec la boucle de batterie de 9V 
    incluse dans le kit. Insérez le cavalier du module d'alimentation dans les bandes de bus de 
    5V de la breadboard.

.. image:: ../img/image118.jpeg

**Étape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Étape 4 :** Exécutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo node motor.js

Lorsque le code s'exécute, le moteur tourne d'abord dans le sens horaire pendant 1 seconde puis 
s'arrête pendant 1 seconde, après cela, il tourne dans le sens antihoraire pendant 1 seconde ; 
ensuite, le moteur s'arrête pendant 1 seconde. Cette série d'actions sera exécutée en boucle.


**Code**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    MotorPin1 = new Gpio(17, { mode: Gpio.OUTPUT });
    MotorPin2 = new Gpio(27, { mode: Gpio.OUTPUT });
    MotorEnable = new Gpio(22, { mode: Gpio.OUTPUT });


    // Define a motor function to spin the motor
    // direction should be
    // 2(clockwise), 1(counterclockwise), 0(stop)
    function motor(direction) {
        switch (direction) {
            case 2: // Clockwise
                // Set direction
                MotorPin1.digitalWrite(1)
                MotorPin2.digitalWrite(0)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Clockwise')
                break;
            case 1:  // Counterclockwise
                // Set direction
                MotorPin1.digitalWrite(0)
                MotorPin2.digitalWrite(1)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Counterclockwise')
                break;
            case 0: // Stop
                // Disable the motor
                MotorEnable.digitalWrite(0)
                console.log('Stop')

        }
    }

    process.on('SIGINT', function () {
        MotorEnable.digitalWrite(0)
        process.exit();
    })

    let index=-1
    setInterval(() => {
        index=(index+1)%3
        motor(index)
    }, 1000)    


**Explication du Code**

.. code-block:: js

    MotorPin1 = new Gpio(17, { mode: Gpio.OUTPUT });
    MotorPin2 = new Gpio(27, { mode: Gpio.OUTPUT });
    MotorEnable = new Gpio(22, { mode: Gpio.OUTPUT });

Importer le module pigpio et créer trois objets de la classe Gpio pour contrôler les trois ports IO de Gpio17, Gpio27 et Gpio22.

.. code-block:: js

    function motor(direction) {
        switch (direction) {
            case 2: // Clockwise
                // Set direction
                MotorPin1.digitalWrite(1)
                MotorPin2.digitalWrite(0)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Clockwise')
                break;
            case 1:  // Counterclockwise
                // Set direction
                MotorPin1.digitalWrite(0)
                MotorPin2.digitalWrite(1)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Counterclockwise')
                break;
            case 0: // Stop
                // Disable the motor
                MotorEnable.digitalWrite(0)
                console.log('Stop')

        }
    }

Définir une fonction motor() pour contrôler le moteur,

#. Lorsque la direction est égale à 2, le port MotorPin1 écrit un niveau haut, le port MotorPin2 écrit un niveau bas, et le port d'activation MotorEnable écrit un niveau haut, et le moteur tourne dans le sens horaire.
#. Lorsque la direction est égale à 1, le port MotorPin1 écrit un niveau bas, le port MotorPin2 écrit un niveau haut, et le port d'activation MotorEnable écrit un niveau haut, et le moteur tourne dans le sens antihoraire.
#. Lorsque la direction est égale à 0, le port d'activation MotorEnable écrit un niveau bas, et le moteur s'arrête de tourner.

.. code-block:: js

    let index=-1
    setInterval(() => {
        index=(index+1)%3
        motor(index)
    }, 1000)    

Faire tourner le moteur alternativement dans le sens horaire et antihoraire, avec un intervalle de 1 seconde.

.. code-block:: js

    process.on('SIGINT', function () {
        MotorEnable.digitalWrite(0)
        process.exit();
    })

Lorsqu'il est détecté que **ctrl+c is** pressé,
MotorEnable écrit un niveau bas pour arrêter le moteur de tourner.

Image du Phénomène
-------------------------

.. image:: ../img/image119.jpeg