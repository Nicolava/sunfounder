.. note::

    Ciao, benvenuto nella Community di appassionati di Raspberry Pi, Arduino e ESP32 di SunFounder su Facebook! Approfondisci il tuo viaggio con Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Godi di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni e concorsi festivi**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.3.1_js:

1.3.1 Motore
===================

Introduzione
-------------------

In questo progetto, impareremo a utilizzare L293D per pilotare un motore DC e farlo 
ruotare in senso orario e antiorario. Poich√© il motore DC richiede una corrente maggiore, 
per motivi di sicurezza utilizziamo il modulo di alimentazione per fornire energia ai motori.


Componenti necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_1.3.1.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_power_module`
        - \-
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_motor`
        - |link_motor_buy|

Schema elettrico
--------------------

Collega il modulo di alimentazione alla breadboard e inserisci il ponticello 
nel pin da 5V, in modo che eroghi una tensione di 5V. Collega il pin 1 del 
L293D a GPIO22 e impostalo su alto livello. Collega il pin 2 a GPIO27 e il pin 
7 a GPIO17, quindi imposta un pin su alto e l'altro su basso. In questo modo, 
puoi cambiare la direzione di rotazione del motore.

.. image:: ../img/image336.png


**Procedure Sperimentali**

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image117.png


.. note::
    Il modulo di alimentazione pu√≤ essere alimentato da una batteria da 9V con la 
    clip per batteria inclusa nel kit. Inserisci il ponticello del modulo di 
    alimentazione nella striscia di bus a 5V della breadboard.

.. image:: ../img/image118.jpeg

**Passo 2**: Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**Passo 4**: Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo node motor.js

Quando il codice viene eseguito, il motore ruota prima in senso orario per 1s, poi 
si ferma per 1s, successivamente ruota in senso antiorario per 1s; successivamente 
il motore si ferma per 1s. Questa serie di azioni sar√† ripetuta continuamente.


**Codice**

.. code-block:: js

    const Gpio = require('pigpio').Gpio;

    MotorPin1 = new Gpio(17, { mode: Gpio.OUTPUT });
    MotorPin2 = new Gpio(27, { mode: Gpio.OUTPUT });
    MotorEnable = new Gpio(22, { mode: Gpio.OUTPUT });


    // Define a motor function to spin the motor
    // direction should be
    // 2(clockwise), 1(counterclockwise), 0(stop)
    function motor(direction) {
        switch (direction) {
            case 2: // Clockwise
                // Set direction
                MotorPin1.digitalWrite(1)
                MotorPin2.digitalWrite(0)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Clockwise')
                break;
            case 1:  // Counterclockwise
                // Set direction
                MotorPin1.digitalWrite(0)
                MotorPin2.digitalWrite(1)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Counterclockwise')
                break;
            case 0: // Stop
                // Disable the motor
                MotorEnable.digitalWrite(0)
                console.log('Stop')

        }
    }

    process.on('SIGINT', function () {
        MotorEnable.digitalWrite(0)
        process.exit();
    })

    let index=-1
    setInterval(() => {
        index=(index+1)%3
        motor(index)
    }, 1000)    
 

**Spiegazione del Codice**

.. code-block:: js

    MotorPin1 = new Gpio(17, { mode: Gpio.OUTPUT });
    MotorPin2 = new Gpio(27, { mode: Gpio.OUTPUT });
    MotorEnable = new Gpio(22, { mode: Gpio.OUTPUT });


Importa il modulo pigpio e crea tre oggetti della classe Gpio per controllare le tre porte IO Gpio17, Gpio27 e Gpio22.


.. code-block:: js

    function motor(direction) {
        switch (direction) {
            case 2: // Clockwise
                // Set direction
                MotorPin1.digitalWrite(1)
                MotorPin2.digitalWrite(0)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Clockwise')
                break;
            case 1:  // Counterclockwise
                // Set direction
                MotorPin1.digitalWrite(0)
                MotorPin2.digitalWrite(1)
                // Enable the motor
                MotorEnable.digitalWrite(1)
                console.log('Counterclockwise')
                break;
            case 0: // Stop
                // Disable the motor
                MotorEnable.digitalWrite(0)
                console.log('Stop')

        }
    }


Definisci una funzione motor() per controllare il motore,

#. Quando la direzione √® uguale a 2, la porta MotorPin1 scrive un livello alto, la porta MotorPin2 scrive un livello basso e la porta di abilitazione MotorEnable scrive un livello alto, facendo ruotare il motore in senso orario.
#. Quando la direzione √® uguale a 1, la porta MotorPin1 scrive un livello basso, la porta MotorPin2 scrive un livello alto e la porta di abilitazione MotorEnable scrive un livello alto, facendo ruotare il motore in senso antiorario.
#. Quando la direzione √® uguale a 0, la porta di abilitazione MotorEnable √® scritta a livello basso, e il motore si ferma.


.. code-block:: js

    let index=-1
    setInterval(() => {
        index=(index+1)%3
        motor(index)
    }, 1000)    

Fai ruotare il motore in senso orario e antiorario alternativamente, con un intervallo di 1 secondo.


.. code-block:: js

    process.on('SIGINT', function () {
        MotorEnable.digitalWrite(0)
        process.exit();
    })


Quando viene rilevata la pressione di **ctrl+c is**, 
MotorEnable viene scritto su basso per fermare la rotazione del motore.

Immagine del fenomeno
----------------------------

.. image:: ../img/image119.jpeg
