.. _3.1.1_js:

3.1.1 写真モジュール
==========================

はじめに
-----------------

このキットには、カメラモジュールが装備されています。Raspberry Piで写真を撮影してみましょう。

必要な部品
------------------------------

このプロジェクトでは、以下のコンポーネントが必要です。

.. image:: ../img/photo1.png
  :width: 800

全てのキットをまとめて購入すると確かに便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|

実験手順
------------------------------

**ステップ1:** Raspberry Piデスクトップに移動します。より良い体験のためにはスクリーンが必要です。参考：`Raspberry Piに接続 <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_ 。または、Raspberry Piのデスクトップにリモートでアクセスします。詳しいチュートリアルは :ref:`remote_desktop` を参照してください。

**ステップ2:** ターミナルを開き、コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/nodejs/

**ステップ3:** コードを実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo node camera.js

コードを実行すると、カメラが写真を撮ります。現在のディレクトリで``test.jpg``という名前の写真を見ることができます。

**コード**

.. code-block:: js

    const exec = require('child_process').exec;

    exec('libcamera-still -o test.jpg');

**コードの説明**

.. code-block:: js

    const exec = require('child_process').exec;

``child_process`` モジュールをインポートします。これにより、nodejsは子プロセスのさまざまな操作を実行できます。これには、システムコマンドを直接実行する子プロセスを作成することも含まれます。

.. note:: 
    このモジュールについては、こちらを参照してください： https://nodejs.org/api/child_process.html

.. code-block:: js

    exec('libcamera-still -o test.jpg');

カメラ機能を有効にすると、ターミナルで ``libcamera-still -o test.jpg`` コマンドを直接使用して写真を撮影できます。また、 ``child_process`` モジュールによって提供されるメソッド ``child_process.exec(cmd, [options] , callback)`` を使用して、システムコマンドを実行する子プロセスを作成することもできます。

ループと遅延関数を追加することで、タイミング写真やタイムラプスビデオの効果も得られます。
