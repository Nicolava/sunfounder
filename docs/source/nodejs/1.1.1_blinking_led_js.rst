.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _1.1.1_js:

1.1.1 Blinkende LED
=========================

Einf√ºhrung
-----------------

In diesem Projekt lernen wir, wie wir eine blinkende LED durch Programmierung steuern k√∂nnen.
Mit Ihren Einstellungen kann Ihre LED eine Reihe von interessanten
Effekten erzeugen. Jetzt geht's los.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten. 

.. image:: img/blinking_led_list.png
    :width: 800
    :align: center

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen sie auch einzeln √ºber die folgenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Schaltplan
---------------------

In diesem Experiment verbinden Sie einen 220Œ© Widerstand mit der Anode (dem langen Pin
der LED), dann den Widerstand mit 3,3 V und verbinden die Kathode (den
kurzen Pin) der LED mit GPIO17 des Raspberry Pi. Um
eine LED einzuschalten, muss GPIO17 auf einen niedrigen Pegel (0V) gesetzt werden. Diesen
Effekt erreichen wir durch Programmierung.

.. image:: img/image48.png
    :width: 800
    :align: center

Experimentelle Verfahren
-----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: img/image49.png
    :width: 800
    :align: center

**Schritt 2:** Navigieren Sie zum Ordner mit dem Code.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/nodejs/

.. note::
    Wechseln Sie √ºber ``cd`` zum Verzeichnis mit dem Code dieses Experiments.

**Schritt 3:** F√ºhren Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block::

   sudo node blink.js

.. note::
    Hier bedeutet sudo - Superuser-Rechte und node gibt an, die Datei mit Node.js auszuf√ºhren.

Nachdem der Code ausgef√ºhrt wurde, sehen Sie die LED blinken.

**Schritt 4:** Wenn Sie die Code-Datei blink.js bearbeiten m√∂chten,
dr√ºcken Sie ``Ctrl + C``, um die Codeausf√ºhrung zu stoppen. Geben Sie dann den folgenden
Befehl ein, um blink.js zu √∂ffnen:

.. raw:: html

   <run></run>

.. code-block::

   nano blink.js

.. note::
    nano ist ein Texteditor-Tool. Dieser Befehl wird verwendet, um die
    Code-Datei blink.js mit diesem Tool zu √∂ffnen.

Dr√ºcken Sie ``Ctrl+X``, um zu beenden. Wenn Sie den Code ge√§ndert haben, werden Sie gefragt, ob Sie die √Ñnderungen speichern m√∂chten oder nicht. Geben Sie ``Y`` (speichern) oder ``N`` (nicht speichern) ein.

Dr√ºcken Sie dann ``Enter`` zum Beenden. Geben Sie erneut nano blink.js ein, um den Effekt nach der √Ñnderung zu sehen.

**Code**

Folgend finden Sie den Programmcode:

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);


Alternativ kann der Code als spezifischere JS-Pfeilfunktion geschrieben werden:

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);


**Code-Erkl√§rung**

.. code-block:: js

   const Gpio = require('pigpio').Gpio;

Importieren Sie den Gpio-Konstruktor aus dem Paket pigpio auf diese Weise und definieren Sie dann eine Konstante ``Gpio``, die diesen Konstruktor repr√§sentiert.

Mit einer Vielzahl von Konstruktoren k√∂nnen wir mit js elektronische Ger√§te steuern.
``pigpio`` kann verwendet werden, um schnelles GPIO, PWM, Servosteuerung, Status√§nderungsbenachrichtigung und Interruptbehandlung zu implementieren.

* `pigpio - github <https://github.com/fivdi/pigpio>`_

.. Ein Wrapper f√ºr die pigpio C-Bibliothek, um mit JS auf dem Raspberry Pi Zero, 1, 2, 3 oder 4 schnelles GPIO, PWM, Servosteuerung, Status√§nderungsbenachrichtigung und Interruptbehandlung zu erm√∂glichen.

.. code-block:: js

   const led = new Gpio(17,{mode: Gpio.OUTPUT});

Das Schl√ºsselwort ``new`` wird verwendet, um instanziierte Objekte der Klasse zu konstruieren.

Verbinden Sie die LED mit dem GPIO17 des T-f√∂rmigen Erweiterungsboards, setzen Sie den LedPin-Modus auf Ausgabe und weisen Sie ihm die Konstante ``led`` zu, das hei√üt, konstruieren Sie ein GPIO17-Objekt ``led``, und sein Modus ist der Ausgabemodus.

Es gibt zwei M√∂glichkeiten, die IO-Pins auf dem Raspberry Pi zu nummerieren: BOARD-Nummer und BCM-Nummer. In unserem Projekt verwenden wir die BCM-Nummer. Jeder verwendete Kanal muss als Eingang oder Ausgang festgelegt werden.

.. code-block:: js

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);

Die Methode ``setInterval()`` kann Funktionen aufrufen oder Ausdr√ºcke mit einem festgelegten Zeitraum (in Millisekunden) berechnen. Hier √§ndern wir den Betriebszustand der LED mit einem Zeitraum von 300 ms.

*  `setInerval <https://developer.mozilla.org/en-US/docs/Web/API/setInterval>`_

Die Methode ``gpio.digitalWrite(level)`` setzt das GPIO-Level auf 1 oder 0.

.. code-block:: js

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);

Schreiben Sie den Code als Pfeilfunktion um, um den Code k√ºrzer zu machen.

* `Pfeilfunktionen <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions>`_

Ph√§nomen-Bild
--------------------

.. image:: img/image54.jpeg
    :width: 800
    :align: center