 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.1_js:

1.1.1 LED Clignotante
=====================

Introduction
--------------

Dans ce projet, nous allons apprendre √† faire clignoter une LED par programmation. En effectuant 
les bons r√©glages, votre LED peut produire une s√©rie de ph√©nom√®nes int√©ressants. Alors, allons-y.


Composants Requis
---------------------



Pour ce projet, nous avons besoin des composants suivants.

.. image:: img/blinking_led_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Sch√©ma de C√¢blage
-----------------

Dans cette exp√©rience, connectez une r√©sistance de 220Œ© √† l'anode (la longue patte de la LED), 
puis la r√©sistance √† 3,3 V, et connectez la cathode (la courte patte) de la LED √† GPIO17 du Raspberry Pi. 
Par cons√©quent, pour allumer une LED, nous devons mettre GPIO17 √† un niveau bas (0V). Nous pouvons obtenir 
ce ph√©nom√®ne par programmation.

.. image:: img/image48.png
    :width: 800
    :align: center

Proc√©dures Exp√©rimentales
-------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: img/image49.png
    :width: 800
    :align: center

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/nodejs/

.. note::
    Changez de r√©pertoire vers le chemin du code dans cette exp√©rience via ``cd``.

**√âtape 3 :** Ex√©cutez le code

.. raw:: html

   <run></run>

.. code-block::

   sudo node blink.js

.. note::
    Ici, sudo - superuser do, et python signifie ex√©cuter le fichier par Python.

Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

**√âtape 4 :** Si vous souhaitez modifier le fichier de code blink.js,
appuyez sur ``Ctrl + C`` pour arr√™ter l'ex√©cution du code. Ensuite, tapez la commande suivante pour ouvrir blink.js :

.. raw:: html

   <run></run>

.. code-block::

   nano blink.js

.. note::
    nano est un outil d'√©dition de texte. La commande est utilis√©e pour ouvrir le fichier de code blink.js avec cet outil.

Appuyez sur ``Ctrl+X`` pour quitter. Si vous avez modifi√© le code, une invite vous demandera si 
vous souhaitez enregistrer les modifications ou non. Tapez ``Y`` (enregistrer) ou ``N``
 (ne pas enregistrer).

Puis appuyez sur ``Enter`` pour quitter. Tapez √† nouveau nano blink.js pour voir l'effet apr√®s 
la modification.

**Code**

Voici le code du programme :

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);

Ou bien, √©crivez le code sous forme de fonction fl√©ch√©e plus sp√©cifique √† js :

.. code-block:: js

   const Gpio = require('pigpio').Gpio;
   const led = new Gpio(17,{mode: Gpio.OUTPUT});

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);

**Explication du code**

.. code-block:: js

   const Gpio = require('pigpio').Gpio;

Importer le constructeur Gpio dans le package pigpio de cette mani√®re, 
et ensuite d√©finir une constante ``Gpio`` pour repr√©senter ce constructeur.

Avec une vari√©t√© de constructeurs, nous pouvons utiliser js pour contr√¥ler des dispositifs √©lectroniques.
``pigpio`` peut √™tre utilis√© pour impl√©menter des GPIO rapides, le contr√¥le PWM, le contr√¥le de servo, la notification de changement d'√©tat et la gestion des interruptions.

* `pigpio - github <https://github.com/fivdi/pigpio>`_

.. Un wrapper pour la biblioth√®que C pigpio permettant de g√©rer rapidement les GPIO, 
.. le PWM, le contr√¥le de servo, la notification de changement d'√©tat et la gestion des interruptions avec JS sur le Raspberry Pi Zero, 
.. 1, 2, 3 or 4.


.. code-block:: js

   const led = new Gpio(17,{mode: Gpio.OUTPUT});

Le mot-cl√© ``new`` est utilis√© pour construire des objets instanci√©s de la classe.

Connectez la LED au GPIO17 de la carte d'extension en forme de T,
d√©finissez le mode du LedPin sur sortie et assignez-le √† la constante ``led``,
c'est-√†-dire construisez un objet GPIO17 ``led``, et son mode est le mode sortie.

Il existe deux fa√ßons de num√©roter les broches IO sur le Raspberry Pi :
num√©ro BOARD et num√©ro BCM. Dans notre projet, nous utilisons le num√©ro BCM.
Vous devez d√©finir chaque canal utilis√© comme entr√©e ou sortie.

.. code-block:: js

   function blink_led(){
      led.digitalWrite(led_state);
      led_state = !led_state;
   }

   setInterval(blink_led,300);

La m√©thode ``setInterval()`` peut appeler des fonctions ou calculer des expressions avec une p√©riode sp√©cifi√©e (en millisecondes).
Ici, nous changeons l'√©tat de fonctionnement de la LED avec une p√©riode de 300 ms.

*  `setInterval <https://developer.mozilla.org/en-US/docs/Web/API/setInterval>`_

La m√©thode ``gpio.digitalWrite(level)`` d√©finit le niveau du gpio √† 1 ou 0.

.. code-block:: js

   var led_state = 0;

   setInterval(() => {
      led.digitalWrite(led_state);
      led_state = !led_state;
   }, 300);

R√©√©crivez le code en tant que fonction fl√©ch√©e pour rendre le code plus court.

* `Arrow Functions <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions>`_

Image du Ph√©nom√®ne
-------------------------

.. image:: img/image54.jpeg
    :width: 800
    :align: center