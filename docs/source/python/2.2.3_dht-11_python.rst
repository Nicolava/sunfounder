 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.3_py:

2.2.3 DHT-11
==================

Introduction
--------------

Dans cette le√ßon, vous apprendrez √† connecter et lire les donn√©es d'un capteur de temp√©rature et d'humidit√© DHT11 √† l'aide d'un Raspberry Pi. Vous d√©couvrirez comment configurer le capteur, lire la temp√©rature en Celsius et en Fahrenheit, et obtenir des mesures d'humidit√©. Ce projet vous initie √† l'utilisation de capteurs externes, √† la gestion de donn√©es en temps r√©el et aux bases de la gestion des exceptions en Python.

Composants requis
------------------------------

Pour ce projet, nous aurons besoin des composants suivants.

.. image:: ../img/list_2.2.3_dht-11.png

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DE CE KIT
        - LIEN
    *   - Kit Rapha√´l
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_plaque_d'extension_gpio`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_plaque_d'essai`
        - |link_breadboard_buy|
    *   - :ref:`cpn_fils`
        - |link_wires_buy|
    *   - :ref:`cpn_r√©sistance`
        - |link_resistor_buy|
    *   - :ref:`cpn_capteur_d'humiture`
        - |link_humiture_buy|

Sch√©ma
-----------------

.. image:: ../img/image326.png

Installation de ``Adafruit_Blinka`` (CircuitPython)
----------------------------------------------------------------

La biblioth√®que adafruit-circuitpython-dht d√©pend de Blinka, donc veuillez installer Blinka en premier.

La particularit√© de Blinka est qu'elle permet √† du code √©crit pour CircuitPython de fonctionner de mani√®re transparente et sans effort sur des ordinateurs Linux comme le Raspberry Pi.

Cette biblioth√®que facilite l'utilisation de modules complexes comme BMP280, VL53L0X et OLED, rationalisant le processus de d√©veloppement de votre projet. Avec CircuitPython, la programmation devient plus accessible, vous permettant de vous concentrer sur la cr√©ation d'applications robustes sans n√©cessiter une connaissance approfondie du mat√©riel.

De plus, vous b√©n√©ficierez du soutien d'une large communaut√© et de diverses ressources pour aider votre apprentissage et votre d√©veloppement.

Nous vous guiderons √† travers le processus simple d'installation d'Adafruit_Blinka, pr√©parant le terrain pour que vous puissiez rapidement commencer √† travailler sur vos projets.

**Mettez √† jour votre Raspberry Pi et Python**

Avant d'installer Blinka, veuillez utiliser les commandes suivantes pour vous assurer que votre Raspberry Pi et les versions de Python sont √† jour :

.. code-block:: bash

   sudo apt-get update
   sudo apt-get upgrade

**Configurer l'environnement virtuel**

√Ä partir de Bookworm (version du syst√®me d'exploitation), les paquets install√©s via ``pip`` doivent √™tre install√©s dans un environnement virtuel Python utilisant ``venv``. Un environnement virtuel est un conteneur s√©curis√© o√π vous pouvez installer des modules tiers sans affecter ni perturber le Python de votre syst√®me.

La commande suivante cr√©era un r√©pertoire "env" dans votre r√©pertoire utilisateur (``~``) pour l'environnement Python virtuel.

.. code-block:: bash

   cd ~
   python -m venv env --system-site-packages

Vous devrez activer l'environnement virtuel √† chaque red√©marrage du Pi. Pour l'activer :

.. code-block:: bash

   source ~/env/bin/activate

Vous verrez que votre invite est maintenant pr√©fix√©e par (env) pour indiquer que vous n'utilisez plus le Python syst√®me. Au lieu de cela, vous utilisez la version de Python contenue dans votre environnement virtuel. Les modifications que vous y apportez ne poseront pas de probl√®mes √† votre Python syst√®me ; de m√™me, aucun nouveau module que vous installez dans votre environnement.

.. image:: ../img/07_activate_env.png

Pour d√©sactiver, vous pouvez utiliser ``deactivate``, mais laissez-le actif pour le moment.

**Installation automatique**

Lorsqu'il est activ√© dans l'environnement virtuel (vous verrez ``(env)`` au d√©but de la commande du terminal), ex√©cutez le code suivant dans l'ordre. Ce code ex√©cutera le script d'installation fourni par adafruit et compl√©tera automatiquement les √©tapes d'installation restantes.

.. code-block:: bash

   pip3 install --upgrade adafruit-python-shell

.. code-block:: bash

   wget https://raw.githubusercontent.com/adafruit/Raspberry-Pi-Installer-Scripts/master/raspi-blinka.py

.. code-block:: bash

   sudo -E env PATH=$PATH python3 raspi-blinka.py

Cela peut prendre quelques minutes. Lorsqu'il aura termin√©, il vous demandera si vous souhaitez red√©marrer. Appuyez directement sur Entr√©e pour red√©marrer, ou si vous souhaitez red√©marrer plus tard, entrez "n" puis appuyez sur Entr√©e. Lorsque vous serez pr√™t, red√©marrez manuellement votre raspberry pi.

.. image:: ../img/07_after_install_blinka.png

Une fois red√©marr√©, la connexion sera interrompue. Apr√®s quelques minutes, vous pourrez vous reconnecter.

Installation de la biblioth√®que
---------------------------------------------------

Avant d'installer la biblioth√®que, assurez-vous que l'environnement Python virtuel est activ√©.

.. code-block:: bash

   source ~/env/bin/activate

Installez la biblioth√®que adafruit-circuitpython-dht :

.. code-block:: bash

   pip install adafruit-circuitpython-dht

Proc√©dures exp√©rimentales
-----------------------------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/image207.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**√âtape 3 :** Avant d'ex√©cuter le code, assurez-vous d'avoir activ√© l'environnement Python virtuel avec blinka install√©.

.. raw:: html

   <run></run>

.. code-block::

    source ~/env/bin/activate

**√âtape 4 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.3_DHT.py

Apr√®s l'ex√©cution du code, le programme affichera la temp√©rature et l'humidit√© d√©tect√©es par le DHT11 sur l'√©cran de l'ordinateur.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. code-block:: python

    import time
    import board
    import adafruit_dht

    # Initialisez le dispositif dht, avec la broche de donn√©es connect√©e √† :
    dhtDevice = adafruit_dht.DHT11(board.D17)

    while True:
        try:
            # Imprimez les valeurs sur le port s√©rie
            temperature_c = dhtDevice.temperature
            temperature_f = temperature_c * (9 / 5) + 32
            humidity = dhtDevice.humidity
            print(
                "Temp: {:.1f} F / {:.1f} C    Humidit√©: {}% ".format(
                    temperature_f, temperature_c, humidity
                )
            )

        except RuntimeError as error:
            # Les erreurs se produisent assez souvent, les DHT sont difficiles √† lire, continuez simplement
            print(error.args[0])
            time.sleep(2.0)
            continue
        except Exception as error:
            dhtDevice.exit()
            raise error

        time.sleep(2.0)


**Explication du code**

#. Importation des biblioth√®ques :

   Le code commence par l'importation des biblioth√®ques n√©cessaires. ``time`` pour g√©rer les d√©lais, ``board`` pour acc√©der aux broches GPIO du Raspberry Pi, et ``adafruit_dht`` pour interagir avec le capteur DHT11. Pour plus de d√©tails sur la biblioth√®que ``adafruit_dht``, veuillez consulter |Adafruit_CircuitPython_DHT|.

   .. code-block:: python
    
      import time
      import board
      import adafruit_dht

#. Initialisation du capteur :

   Le capteur DHT11 est initialis√© avec la broche de donn√©es connect√©e au GPIO 17 du Raspberry Pi. Cette configuration est cruciale pour la communication du capteur avec le Raspberry Pi.

   .. code-block:: python

      dhtDevice = adafruit_dht.DHT11(board.D17)

#. Lecture des donn√©es du capteur en boucle :

   La boucle ``while True`` permet au programme de v√©rifier continuellement le capteur pour de nouvelles donn√©es.

   .. code-block:: python

      while True:

#. Blocs Try-Except :

   √Ä l'int√©rieur de la boucle, un bloc try-except est utilis√© pour g√©rer les erreurs d'ex√©cution potentielles. La lecture des capteurs DHT peut souvent entra√Æner des erreurs dues √† des probl√®mes de synchronisation ou √† des particularit√©s du capteur.

   .. code-block:: python

      try:
          # Code de lecture des donn√©es du capteur ici
      except RuntimeError as error:
          # Gestion des erreurs de lecture courantes
          print(error.args[0])
          time.sleep(2.0)
          continue
      except Exception as error:
          # Gestion des autres exceptions et sortie
          dhtDevice.exit()
          raise error

#. Lecture et affichage des donn√©es du capteur :

   La temp√©rature et l'humidit√© sont lues du capteur et converties en formats lisibles par l'homme. La temp√©rature est √©galement convertie de Celsius en Fahrenheit.

   .. code-block:: python

      temperature_c = dhtDevice.temperature
      temperature_f = temperature_c * (9 / 5) + 32
      humidity = dhtDevice.humidity
      print("Temp: {:.1f} F / {:.1f} C    Humidit√©: {}% ".format(temperature_f, temperature_c, humidity))

#. Gestion des erreurs de lecture :

   Le capteur DHT11 peut souvent retourner des erreurs, donc le code utilise un bloc try-except pour g√©rer ces erreurs. Si une erreur se produit, le programme attend 2 secondes avant de tenter √† nouveau de lire les donn√©es du capteur.

   .. code-block:: python

      except RuntimeError as error:
          print(error.args[0])
          time.sleep(2.0)
          continue

#. Gestion des exceptions g√©n√©rales :

   Toute autre exception pouvant survenir est g√©r√©e en sortant en toute s√©curit√© du capteur et en r√©exposant l'erreur. Cela garantit que le programme ne continue pas dans un √©tat instable.

   .. code-block:: python

      except Exception as error:
          dhtDevice.exit()
          raise error

#. D√©lai entre les lectures :

   Un d√©lai de 2 secondes est ajout√© √† la fin de la boucle pour √©viter un sondage constant du capteur, ce qui peut conduire √† des lectures erron√©es.

   .. code-block:: python

      time.sleep(2.0)

Image du Ph√©nom√®ne
------------------------

.. image:: ../img/image209.jpeg