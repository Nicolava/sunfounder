.. nota::

    ¬°Hola, bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y vistas previas.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _2.2.3_py:

2.2.3 DHT-11
===============

Introducci√≥n
------------------

El sensor digital de temperatura y humedad DHT11 es un sensor compuesto que 
contiene una salida de se√±al digital calibrada de temperatura y humedad. 
Se aplica la tecnolog√≠a de m√≥dulos digitales dedicados y la tecnolog√≠a de 
detecci√≥n de temperatura y humedad para asegurar que el producto tenga alta 
fiabilidad y excelente estabilidad.

Los sensores incluyen un sensor resistivo de elemento h√∫medo y un sensor de 
temperatura NTC, y est√°n conectados a un microcontrolador de alto rendimiento 
de 8 bits.

Componentes necesarios
---------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/list_2.2.3_dht-11.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - COMPONENTES EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_humiture_sensor`
        - |link_humiture_buy|

Diagrama esquem√°tico
---------------------------

.. image:: ../img/image326.png


Procedimientos experimentales
------------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/image207.png

**Paso 2:** Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Paso 3:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.3_DHT.py

Despu√©s de ejecutar el c√≥digo, el programa imprimir√° la temperatura y la humedad 
detectadas por el DHT11 en la pantalla de la computadora.

**C√≥digo**

.. nota::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.


.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    dhtPin = 17

    GPIO.setmode(GPIO.BCM)

    MAX_UNCHANGE_COUNT = 100

    STATE_INIT_PULL_DOWN = 1
    STATE_INIT_PULL_UP = 2
    STATE_DATA_FIRST_PULL_DOWN = 3
    STATE_DATA_PULL_UP = 4
    STATE_DATA_PULL_DOWN = 5

    def readDht11():
        GPIO.setup(dhtPin, GPIO.OUT)
        GPIO.output(dhtPin, GPIO.HIGH)
        time.sleep(0.05)
        GPIO.output(dhtPin, GPIO.LOW)
        time.sleep(0.02)
        GPIO.setup(dhtPin, GPIO.IN, GPIO.PUD_UP)

        unchanged_count = 0
        last = -1
        data = []
        while True:
            current = GPIO.input(dhtPin)
            data.append(current)
            if last != current:
                unchanged_count = 0
                last = current
            else:
                unchanged_count += 1
                if unchanged_count > MAX_UNCHANGE_COUNT:
                    break

        state = STATE_INIT_PULL_DOWN

        lengths = []
        current_length = 0

        for current in data:
            current_length += 1

            if state == STATE_INIT_PULL_DOWN:
                if current == GPIO.LOW:
                    state = STATE_INIT_PULL_UP
                else:
                    continue
            if state == STATE_INIT_PULL_UP:
                if current == GPIO.HIGH:
                    state = STATE_DATA_FIRST_PULL_DOWN
                else:
                    continue
            if state == STATE_DATA_FIRST_PULL_DOWN:
                if current == GPIO.LOW:
                    state = STATE_DATA_PULL_UP
                else:
                    continue
            if state == STATE_DATA_PULL_UP:
                if current == GPIO.HIGH:
                    current_length = 0
                    state = STATE_DATA_PULL_DOWN
                else:
                    continue
            if state == STATE_DATA_PULL_DOWN:
                if current == GPIO.LOW:
                    lengths.append(current_length)
                    state = STATE_DATA_PULL_UP
                else:
                    continue
        if len(lengths) != 40:
            #print ("Datos no v√°lidos, omitir")
            return False

        shortest_pull_up = min(lengths)
        longest_pull_up = max(lengths)
        halfway = (longest_pull_up + shortest_pull_up) / 2
        bits = []
        the_bytes = []
        byte = 0

        for length in lengths:
            bit = 0
            if length > halfway:
                bit = 1
            bits.append(bit)
        #print ("bits: %s, length: %d" % (bits, len(bits)))
        for i in range(0, len(bits)):
            byte = byte << 1
            if (bits[i]):
                byte = byte | 1
            else:
                byte = byte | 0
            if ((i + 1) % 8 == 0):
                the_bytes.append(byte)
                byte = 0
        #print (the_bytes)
        checksum = (the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3]) & 0xFF
        if the_bytes[4] != checksum:
            #print ("Datos no v√°lidos, omitir")
            return False

        return the_bytes[0], the_bytes[2]

    def main():

        while True:
            result = readDht11()
            if result:
                humidity, temperature = result
                print ("humidity: %s %%,  Temperature: %s ‚ÑÉ" % (humidity, temperature))
            time.sleep(1)

    def destroy():
        GPIO.cleanup()

    if __name__ == '__main__':
        try:
            main()
        except KeyboardInterrupt:
            destroy() 

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    def readDht11():
        GPIO.setup(dhtPin, GPIO.OUT)
        GPIO.output(dhtPin, GPIO.HIGH)
        time.sleep(0.05)
        GPIO.output(dhtPin, GPIO.LOW)
        time.sleep(0.02)
        GPIO.setup(dhtPin, GPIO.IN, GPIO.PUD_UP)
        unchanged_count = 0
        last = -1
        data = []
        #...

Esta funci√≥n se utiliza para implementar las funciones del DHT11. Almacena los datos 
detectados en la matriz the_bytes[]. El DHT11 transmite datos de 40 bits a la vez. 
Los primeros 16 bits est√°n relacionados con la humedad, los 16 bits del medio est√°n 
relacionados con la temperatura, y los √∫ltimos ocho bits se utilizan para la verificaci√≥n. 
El formato de los datos es:

**8 bits de datos enteros de humedad** + **8 bits de datos decimales de humedad** 
+ **8 bits de datos enteros de temperatura** + **8 bits de datos decimales de temperatura** 
+ **8 bits de bits de verificaci√≥n**.

Cuando se detecta la validez a trav√©s del bit de verificaci√≥n, la funci√≥n devuelve 
dos resultados: 1. error; 2. humedad y temperatura.

.. code-block:: python

    checksum = (the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3]) & 0xFF
    if the_bytes[4] != checksum:
        #print ("Data not good, skip")
        return False

    return the_bytes[0], the_bytes[2]

Por ejemplo, si los datos recibidos son 00101011 (valor de 8 bits del entero de humedad) 
00000000 (valor de 8 bits del decimal de humedad) 00111100 (valor de 8 bits del entero de 
temperatura) 00000000 (valor de 8 bits del decimal de temperatura) 01100111 (bit de verificaci√≥n)
**C√°lculo:**

00101011 + 00000000 + 00111100 + 00000000 = 01100111.

Si el resultado final es diferente al bit de verificaci√≥n, la transmisi√≥n 
de datos es anormal: devuelve False.

Si el resultado final es igual al bit de verificaci√≥n, los datos recibidos 
son correctos, entonces se devolver√°n the_bytes[0] y the_bytes[2], y se mostrar√° 
‚ÄúHumedad = 43%, Temperatura = 60¬∞C‚Äù.

Imagen del Fen√≥meno
------------------------

.. image:: ../img/image209.jpeg