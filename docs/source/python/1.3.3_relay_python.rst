.. _1.3.3_py:

1.3.3 リレー
==============

はじめに
-----------

このプロジェクトでは、リレーの使い方を学びます。リレーは自動制御システムで一般的に使用されるコンポーネントの一つです。電圧、電流、温度、圧力などが設定値に達する、超える、またはそれ以下になると、リレーは回路を接続または遮断し、装置を制御および保護します。

必要な部品
------------------------------

このプロジェクトで必要なコンポーネントは以下のとおりです。

.. image:: ../img/list_1.3.4.png

一式をまとめて購入するのが便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前	
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`トランジスタ`
        - |link_transistor_buy|
    *   - :ref:`リレー`
        - |link_relay_buy|
    *   - :ref:`ダイオード`
        - |link_diode_buy|

回路図
--------

.. image:: ../img/image345.png

実験手順
----------

**ステップ1:** 回路を組み立てる。

.. image:: ../img/image144.png

**ステップ2:** コードファイルを開く。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**ステップ3:** 実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.3_Relay.py

コードが実行中の間、LEDが点灯します。また、通常閉回路が切れて通常開回路が閉じることによる「カチカチ」という音が聞こえます。

**コード**

.. note::

    以下のコードは **修正/リセット/コピー/実行/停止** が可能です。ただし、その前に ``raphael-kit/python`` などのソースコードのパスに移動する必要があります。コードを修正した後、そのまま実行して効果を確認できます。

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import time

    # Set GPIO17 as control pin
    relayPin = 17

    # Define a setup function for some setup
    def setup():
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set relayPin's mode to output,
        # and initial level to High(3.3v)
        GPIO.setup(relayPin, GPIO.OUT, initial=GPIO.HIGH)

    # Define a main function for main process
    def main():
        while True:
            print ('Relay open...')
            # Tick
            GPIO.output(relayPin, GPIO.LOW)
            time.sleep(1)
            print ('...Relay close')
            # Tock
            GPIO.output(relayPin, GPIO.HIGH)
            time.sleep(1)

    # Define a destroy function for clean up everything after
    # the script finished
    def destroy():
        # Turn off LED
        GPIO.output(relayPin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()                    

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the child program
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

**コードの説明**

.. code-block:: python

    GPIO.output(relayPin, GPIO.LOW)

トランジスタのピンを低レベルに設定して、リレーを開く。LEDは点灯しない。

.. code-block:: python

    time.sleep(1)

1秒待機。

.. code-block:: python

    GPIO.output(relayPin, GPIO.HIGH)

トランジスタのピンを低レベルに設定して、リレーを動作させる。LEDが点灯する。

現象の画像
------------

.. image:: ../img/image145.jpeg