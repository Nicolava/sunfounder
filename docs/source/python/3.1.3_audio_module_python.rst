.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci l'esplorazione del Raspberry Pi, Arduino ed ESP32 con altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Accedi in anteprima agli annunci di nuovi prodotti e alle anticipazioni esclusive.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni e omaggi festivi**: Partecipa a omaggi e promozioni speciali durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _3.1.3_py:

3.1.3 Modulo Audio
=====================

Introduzione
-----------------

In questo progetto, realizzeremo uno stereo fai-da-te con un modulo amplificatore di potenza audio, altoparlanti da 8ohm/2W e un cavo audio da 3,5mm.

Componenti necessari
------------------------------

In questo progetto avremo bisogno dei seguenti componenti.

.. image:: ../img/audio2.png
  :width: 700
  :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-

Procedura sperimentale
------------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/4.1.4fritzing.png
    :width: 800
    :align: center

Dopo aver costruito il circuito secondo lo schema sopra, collega il cavo audio al jack audio da 3,5 mm del Raspberry Pi.

.. image:: ../img/audio4.png
    :width: 400
    :align: center

**Passo 2:** Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    python3 3.1.3_AudioModule.py

Dopo l'esecuzione del codice, potrai goderti la musica.

.. note::

    Se il tuo altoparlante non emette suono, potrebbe essere perch√© il Raspberry Pi ha selezionato l'uscita audio sbagliata (il valore predefinito √® HDMI), dovrai :ref:`change_audio_output` su Cuffie.

    Se ritieni che il volume degli altoparlanti sia troppo basso, puoi :ref:`adjust_volume`.

**Codice**

.. note::
    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima di farlo, devi andare nel percorso del codice sorgente, come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

    from pygame import mixer
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    mixer.init()
    
    def main():
        mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
        mixer.music.set_volume(0.7)
        mixer.music.play()
        while True:
            pass# Don't do anything.
    
    def destroy():
        mixer.music.stop()
    
    if __name__ == '__main__':
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Spiegazione del Codice**

.. code-block:: python

    from pygame import mixer

    mixer.init()

Importa il metodo ``mixer`` dalla libreria ``pygame`` e inizializza il metodo.

.. code-block:: python

    mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
    mixer.music.set_volume(0.7)
    mixer.music.play()


Questo codice legge il file ``my_music.mp3`` nella directory ``~/raphael-kit/music`` e imposta il volume a 0.7 (l'intervallo √® 0~1). 
Quando viene chiamato ``mixer.music.play()``, il Raspberry Pi inizier√† a riprodurre l'audio.

.. note::
    
    Puoi anche caricare altri file musicali sul tuo Raspberry Pi. Per un tutorial dettagliato, fai riferimento a: :ref:`filezilla`

.. code-block:: python

    mixer.music.stop()

Chiamando ``mixer.music.stop()`` si interrompe la riproduzione audio.
Inoltre, puoi mettere in pausa con ``mixer.music.pause()`` e continuare con ``mixer.music.unpause()``.

**Immagine del fenomeno**
-----------------------------

.. image:: ../img/3.1.3audio.JPG
   :align: center

