.. _3.1.3_py:

3.1.3 Audiomodul
=====================

Einführung
-----------------

In diesem Projekt erstellen wir ein DIY-Stereo mit einem Audioverstärkermodul, 8 Ohm/2W-Lautsprechern und einem 3,5 mm Audiokabel.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../img/audio2.png
  :width: 700
  :align: center

Es ist definitiv praktisch, ein gesamtes Kit zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`audio_speaker`
        - \-

Experimentelle Verfahren
----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../img/4.1.4fritzing.png
    :width: 800
    :align: center

Nachdem Sie den Schaltkreis gemäß dem obigen Diagramm erstellt haben, stecken Sie das Audiokabel in die 3,5 mm Audiobuchse des Raspberry Pi.

.. image:: ../img/audio4.png
    :width: 400
    :align: center

**Schritt 2:** Navigieren Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Schritt 3:** Ausführen.

.. raw:: html

   <run></run>

.. code-block::

    python3 3.1.3_AudioModule.py

Nachdem der Code ausgeführt wurde, können Sie die Musik genießen.

.. note::

    Wenn Ihr Lautsprecher keinen Ton hat, liegt das möglicherweise daran, dass der Raspberry Pi den falschen Audioausgang ausgewählt hat (Standard ist HDMI). Sie müssen dann :ref:`change_audio_output` auf Kopfhörer ändern.

    Wenn Sie das Gefühl haben, dass die Lautstärke der Lautsprecher zu niedrig ist, können Sie :ref:`adjust_volume` einstellen.

**Code**

.. note::
    Sie können den untenstehenden Code **Ändern/Zurücksetzen/Kopieren/Ausführen/Stoppen**. Bevor Sie das tun, müssen Sie jedoch zum Quellcodepfad wie ``raphael-kit/python`` navigieren. Nachdem Sie den Code geändert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

    from pygame import mixer
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    mixer.init()
    
    def main():
        mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
        mixer.music.set_volume(0.7)
        mixer.music.play()
        while True:
            pass# Don't do anything.
    
    def destroy():
        mixer.music.stop()
    
    if __name__ == '__main__':
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Code-Erklärung**

.. code-block:: python

    from pygame import mixer

    mixer.init()

Hier wird die Methode ``mixer`` aus der ``pygame``-Bibliothek importiert und die Methode initialisiert.

.. code-block:: python

    mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
    mixer.music.set_volume(0.7)
    mixer.music.play()

Dieser Code liest die Datei ``my_music.mp3`` im Verzeichnis ``~/raphael-kit/music`` und stellt die Lautstärke auf 0,7 ein (der Bereich liegt zwischen 0~1). 
Der Raspberry Pi beginnt mit der Audio-Wiedergabe, wenn ``mixer.music.play()`` aufgerufen wird.

.. note::
    
    Sie können auch andere Musikdateien auf Ihren Raspberry Pi hochladen. Für ein detailliertes Tutorial verweisen Sie bitte auf: :ref:`filezilla`

.. code-block:: python

    mixer.music.stop()

Durch Aufrufen von ``mixer.music.stop()`` wird die Audiowiedergabe gestoppt.
Zusätzlich können Sie mit ``mixer.music.pause()`` pausieren und mit ``mixer.music.unpause()`` fortsetzen.

Phänomen-Bild
------------------------

.. image:: ../img/3.1.3audio.JPG
   :align: center
