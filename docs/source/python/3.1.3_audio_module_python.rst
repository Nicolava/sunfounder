.. note::

    ¡Hola, bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previews exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    👉 ¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y únete hoy mismo.

.. _3.1.3_py:

3.1.3 Módulo de Audio
=========================

Introducción
--------------------

En este proyecto, vamos a construir un estéreo DIY con un módulo amplificador de audio, altavoces de 8ohm/2w y un cable de audio de 3.5mm.


Componentes necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/audio2.png
  :width: 700
  :align: center

Es definitivamente conveniente comprar un kit completo, aquí está el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

También puedes comprarlos por separado en los enlaces a continuación.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCIÓN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-

Procedimientos experimentales
----------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/4.1.4fritzing.png
    :width: 800
    :align: center

Después de construir el circuito según el diagrama anterior, conecta el cable de audio en la salida de 3.5mm de la Raspberry Pi.

.. image:: ../img/audio4.png
    :width: 400
    :align: center

**Paso 2:** Ve a la carpeta del código.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Paso 3:** Ejecuta el código.

.. raw:: html

   <run></run>

.. code-block::

    python3 3.1.3_AudioModule.py

Después de ejecutar el código, puedes disfrutar de la música.

.. note::

    Si tus altavoces no tienen sonido, puede ser porque la Raspberry Pi ha seleccionado la salida de audio incorrecta (el predeterminado es HDMI), necesitas :ref:`change_audio_output` a auriculares.

    Si sientes que el volumen de los altavoces es demasiado bajo, puedes :ref:`adjust_volume`.

**Código**

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el código a continuación. Pero antes de eso, necesitas ir a la ruta del código fuente como ``raphael-kit/python``. Después de modificar el código, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    from pygame import mixer
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    mixer.init()
    
    def main():
        mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
        mixer.music.set_volume(0.7)
        mixer.music.play()
        while True:
            pass# Don't do anything.
    
    def destroy():
        mixer.music.stop()
    
    if __name__ == '__main__':
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Explicación del Código**

.. code-block:: python

    from pygame import mixer

    mixer.init()

Importa el método ``mixer`` de la biblioteca ``pygame`` e inicializa el método.

.. code-block:: python

    mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
    mixer.music.set_volume(0.7)
    mixer.music.play()

Este código lee el archivo ``my_music.mp3`` en el directorio ``~/raphael-kit/music`` y ajusta el volumen a 0.7 (el rango es 0~1). 
La Raspberry Pi comenzará a reproducir audio cuando se llame a ``mixer.music.play()``.

.. note::
    
    También puedes subir otros archivos de música a tu Raspberry Pi. Para un tutorial detallado, consulta: :ref:`filezilla`

.. code-block:: python

    mixer.music.stop()

Llamar a ``mixer.music.stop()`` detendrá la reproducción de audio.
Además, también puedes pausar con ``mixer.music.pause()`` y continuar con ``mixer.music.unpause()``.

**Imagen del Fenómeno**
---------------------------

.. image:: ../img/3.1.3audio.JPG
   :align: center
