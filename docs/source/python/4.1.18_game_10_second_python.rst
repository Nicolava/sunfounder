.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _4.1.18_py:


4.1.18 SPIEL - 10 Sekunden
=================================

Einf√ºhrung
-------------------

Kommen Sie mit und erstellen Sie ein Spielger√§t, das Ihre Konzentration herausfordert. Binden Sie den Neigungsschalter an einen Stab, um einen Zauberstab zu formen. Sch√ºtteln Sie den Zauberstab, beginnt die 4-stellige Anzeige mit dem Z√§hlen. Ein weiteres Sch√ºtteln stoppt das Z√§hlen. Wenn Sie es schaffen, dass die Anzeige genau **10.00** zeigt, haben Sie gewonnen. Spielen Sie das Spiel mit Ihren Freunden und finden Sie heraus, wer der Zeitmagier ist.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../img/list_GAME_10_Second.png
    :align: center

Es ist sicherlich praktisch, ein ganzes Kit zu kaufen, hier ist der Link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-

Schaltplan
------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../img/Schematic_three_one13.png
   :align: center

Experimentelle Verfahren
---------------------------------

**Schritt 1**: Bauen Sie den Schaltkreis.

.. image:: ../img/image277.png

**Schritt 2**: Navigieren Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Schritt 3**: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.18_GAME_10Second.py

Sch√ºtteln Sie den Zauberstab, und die 4-stellige Anzeige beginnt zu z√§hlen. Ein erneutes Sch√ºtteln stoppt das Z√§hlen. Wenn die Anzeige **10.00** zeigt, haben Sie gewonnen. Sch√ºtteln Sie es erneut, um die n√§chste Runde des Spiels zu starten.

**Code**

.. note::
    Sie k√∂nnen den untenstehenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen**. Bevor Sie das tun, m√ºssen Sie jedoch zum Quellcodepfad wie ``raphael-kit/python`` gehen. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um das Ergebnis zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time
    import threading

    sensorPin = 26

    SDI = 24
    RCLK = 23
    SRCLK = 18

    placePin = (10, 22, 27, 17)
    number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

    counter = 0
    timer =0
    gameState =0

    def clearDisplay():
        for i in range(8):
            GPIO.output(SDI, 1)
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)    

    def hc595_shift(data): 
        for i in range(8):
            GPIO.output(SDI, 0x80 & (data << i))
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)

    def pickDigit(digit):
        for i in placePin:
            GPIO.output(i,GPIO.LOW)
        GPIO.output(placePin[digit], GPIO.HIGH)

    def display():
        global counter                    
        clearDisplay() 
        pickDigit(0)  
        hc595_shift(number[counter % 10])

        clearDisplay()
        pickDigit(1)
        hc595_shift(number[counter % 100//10])

        clearDisplay()
        pickDigit(2)
        hc595_shift(number[counter % 1000//100]-0x80)

        clearDisplay()
        pickDigit(3)
        hc595_shift(number[counter % 10000//1000])

    def stateChange():
        global gameState
        global counter
        global timer1
        if gameState == 0:
            counter = 0
            time.sleep(1)
            timer() 
        elif gameState ==1:
            timer1.cancel()
            time.sleep(1)
        gameState = (gameState+1)%2

    def loop():
        global counter
        currentState = 0
        lastState = 0
        while True:
            display()
            currentState=GPIO.input(sensorPin)
            if (currentState == 0) and (lastState == 1):
                stateChange()
            lastState=currentState

    def timer():  
        global counter
        global timer1
        timer1 = threading.Timer(0.01, timer) 
        timer1.start()  
        counter += 1

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(SDI, GPIO.OUT)
        GPIO.setup(RCLK, GPIO.OUT)
        GPIO.setup(SRCLK, GPIO.OUT)
        for i in placePin:
            GPIO.setup(i, GPIO.OUT)
        GPIO.setup(sensorPin, GPIO.IN)

    def destroy():   # When "Ctrl+C" is pressed, the function is executed.
        GPIO.cleanup()
        global timer1
        timer1.cancel()

    if __name__ == '__main__':  # Program starting from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**Code-Erkl√§rung**

.. code-block:: python

    def¬†stateChange():
    ¬†¬†¬†¬†global¬†gameState
    ¬†¬†¬†¬†global¬†counter
    ¬†¬†¬†¬†global¬†timer1
    ¬†¬†¬†¬†if¬†gameState¬†==¬†0:
    ¬†¬†¬†¬†¬†¬†¬†¬†counter¬†=¬†0
    ¬†¬†¬†¬†¬†¬†¬†¬†time.sleep(1)
    ¬†¬†¬†¬†¬†¬†¬†¬†timer()¬†
    ¬†¬†¬†¬†elif¬†gameState¬†==1:
    ¬†¬†¬†¬†¬†¬†¬†¬†timer1.cancel()
    ¬†¬†¬†¬†¬†¬†¬†¬†time.sleep(1)
    ¬†¬†¬†¬†gameState¬†=¬†(gameState+1)%2

Das Spiel ist in zwei Modi unterteilt:

``gameState==0`` ist der "Start"-Modus. In diesem Modus wird die Zeit gemessen und auf der Segmentanzeige dargestellt. Durch Sch√ºtteln des Kippschalters wechselt man in den "Anzeige"-Modus.

``gameState==1`` ist der "Anzeige"-Modus. Hier wird die Zeitmessung gestoppt und die gemessene Zeit auf der Segmentanzeige angezeigt. Ein erneutes Sch√ºtteln des Kippschalters setzt den Timer zur√ºck und startet das Spiel neu.

.. code-block:: python

    def¬†loop():
    ¬†¬†¬†¬†global¬†counter
    ¬†¬†¬†¬†currentState¬†=¬†0
    ¬†¬†¬†¬†lastState¬†=¬†0
    ¬†¬†¬†¬†while¬†True:
    ¬†¬†¬†¬†¬†¬†¬†¬†display()
    ¬†¬†¬†¬†¬†¬†¬†¬†currentState=GPIO.input(sensorPin)
    ¬†¬†¬†¬†¬†¬†¬†¬†if¬†(currentState¬†==¬†0)¬†and¬†(lastState¬†==¬†1):
    ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†stateChange()
    ¬†¬†¬†¬†¬†¬†¬†¬†lastState=currentState

``loop()`` ist die Hauptfunktion. Zuerst wird die Zeit auf der 4-Bit-Segmentanzeige dargestellt und der Wert des Kippschalters ausgelesen. Wenn sich der Zustand des Kippschalters ge√§ndert hat, wird ``stateChange()`` aufgerufen.

.. code-block:: python

    def timer():  
        global counter
        global timer1
        timer1 = threading.Timer(0.01, timer) 
        timer1.start()  
        counter += 1

Nachdem das Intervall 0,01s erreicht hat, wird die Timer-Funktion aufgerufen; 1 wird zum Z√§hler hinzugef√ºgt, und der Timer wird erneut verwendet, um sich selbst alle 0,01s wiederholt auszuf√ºhren.

Ph√§nomen-Bild
-----------------------

.. image:: ../img/image278.jpeg
   :align: center



