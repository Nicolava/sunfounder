.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.2.2_py:

2.2.2 サーミスタ
=================

はじめに
----------

フォトレジスタが光を検知できるように、サーミスタは温度に反応する電子デバイスであり、熱警報のような温度制御機能を実現できます。

必要な部品
----------------------------------

このプロジェクトに必要な部品は次のとおりです。

.. image:: ../img/list_2.2.2_thermistor.png

一式を購入することで手間が省けます、リンクはこちらです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別にも購入可能です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

回路図
---------

.. image:: ../img/image323.png

.. image:: ../img/image324.png

実験手順
-------------

**ステップ 1:** 回路を組む。

.. image:: ../img/image202.png

**ステップ 2:** コードがあるフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python/

**ステップ 3:** 実行ファイルを起動する

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.2_Thermistor.py

コードが実行された後、サーミスタが周囲の温度を検知し、プログラム計算が完了すると画面に表示されます。

**コード**

.. note::

    以下のコードは **修正/リセット/コピー/実行/停止** ができます。ただし、その前に、 ``raphael-kit/python`` などのソースコードパスに移動する必要があります。コードを修正した後は、その効果を直接確認することができます。

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    import RPi.GPIO as GPIO
    import ADC0834
    import time
    import math

    def init():
        ADC0834.setup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            Vr = 5 * float(analogVal) / 255
            Rt = 10000 * Vr / (5 - Vr)
            temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
            Cel = temp - 273.15
            Fah = Cel * 1.8 + 32
            print ('Celsius: %.2f °C  Fahrenheit: %.2f ℉' % (Cel, Fah))
            time.sleep(0.2)

    if __name__ == '__main__':
        init()
        try:
            loop()
        except KeyboardInterrupt:
            ADC0834.destroy()

**コード説明**

.. code-block:: python

    import math

このライブラリは、一般的な数学的操作や変換を計算する一連の関数を定義しています。

.. code-block:: python

    analogVal = ADC0834.getResult()

この関数はサーミスタの値を読み取るために使用されます。

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)
    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
    Cel = temp - 273.15
    Fah = Cel * 1.8 + 32
    print ('Celsius: %.2f °C  Fahrenheit: %.2f ℉' % (Cel, Fah))

これらの計算は、サーミスタの値を摂氏と華氏に変換します。

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)

この2行のコードは、読み取られたアナログ値を用いてRt（サーミスタの抵抗値）を求めるための電圧分布を計算しています。

.. code-block:: python

    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))

このコードは、ケルビン温度を求めるための公式 **T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** にRtを代入しています。

.. code-block:: python

    temp = temp - 273.15

ケルビン温度を摂氏温度に変換します。

.. code-block:: python

    Fah = Cel * 1.8 + 32

摂氏温度を華氏温度に変換します。

.. code-block:: python

    print ('Celsius: %.2f °C  Fahrenheit: %.2f ℉' % (Cel, Fah))

表示に摂氏度、華氏度、およびそれらの単位を出力します。

現象の画像
------------------

.. image:: ../img/image203.jpeg