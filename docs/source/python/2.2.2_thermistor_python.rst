.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunitÃ  e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime speciali.
    - **Sconti esclusivi**: Approfitta di sconti riservati sui nostri prodotti piÃ¹ recenti.
    - **Promozioni festive e concorsi**: Partecipa a concorsi e promozioni durante le festivitÃ .

    ðŸ‘‰ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.2_py:

2.2.2 Termistore
=======================

Introduzione
------------------

Proprio come il fotoresistore puÃ² rilevare la luce, il termistore Ã¨ un
dispositivo elettronico sensibile alla temperatura che puÃ² essere
utilizzato per realizzare funzioni di controllo della temperatura, come
un allarme di calore.

Componenti Necessari
-----------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_2.2.2_thermistor.png

Ãˆ sicuramente comodo acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ARTICOLI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Schema Elettrico
--------------------

.. image:: ../img/image323.png


.. image:: ../img/image324.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image202.png

**Passo 2:** Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python/

**Passo 3:** Esegui il file eseguibile

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.2_Thermistor.py

Una volta eseguito il codice, il termistore rileverÃ  la temperatura
ambiente che verrÃ  stampata sullo schermo dopo aver completato il calcolo del programma.

**Codice**

.. note::

    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice qui sotto. Ma prima devi accedere al percorso del codice come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    import RPi.GPIO as GPIO
    import ADC0834
    import time
    import math

    def init():
        ADC0834.setup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            Vr = 5 * float(analogVal) / 255
            Rt = 10000 * Vr / (5 - Vr)
            temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
            Cel = temp - 273.15
            Fah = Cel * 1.8 + 32
            print ('Celsius: %.2f Â°C  Fahrenheit: %.2f â„‰' % (Cel, Fah))
            time.sleep(0.2)

    if __name__ == '__main__':
        init()
        try:
            loop()
        except KeyboardInterrupt:
            ADC0834.destroy()

**Spiegazione del Codice**

.. code-block:: python

    import math

Esiste una libreria numerica che dichiara un insieme di funzioni per eseguire
operazioni matematiche comuni e trasformazioni.

.. code-block:: python

    analogVal = ADC0834.getResult()

Questa funzione viene utilizzata per leggere il valore del termistore.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)
    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
    Cel = temp - 273.15
    Fah = Cel * 1.8 + 32
    print ('Celsius: %.2f Â°C  Fahrenheit: %.2f â„‰' % (Cel, Fah))

Questi calcoli convertono i valori del termistore in gradi Celsius
e gradi Fahrenheit.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)

Queste due righe di codice calcolano la distribuzione della tensione
con il valore letto da analogVal per ottenere Rt (resistenza del termistore).

.. code-block:: python

    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))

Questo codice si riferisce all'inserimento di Rt nella formula
**T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** per ottenere la temperatura in gradi Kelvin.

.. code-block:: python

    temp = temp - 273.15

Converte la temperatura in Kelvin in gradi Celsius.

.. code-block:: python

    Fah = Cel * 1.8 + 32

Converte i gradi Celsius in gradi Fahrenheit.

.. code-block:: python

    print ('Celsius: %.2f Â°C  Fahrenheit: %.2f â„‰' % (Cel, Fah))

Stampa la temperatura in gradi Celsius e Fahrenheit e le rispettive unitÃ  sul display.

Immagine del Fenomeno
------------------------

.. image:: ../img/image203.jpeg
