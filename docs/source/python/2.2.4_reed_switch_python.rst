 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.4_py:

2.2.4 Module de Commutateur √† Lame
=====================================

Introduction
----------------

Dans ce projet, nous allons d√©couvrir le commutateur √† lame, qui est un interrupteur √©lectrique fonctionnant par le biais d'un champ magn√©tique appliqu√©.

.. image:: ../img/2.2.4reed_switch.png
    :width: 300
    :align: center

Composants N√©cessaires
--------------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../img/2.2.4component.png
    :width: 700
    :align: center

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|

Sch√©ma √âlectrique
--------------------

============ ======== ======== ===
T-Board Nom  physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../img/reed_schematic.png
    :width: 400
    :align: center

.. image:: ../img/reed_schematic2.png
    :width: 400
    :align: center


Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/2.2.4fritzing.png
    :width: 700
    :align: center

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.4_ReedSwitch.py

La LED verte s'allumera lorsque le code sera ex√©cut√©. Si un aimant est plac√© pr√®s du module de commutateur √† lame, la LED rouge s'allume ; √©loignez l'aimant et la LED verte s'allume √† nouveau.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    ReedPin = 17
    Gpin    = 27
    Rpin    = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # 
        GPIO.setup(Gpin, GPIO.OUT)     # Set Green Led Pin mode to output
        GPIO.setup(Rpin, GPIO.OUT)     # Set Red Led Pin mode to output
        GPIO.setup(ReedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Set ReedPin's mode is input, and pull up to high level(3.3V)
        GPIO.add_event_detect(ReedPin, GPIO.BOTH, callback=detect, bouncetime=200)

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
        if x == 1:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)

    def detect(self):
        Led(GPIO.input(ReedPin))

    def loop():
        while True:
            pass

    def destroy():
        GPIO.output(Gpin, GPIO.HIGH)       # Green led on
        GPIO.output(Rpin, GPIO.LOW)       # Red led off
        GPIO.cleanup()                     # Release resource

    if __name__ == '__main__':     # Program start from here
        setup()
        detect()
        try:
            loop()
        except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
            destroy()
**Explication du Code**

.. code-block:: python

    ReedPin = 17
    Gpin    = 27
    Rpin    = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # 
        GPIO.setup(Gpin, GPIO.OUT)     # Set Green Led Pin mode to output
        GPIO.setup(Rpin, GPIO.OUT)     # Set Red Led Pin mode to output
        GPIO.setup(ReedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Set ReedPin's mode is input, and pull up to high level(3.3V)
        GPIO.add_event_detect(ReedPin, GPIO.BOTH, callback=detect, bouncetime=200)

Configurer les modes GPIO en num√©rotation BCM. ``ReedPin``, ``Gpin`` et ``Rpin`` sont connect√©s aux GPIO17, GPIO27 et GPIO22.

``GPIO.add_event_detect()`` est utilis√© pour ajouter un √©v√©nement d√©clench√© par un changement de la valeur (niveau) de ``ReedPin``, auquel cas la fonction de rappel ``detect()`` est appel√©e.

.. code-block:: python

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
        if x == 1:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)

D√©finir une fonction ``Led()`` pour allumer ou √©teindre les deux LEDs. Si ``x=0``, la LED rouge s'allume ; sinon, la LED verte s'allume.

.. code-block:: python

    def detect(self):
    Led(GPIO.input(ReedPin))

Dans cette fonction de rappel, la valeur du commutateur √† lame est utilis√©e pour contr√¥ler les deux LEDs.

 
Image du Ph√©nom√®ne
------------------------

.. image:: ../img/2.2.4reed_switch.JPG
    :width: 500
    :align: center