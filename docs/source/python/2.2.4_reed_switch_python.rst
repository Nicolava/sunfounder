.. note::

    ¡Hola, bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obtén acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos más nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones festivas.

    👉 ¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y únete hoy mismo.

.. _2.2.4_py:

2.2.4 Módulo de Interruptor Reed
=====================================

Introducción
-------------------

En este proyecto, aprenderemos sobre el interruptor reed, que es un interruptor eléctrico que opera mediante un campo magnético aplicado.

.. image:: ../img/2.2.4reed_switch.png
    :width: 300
    :align: center

Componentes necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/2.2.4component.png
    :width: 700
    :align: center

Es definitivamente conveniente comprar un kit completo, aquí está el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ARTÍCULOS EN ESTE KIT
        - ENLACE
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

También puedes comprarlos por separado en los enlaces a continuación.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCIÓN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|

Diagrama esquemático
-----------------------

============== ======== ======== ===
Nombre T-Board física   wiringPi BCM
GPIO17         Pin 11   0        17
GPIO27         Pin 13   2        27
GPIO22         Pin 15   3        22
============== ======== ======== ===

.. image:: ../img/reed_schematic.png
    :width: 400
    :align: center

.. image:: ../img/reed_schematic2.png
    :width: 400
    :align: center

Procedimientos experimentales
-----------------------------------

**Paso 1:** Monta el circuito.

.. image:: ../img/2.2.4fritzing.png
    :width: 700
    :align: center

**Paso 2:** Cambia de directorio.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Paso 3:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.4_ReedSwitch.py

El LED verde se encenderá cuando se ejecute el código. Si se coloca un imán cerca del módulo de interruptor reed, el LED rojo se enciende; retira el imán y el LED verde se vuelve a encender.

**Código**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el código a continuación. Pero antes, debes ir a la ruta del código fuente como ``raphael-kit/python``. Después de modificar el código, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    ReedPin = 17
    Gpin    = 27
    Rpin    = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # 
        GPIO.setup(Gpin, GPIO.OUT)     # Configurar el pin del LED verde como salida
        GPIO.setup(Rpin, GPIO.OUT)     # Configurar el pin del LED rojo como salida
        GPIO.setup(ReedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Configurar el pin del interruptor reed como entrada y activar la resistencia pull-up (3.3V)
        GPIO.add_event_detect(ReedPin, GPIO.BOTH, callback=detect, bouncetime=200)

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
        if x == 1:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)

    def detect(self):
        Led(GPIO.input(ReedPin))

    def loop():
        while True:
            pass

    def destroy():
        GPIO.output(Gpin, GPIO.HIGH)       # Encender LED verde
        GPIO.output(Rpin, GPIO.LOW)       # Apagar LED rojo
        GPIO.cleanup()                     # Liberar recursos

    if __name__ == '__main__':     # El programa empieza aquí
        setup()
        detect()
        try:
            loop()
        except KeyboardInterrupt:  # Cuando se presiona 'Ctrl+C', se ejecuta destroy()
            destroy()

**Explicación del código**

.. code-block:: python

    ReedPin = 17
    Gpin    = 27
    Rpin    = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # 
        GPIO.setup(Gpin, GPIO.OUT)     # Configurar el pin del LED verde como salida
        GPIO.setup(Rpin, GPIO.OUT)     # Configurar el pin del LED rojo como salida
        GPIO.setup(ReedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Configurar el pin del interruptor reed como entrada y activar la resistencia pull-up (3.3V)
        GPIO.add_event_detect(ReedPin, GPIO.BOTH, callback=detect, bouncetime=200)

Configura los modos GPIO en numeración BCM. ``ReedPin``, ``Gpin`` y ``Rpin`` se conectan a GPIO17, GPIO27 y GPIO22 respectivamente.

``GPIO.add_event_detect()`` se usa para agregar un evento que se activa por un cambio en el valor (nivel) de ``ReedPin``, momento en el cual se llama a la función de callback ``detect()``.

.. code-block:: python

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
        if x == 1:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)

Define una función ``Led()`` para encender o apagar los dos LEDs. Si ``x=0``, se enciende el LED rojo; de lo contrario, se encenderá el LED verde.

.. code-block:: python

    def detect(self):
    Led(GPIO.input(ReedPin))

En esta función de callback, el valor del interruptor reed se usa para controlar los dos LEDs.

 
Imagen del fenómeno
--------------------------

.. image:: ../img/2.2.4reed_switch.JPG
    :width: 500
    :align: center