.. _1.3.2_py:

1.3.2 サーボモータ
=====================

はじめに
--------------

このプロジェクトでは、サーボモータを回転させる方法を学びます。

必要な部品
-----------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/list_1.3.2.png

一式をまとめて購入すると便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個々に購入することも可能です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク
    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|

回路図
-------------

.. image:: ../img/image337.png

実験手順
---------------

**ステップ1:** 回路を組み立てます。

.. image:: ../img/image125.png

**ステップ2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**ステップ3:** 実行可能ファイルを起動します。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.2_Servo.py

プログラムが実行された後、サーボモータは0度から180度、次に180度から0度へと循環して回転します。

**コードについて**

.. note::

    下記のコードは **変更/リセット/コピー/実行/停止** が可能です。ただし、その前に ``raphael-kit/python`` のようなソースコードのパスに移動する必要があります。コードを変更した後、そのまま実行して効果を確認できます。

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    SERVO_MIN_PULSE = 500
    SERVO_MAX_PULSE = 2500
    ServoPin = 18

    def map(value, inMin, inMax, outMin, outMax):
        return (outMax - outMin) * (value - inMin) / (inMax - inMin) + outMin

    def setup():
        global p
        GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by BCM
        GPIO.setup(ServoPin, GPIO.OUT)   # Set ServoPin's mode is output
        GPIO.output(ServoPin, GPIO.LOW)  # Set ServoPin to low
        p = GPIO.PWM(ServoPin, 50)     # set Frequecy to 50Hz
        p.start(0)                     # Duty Cycle = 0
        
    def setAngle(angle):      # make the servo rotate to specific angle (0-180 degrees) 
        angle = max(0, min(180, angle))
        pulse_width = map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE)
        pwm = map(pulse_width, 0, 20000, 0, 100)
        p.ChangeDutyCycle(pwm)#map the angle to duty cycle and output it    

    def loop():
        while True:
            for i in range(0, 181, 5):   #make servo rotate from 0 to 180 deg
                setAngle(i)     # Write to servo
                time.sleep(0.002)
            time.sleep(1)
            for i in range(180, -1, -5): #make servo rotate from 180 to 0 deg
                setAngle(i)
                time.sleep(0.001)
            time.sleep(1)
    def destroy():
        p.stop()
        GPIO.cleanup()

    if __name__ == '__main__':     #Program start from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the program destroy() will be executed.
            destroy()

        

**コードの説明**

.. code-block:: python

    p = GPIO.PWM(ServoPin, 50)     # set Frequecy to 50Hz
    p.start(0)                     # Duty Cycle = 0

ServoPinをPWMピンとして設定し、周波数を50Hz、周期を20msに設定します。

p.start(0): PWM機能を実行し、初期値を0に設定します。

.. code-block:: python

    def setAngle(angle):      # make the servo rotate to specific angle (0-180 degrees) 
        angle = max(0, min(180, angle))
        pulse_width = map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE)
        pwm = map(pulse_width, 0, 20000, 0, 100)
        p.ChangeDutyCycle(pwm)#map the angle to duty cycle and output it

setAngle()という関数を作成し、0から180までの角度をサーボに書き込みます。

.. code-block:: python

    angle = max(0, min(180, angle))

このコードは、角度を0-180°の範囲内に制限するために使用されます。

min()関数は入力値の最小値を返します。
もしangleが180より大きい場合、180を返します。そうでなければ、angleを返します。

max()関数は反復可能なオブジェクト内での最大要素、または二つ以上のパラメータの最大値を返します。
もしangleが0より小さい場合、0を返します。そうでなければ、angleを返します。

.. code-block:: python

    pulse_width = map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE)
    pwm = map(pulse_width, 0, 20000, 0, 100)
    p.ChangeDutyCycle(pwm)

サーボに0〜180°の範囲を描画するため、サーボのパルス幅を0.5ms（500us）〜2.5ms（2500us）に設定します。

PWMの周期は20ms（20000us）であるため、PWMのデューティサイクルは
(500/20000)%〜(2500/20000)%であり、0〜180の範囲は2.5〜12.5にマッピングされます。

現象の画像
------------------

.. image:: ../img/image126.jpeg

