.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime esclusive.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e concorsi**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.2.2_py:

1.2.2 Cicalino Passivo
=========================

Introduzione
---------------

In questo progetto, impareremo come far suonare un cicalino passivo riproducendo musica.

Componenti Necessari
--------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_1.2.2.png

√à sicuramente comodo acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ARTICOLI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Schema Elettrico
--------------------

In questo esperimento, utilizziamo un cicalino passivo, un transistor PNP e una 
resistenza da 1k tra la base del transistor e il GPIO per proteggere il transistor.

Quando a GPIO17 vengono date frequenze diverse, il cicalino passivo emetter√† suoni 
diversi; in questo modo, il cicalino riproduce musica.

.. image:: ../img/image333.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito. (Il cicalino passivo ha una scheda verde sul retro.)

.. image:: ../img/image106.png

**Passo 2: Cambia directory.**

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Passo 3: Esegui.**

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.2.2_PassiveBuzzer.py

Dopo l'esecuzione del codice, il cicalino riproduce un pezzo di musica.

**Codice**

.. note::

    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice qui sotto. Ma prima devi accedere al percorso del codice come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    Buzzer = 11

    CL = [0, 131, 147, 165, 175, 196, 211, 248]     # Frequency of Bass tone in C major
    CM = [0, 262, 294, 330, 350, 393, 441, 495]     # Frequency of Midrange tone in C major
    CH = [0, 525, 589, 661, 700, 786, 882, 990]     # Frequency of Treble tone in C major

    song_1 = [  CM[3], CM[5], CM[6], CM[3], CM[2], CM[3], CM[5], CM[6], # Notes of song1
                CH[1], CM[6], CM[5], CM[1], CM[3], CM[2], CM[2], CM[3],
                CM[5], CM[2], CM[3], CM[3], CL[6], CL[6], CL[6], CM[1],
                CM[2], CM[3], CM[2], CL[7], CL[6], CM[1], CL[5] ]

    beat_1 = [  1, 1, 3, 1, 1, 3, 1, 1,             # Beats of song 1, 1 means 1/8 beat
                1, 1, 1, 1, 1, 1, 3, 1,
                1, 3, 1, 1, 1, 1, 1, 1,
                1, 2, 1, 1, 1, 1, 1, 1,	
                1, 1, 3 ]

    song_2 = [  CM[1], CM[1], CM[1], CL[5], CM[3], CM[3], CM[3], CM[1], # Notes of song2
                CM[1], CM[3], CM[5], CM[5], CM[4], CM[3], CM[2], CM[2],
                CM[3], CM[4], CM[4], CM[3], CM[2], CM[3], CM[1], CM[1],
                CM[3], CM[2], CL[5], CL[7], CM[2], CM[1]    ]

    beat_2 = [  1, 1, 2, 2, 1, 1, 2, 2,             # Beats of song 2, 1 means 1/8 beat
                1, 1, 2, 2, 1, 1, 3, 1,
                1, 2, 2, 1, 1, 2, 2, 1,
                1, 2, 2, 1, 1, 3 ]

    def setup():
        GPIO.setmode(GPIO.BOARD)        # Numbers GPIOs by physical location
        GPIO.setup(Buzzer, GPIO.OUT)    # Set pins' mode is output
        global Buzz                     # Assign a global variable to replace GPIO.PWM
        Buzz = GPIO.PWM(Buzzer, 440)    # 440 is initial frequency.
        Buzz.start(50)                  # Start Buzzer pin with 50% duty cycle

    def loop():
        while True:
            print ('\n    Playing song 1...')
            for i in range(1, len(song_1)):     # Play song 1
                Buzz.ChangeFrequency(song_1[i]) # Change the frequency along the song note
                time.sleep(beat_1[i] * 0.5)     # delay a note for beat * 0.5s
            time.sleep(1)                       # Wait a second for next song.

            print ('\n\n    Playing song 2...')
            for i in range(1, len(song_2)):     # Play song 1
                Buzz.ChangeFrequency(song_2[i]) # Change the frequency along the song note
                time.sleep(beat_2[i] * 0.5)     # delay a note for beat * 0.5s

    def destory():
        Buzz.stop()                 # Stop the buzzer
        GPIO.output(Buzzer, 1)      # Set Buzzer pin to High
        GPIO.cleanup()              # Release resource

    if __name__ == '__main__':      # Program start from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:   # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
            destory()

**Spiegazione del Codice**

.. code-block:: python

    CL = [0, 131, 147, 165, 175, 196, 211, 248]     # Frequenze dei toni bassi in Do maggiore
    CM = [0, 262, 294, 330, 350, 393, 441, 495]     # Frequenze dei toni medi in Do maggiore
    CH = [0, 525, 589, 661, 700, 786, 882, 990]     # Frequenze dei toni alti in Do maggiore     

Queste sono le frequenze di ogni nota. Il primo 0 √® per saltare CL[0], cos√¨ i numeri da 1 a 7 corrispondono a CDEFGAB della scala.

.. code-block:: python

    song_1 = [  CM[3], CM[5], CM[6], CM[3], CM[2], CM[3], CM[5], CM[6], 
                CH[1], CM[6], CM[5], CM[1], CM[3], CM[2], CM[2], CM[3],
                CM[5], CM[2], CM[3], CM[3], CL[6], CL[6], CL[6], CM[1],
                CM[2], CM[3], CM[2], CL[7], CL[6], CM[1], CL[5] ]

Questi array rappresentano le note di una canzone.

.. code-block:: python

    beat_1 = [  1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
                1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
                1, 1, 3 ]

Ogni battito (ogni numero) rappresenta un battito da ‚Öõ, o 0,5 secondi.

.. code-block:: python

    Buzz = GPIO.PWM(Buzzer, 440)
    Buzz.start(50)  

Definisci il pin Buzzer come pin PWM, poi imposta la sua frequenza a 440 Hz e 
Buzz.start(50) viene utilizzato per avviare il PWM con un ciclo di lavoro del 50%.

.. code-block:: python

    for i in range(1, len(song_1)): 
                Buzz.ChangeFrequency(song_1[i]) 
                time.sleep(beat_1[i] * 0.5)  

Esegui un ciclo for, poi il cicalino riprodurr√† le note nell'array song_1[] con i battiti nell'array beat_1[].

Ora puoi sentire il cicalino passivo suonare musica.

Immagine del Fenomeno
--------------------------

.. image:: ../img/image107.jpeg
