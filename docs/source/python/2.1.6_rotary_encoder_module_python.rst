 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.6_py:

2.1.6 Module de Codeur Rotatif
===================================

Introduction
---------------

Dans ce projet, vous allez d√©couvrir le module de codeur rotatif. Un codeur rotatif est un interrupteur √©lectronique qui g√©n√®re une s√©rie d'impulsions r√©guli√®res dans une s√©quence temporelle stricte. Utilis√© avec un circuit int√©gr√© (CI), il peut r√©aliser des op√©rations telles que l'incr√©mentation, la d√©cr√©mentation, le changement de page, ainsi que d'autres op√©rations comme le d√©filement de la souris, la s√©lection de menu, etc.



Composants N√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../img/Part_two_25.png

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_rotary_encoder`
        - |link_rotary_encoder_buy|

Sch√©ma √âlectrique
--------------------

.. image:: ../img/image349.png
   :align: center

Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/2.1.6_fritzing.png
   :align: center

Dans cet exemple, nous pouvons connecter directement les broches du codeur rotatif au Raspberry Pi 
en utilisant une breadboard et un c√¢ble √† 40 broches. Connectez le GND du codeur rotatif √† GND, 
„Äå+„Äç√† 5V, SW √† GPIO27 digital, DT √† GPIO18 digital et CLK √† GPIO17 digital.

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.6_RotaryEncoder.py

Vous verrez le compteur dans le terminal. Lorsque vous tournez le codeur rotatif dans le sens des 
aiguilles d'une montre, le compteur augmente ; lorsque vous le tournez dans le sens inverse, 
le compteur diminue. Si vous appuyez sur l'interrupteur du codeur rotatif, les valeurs reviendront 
√† z√©ro.

**Code**

.. note::

   Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO
   import time

   clkPin = 17    # CLK Pin
   dtPin = 18    # DT Pin
   swPin = 27    # Button Pin

   globalCounter = 0

   flag = 0
   Last_dt_Status = 0
   Current_dt_Status = 0

   def setup():
      GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
      GPIO.setup(clkPin, GPIO.IN)    # input mode
      GPIO.setup(dtPin, GPIO.IN)
      GPIO.setup(swPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

   def rotaryDeal():
      global flag
      global Last_dt_Status
      global Current_dt_Status
      global globalCounter
      Last_dt_Status = GPIO.input(dtPin)
      while(not GPIO.input(clkPin)):
         Current_dt_Status = GPIO.input(dtPin)
         flag = 1
      if flag == 1:
         flag = 0
         if (Last_dt_Status == 0) and (Current_dt_Status == 1):
            globalCounter = globalCounter - 1
         if (Last_dt_Status == 1) and (Current_dt_Status == 0):
            globalCounter = globalCounter + 1

   def swISR(channel):
      global globalCounter
      globalCounter = 0

   def loop():
      global globalCounter
      tmp = 0	# Rotary Temperary

      GPIO.add_event_detect(swPin, GPIO.FALLING, callback=swISR)
      while True:
         rotaryDeal()
         if tmp != globalCounter:
            print ('globalCounter = %d' % globalCounter)
            tmp = globalCounter

   def destroy():
      GPIO.cleanup()             # Release resource

   if __name__ == '__main__':     # Program start from here
      setup()
      try:
         loop()
      except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
         destroy()


**Analyse du Code**

* Lire la valeur de dtPin lorsque clkPin est bas.
* Lorsque clkPin est haut, si dtPin passe de bas √† haut, le compteur diminue, sinon il augmente.
* swPin produira une sortie basse lorsque l'axe est press√©.

√Ä partir de cela, le flux du programme est illustr√© ci-dessous :


.. image:: ../img/2.1.6_flow.png
   :align: center

Image du Ph√©nom√®ne
------------------

.. image:: ../img/2.1.6rotary_ecoder.JPG
   :align: center