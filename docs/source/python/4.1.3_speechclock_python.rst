 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.3_py:

4.1.3 Horloge Parlante
=============================

Introduction
---------------

Dans ce projet, nous allons cr√©er une horloge parlante avec un haut-parleur et un afficheur 7 segments √† 4 chiffres. L'afficheur 7 segments √† 4 chiffres affichera l'heure, et le haut-parleur annoncera l'heure √† chaque heure.

Composants N√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/3.1.17components.png
  :width: 800
  :align: center

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âl√©ments dans ce kit
        - Lien
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment avec les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - Introduction des composants
        - Lien d'achat

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|


Sch√©ma de Connexion
-----------------------

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
============ ======== ======== ===

.. image:: ../img/schmatic_4_digit.png

.. image:: ../img/3.1.17_schematic.png
  :width: 500
  :align: center



Proc√©dures Exp√©rimentales
------------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/3.1.17fritzing.png
  :width: 900
  :align: center

Avant ce projet, vous devez vous assurer que vous avez compl√©t√© :ref:`3.1.4_py`.

**√âtape 2 :** Utilisez la commande ``date`` pour afficher l'heure locale.

.. raw:: html

   <run></run>

.. code-block:: 

    date

Si l'heure locale est diff√©rente de l'heure r√©elle, vous devez utiliser la commande suivante pour d√©finir le fuseau horaire.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo dpkg-reconfigure tzdata

Choisissez votre fuseau horaire.

.. image:: ../img/tzdata.png

**√âtape 3 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    python3 4.1.3_SpeechClock.py

Lorsque le code est ex√©cut√©, l'afficheur 7 segments √† 4 chiffres affichera l'heure et sonnera √† chaque heure.

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    from tts import TTS
    import time

    tts = TTS(engine="espeak")
    tts.lang('en-US')

    SDI = 24
    RCLK = 23
    SRCLK = 18

    placePin = (10, 22, 27, 17)
    number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(SDI, GPIO.OUT)
        GPIO.setup(RCLK, GPIO.OUT)
        GPIO.setup(SRCLK, GPIO.OUT)
        for i in placePin:
            GPIO.setup(i, GPIO.OUT)

    def clearDisplay():
        for i in range(8):
            GPIO.output(SDI, 1)
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)    

    def hc595_shift(data): 
        for i in range(8):
            GPIO.output(SDI, 0x80 & (data << i))
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)

    def pickDigit(digit):
        for i in placePin:
            GPIO.output(i,GPIO.LOW)
        GPIO.output(placePin[digit], GPIO.HIGH)

    def loop():
        status = 0                   
        while True:
            time.localtime(time.time())
            hour = int(time.strftime('%H',time.localtime(time.time())))
            minute = int(time.strftime('%M',time.localtime(time.time())))

            clearDisplay() 
            pickDigit(0)  
            hc595_shift(number[minute % 10])
            
            clearDisplay()
            pickDigit(1)
            hc595_shift(number[minute % 100//10])

            clearDisplay()
            pickDigit(2)
            hc595_shift(number[hour % 10])

            clearDisplay()
            pickDigit(3)
            hc595_shift(number[hour % 100//10])

            if minute == 0 and status == 0:
                tts.say('The time is now ' + str(hour) + ' hours and ' + str(minute) + ' minutes')
                status = 1
            elif minute != 0:
                status = 0

    def destroy():   # Lorsque "Ctrl+C" est press√©, la fonction est ex√©cut√©e.
        GPIO.cleanup()

    if __name__ == '__main__':  # Programme d√©marrant d'ici
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    time.localtime(time.time())
    hour = int(time.strftime('%H',time.localtime(time.time())))
    minute = int(time.strftime('%M',time.localtime(time.time())))

Gr√¢ce √† la fonction ``time.time()``, nous pouvons obtenir le timestamp de l'heure actuelle (le nombre de secondes en virgule flottante √©coul√©es depuis l'√©poque de 1970), puis utiliser la m√©thode de formatage temporel du module time ``(time.localtime(time.time()))`` pour traiter le timestamp actuel, afin que nous puissions formater le timestamp en heure locale.

Le r√©sultat en entr√©e est :

``time.struct_time(tm_year=2021, tm_mon=5, tm_mday=28, tm_hour=13, tm_min=54, tm_sec=26, tm_wday=4, tm_yday=148, tm_isdst=0)``

Enfin, nous utilisons la m√©thode ``time.strftime()`` pour formater la grande cha√Æne d'informations dans le format souhait√©. Si vous voulez obtenir l'heure actuelle, vous pouvez le faire via la fonction ``time.strftime('%H',time.localtime(time.time()))``.

La sortie des cha√Ænes de format sp√©cifi√©es obtenues en modifiant le premier param√®tre est list√©e ci-dessous.

+----+----------------------------------------------------+
| %y | Repr√©sentation de l'ann√©e √† deux chiffres (00-99)  |
+----+----------------------------------------------------+
| %Y | Repr√©sentation de l'ann√©e √† quatre chiffres (000-9999)|
+----+----------------------------------------------------+
| %m | Mois (01-12)                                       |
+----+----------------------------------------------------+
| %H | Jour du mois (0-31)                                |
+----+----------------------------------------------------+
| %I | Heures dans une horloge de 24 heures (0-23)        |
+----+----------------------------------------------------+
| %M | Heures dans une horloge de 12 heures (01-12)       |
+----+----------------------------------------------------+
| %y | Minutes (00-59)                                    |
+----+----------------------------------------------------+
| %S | Secondes (00-59)                                   |
+----+----------------------------------------------------+
| %a | Nom local abr√©g√© du jour de la semaine             |
+----+----------------------------------------------------+
| %A | Nom complet local du jour de la semaine            |
+----+----------------------------------------------------+
| %b | Nom local abr√©g√© du mois                           |
+----+----------------------------------------------------+
| %B | Nom complet local du mois                          |
+----+----------------------------------------------------+
| %c | Affichage local de la date et de l'heure           |
+----+----------------------------------------------------+
| %j | Jour de l'ann√©e (001-366)                          |
+----+----------------------------------------------------+
| %p | √âquivalent local de A.M. ou P.M.                   |
+----+----------------------------------------------------+
| %U | Nombre de semaines d'une ann√©e (00-53) commen√ßant par dimanche |
+----+----------------------------------------------------+
| %w | Semaine (0-6), commen√ßant par dimanche             |
+----+----------------------------------------------------+
| %W | Nombre de semaines d'une ann√©e (00-53) commen√ßant par lundi |
+----+----------------------------------------------------+
| %x | Repr√©sentation locale de la date correspondante    |
+----+----------------------------------------------------+
| %X | Repr√©sentation locale de l'heure correspondante    |
+----+----------------------------------------------------+
| %Z | Nom du fuseau horaire actuel                       |
+----+----------------------------------------------------+

.. note::
    La sortie de la m√©thode ``time.strftime()`` est constitu√©e de variables de cha√Æne de caract√®res. Avant de l'utiliser, n'oubliez pas de faire une conversion de type forc√©e.

.. code-block:: python

    clearDisplay() 
    pickDigit(0)  
    hc595_shift(number[minute % 10])
    
    clearDisplay()
    pickDigit(1)
    hc595_shift(number[minute % 100//10])

    clearDisplay()
    pickDigit(2)
    hc595_shift(number[hour % 10])

    clearDisplay()
    pickDigit(3)
    hc595_shift(number[hour % 100//10])

Les dizaines de l'heure sont affich√©es sur le premier afficheur 7 segments, et les unit√©s 
sur le deuxi√®me. Ensuite, les dizaines des minutes sont affich√©es sur le troisi√®me afficheur, 
et les unit√©s sur le dernier.

.. code-block:: python

    if minute == 0 and status == 0:
        tts.say('The time is now ' + str(hour) + ' hours and ' + str(minute) + ' minutes')
        status = 1
    elif minute != 0:
        status = 0

Lorsque le nombre de minutes est 0 (√† l'heure), le Raspberry Pi utilisera TTS pour annoncer l'heure.


Image de Ph√©nom√®ne
------------------------

.. image:: ../img/4.1.3speech_clock.JPG
   :align: center
