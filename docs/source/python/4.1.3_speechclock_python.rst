.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci l'esplorazione del Raspberry Pi, Arduino ed ESP32 con altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Accedi in anteprima agli annunci di nuovi prodotti e alle anticipazioni esclusive.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni e omaggi festivi**: Partecipa a omaggi e promozioni speciali durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _4.1.3_py:

4.1.3 Orologio parlante
=============================

Introduzione
------------------

In questo progetto, realizziamo un orologio vocale con un altoparlante e un display a 7 segmenti a 4 cifre. Il display mostrer√† l'ora, mentre l'altoparlante annuncer√† l'ora ogni ora.

Componenti necessari
------------------------------

In questo progetto avremo bisogno dei seguenti componenti.

.. image:: ../img/3.1.17components.png
  :width: 800
  :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

Schema elettrico
--------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
============ ======== ======== ===

.. image:: ../img/schmatic_4_digit.png

.. image:: ../img/3.1.17_schematic.png
  :width: 500
  :align: center

Procedura sperimentale
------------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/3.1.17fritzing.png
  :width: 900
  :align: center

Prima di iniziare questo progetto, assicurati di aver completato :ref:`3.1.4_py`.

**Passo 2:** Utilizza il comando ``date`` per visualizzare l'ora locale.

.. raw:: html

   <run></run>

.. code-block:: 

    date

Se l'ora locale √® diversa dall'ora reale, utilizza il seguente comando per impostare il fuso orario.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo dpkg-reconfigure tzdata

Scegli il tuo fuso orario.

.. image:: ../img/tzdata.png

**Passo 3:** Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    python3 4.1.3_SpeechClock.py

Una volta eseguito il codice, il display a 7 segmenti a 4 cifre mostrer√† l'ora e suoner√† ogni ora.

**Codice**

.. note::
    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima di farlo, devi andare nel percorso del codice sorgente, come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    from tts import TTS
    import time

    tts = TTS(engine="espeak")
    tts.lang('en-US')

    SDI = 24
    RCLK = 23
    SRCLK = 18

    placePin = (10, 22, 27, 17)
    number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(SDI, GPIO.OUT)
        GPIO.setup(RCLK, GPIO.OUT)
        GPIO.setup(SRCLK, GPIO.OUT)
        for i in placePin:
            GPIO.setup(i, GPIO.OUT)

    def clearDisplay():
        for i in range(8):
            GPIO.output(SDI, 1)
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)    

    def hc595_shift(data): 
        for i in range(8):
            GPIO.output(SDI, 0x80 & (data << i))
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)

    def pickDigit(digit):
        for i in placePin:
            GPIO.output(i,GPIO.LOW)
        GPIO.output(placePin[digit], GPIO.HIGH)

    def loop():
        status = 0                   
        while True:
            time.localtime(time.time())
            hour = int(time.strftime('%H',time.localtime(time.time())))
            minute = int(time.strftime('%M',time.localtime(time.time())))

            clearDisplay() 
            pickDigit(0)  
            hc595_shift(number[minute % 10])
            
            clearDisplay()
            pickDigit(1)
            hc595_shift(number[minute % 100//10])

            clearDisplay()
            pickDigit(2)
            hc595_shift(number[hour % 10])

            clearDisplay()
            pickDigit(3)
            hc595_shift(number[hour % 100//10])

            if minute == 0 and status == 0:
                tts.say('The time is now ' + str(hour) + ' hours and ' + str(minute) + ' minutes')
                status = 1
            elif minute != 0:
                status = 0

    def destroy():   # Quando viene premuto "Ctrl+C", la funzione viene eseguita.
        GPIO.cleanup()

    if __name__ == '__main__':  # Il programma inizia qui
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**Spiegazione del Codice**

.. code-block:: python

    time.localtime(time.time())
    hour = int(time.strftime('%H',time.localtime(time.time())))
    minute = int(time.strftime('%M',time.localtime(time.time())))

Attraverso la funzione ``time.time()``, possiamo ottenere il timestamp dell'ora corrente (il numero di secondi in virgola mobile trascorsi dall'epoca del 1970), e quindi utilizzare il metodo di formattazione dell'ora del modulo time ``(time.localtime(time.time()))`` per elaborare il timestamp corrente, in modo da poter formattare il timestamp come ora locale. 

Il risultato dell'input √®:

``time.struct_time(tm_year=2021, tm_mon=5, tm_mday=28, tm_hour=13, tm_min=54, tm_sec=26, tm_wday=4, tm_yday=148, tm_isdst=0)``

Infine, utilizziamo il metodo ``time.strftime()`` per formattare questa lunga stringa di informazioni nel formato desiderato. Se desideri ottenere l'ora corrente, puoi ottenerla con la funzione ``time.strftime('%H',time.localtime(time.time()))`` . 

Di seguito sono elencati i risultati del formato specificato ottenuto modificando il primo parametro.

+----+----------------------------------------------------+
| %y | Rappresentazione dell'anno a due cifre (00-99)     |
+----+----------------------------------------------------+
| %Y | Four-digit year representation(000-9999)           |
+----+----------------------------------------------------+
| %m | mese (01-12)                                       |
+----+----------------------------------------------------+
| %H | Giorno del mese (0-31)                             |
+----+----------------------------------------------------+
| %I | Ore in un orologio a 24 ore (0-23)                 |
+----+----------------------------------------------------+
| %M | Ore in un orologio a 12 ore (01-12)                |
+----+----------------------------------------------------+
| %y | Minuti (00-59)                                     |
+----+----------------------------------------------------+
| %S | secondi (00-59)                                    |
+----+----------------------------------------------------+
| %a | Nome abbreviato del giorno della settimana         |
+----+----------------------------------------------------+
| %A | Nome completo del giorno della settimana           |
+----+----------------------------------------------------+
| %b | Nome abbreviato del mese                           |
+----+----------------------------------------------------+
| %B | Nome completo del mese                             |
+----+----------------------------------------------------+
| %c | Data e ora locali corrispondenti                   |
+----+----------------------------------------------------+
| %j | Giorno dell'anno (001-366)                         |
+----+----------------------------------------------------+
| %p | Equivalente di A.M. o P.M. locale                  |
+----+----------------------------------------------------+
| %U | Num of weeks of one year(00-53)starting with Sunday|
+----+----------------------------------------------------+
| %w | Settimana (0-6), a partire da domenica             |
+----+----------------------------------------------------+
| %W | Num of weeks of one year(00-53)starting with Monday|
+----+----------------------------------------------------+
| %x | Rappresentazione della data corrispondente locale  |
+----+----------------------------------------------------+
| %X | Rappresentazione dell'ora corrispondente locale    |
+----+----------------------------------------------------+
| %Z | Nome del fuso orario corrente                      |
+----+----------------------------------------------------+

.. note::
    L'output del metodo ``time.strftime()`` √® costituito da variabili stringa. Prima di utilizzarlo, ricordati di effettuare una conversione forzata del tipo.

.. code-block:: python

    clearDisplay() 
    pickDigit(0)  
    hc595_shift(number[minute % 10])
    
    clearDisplay()
    pickDigit(1)
    hc595_shift(number[minute % 100//10])

    clearDisplay()
    pickDigit(2)
    hc595_shift(number[hour % 10])

    clearDisplay()
    pickDigit(3)
    hc595_shift(number[hour % 100//10])

La decina delle ore viene visualizzata sul primo display a 7 segmenti, mentre l'unit√† viene visualizzata sul secondo. 
Poi la decina dei minuti viene visualizzata sul terzo display digitale, e l'unit√† viene visualizzata sull'ultimo.

.. code-block:: python

    if minute == 0 and status == 0:
        tts.say('The time is now ' + str(hour) + ' hours and ' + str(minute) + ' minutes')
        status = 1
    elif minute != 0:
        status = 0

Quando i minuti sono 0 (ad ogni ora), il Raspberry Pi utilizzer√† il TTS per annunciare l'ora.

Immagine del fenomeno
-----------------------------

.. image:: ../img/4.1.3speech_clock.JPG
   :align: center

