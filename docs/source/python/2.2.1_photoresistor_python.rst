.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime speciali.
    - **Sconti esclusivi**: Approfitta di sconti riservati sui nostri prodotti pi√π recenti.
    - **Promozioni festive e concorsi**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.1_py:

2.2.1 Fotoresistore
======================

Introduzione
---------------

Il fotoresistore √® un componente comunemente utilizzato per rilevare l'intensit√† della 
luce ambientale. Aiuta il controllore a riconoscere il giorno e la notte e a realizzare 
funzioni di controllo della luce come le lampade notturne. Questo progetto √® molto simile 
a quello del potenziometro, ma in questo caso il cambiamento di tensione √® legato alla 
rilevazione della luce.

Componenti Necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_2.2.1_photoresistor.png

√à sicuramente comodo acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ARTICOLI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_adc0834`
        - \-
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|

Schema Elettrico
---------------------

.. image:: ../img/image321.png


.. image:: ../img/image322.png


Procedure Sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image198.png

**Passo 2:** Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Passo 3:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.1_Photoresistor.py

Quando il codice √® in esecuzione, la luminosit√† del LED cambier√† in base all'intensit√† della luce rilevata dal fotoresistore.

**Codice**

.. note::

    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice qui sotto. Ma prima devi accedere al percorso del codice come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import ADC0834
    import time
    LedPin = 22
    def setup():
        global led_val
        # Imposta le modalit√† GPIO sulla numerazione BCM
        GPIO.setmode(GPIO.BCM)
        # Imposta la modalit√† di LedPin come output e livello iniziale su High (3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Imposta Led come canale pwm e frequenza a 2KHz
        led_val = GPIO.PWM(LedPin, 2000)
        # Inizializza con il valore 0
        led_val.start(0)
    def destroy():
        # Ferma tutti i canali pwm
        led_val.stop()
        # Rilascia le risorse
        GPIO.cleanup()
    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)
    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # Quando viene premuto 'Ctrl+C', il programma destroy() verr√† eseguito.
            destroy()

**Spiegazione del Codice**

.. code-block:: python

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)

Leggi il valore analogico di CH0 di ADC0834. Per impostazione predefinita, la funzione
``getResult()`` √® utilizzata per leggere il valore di CH0, quindi se desideri leggere
altri canali, inserisci 1, 2 o 3 all'interno delle parentesi della funzione
``getResult()``. Successivamente, √® necessario stampare il valore utilizzando la funzione print.
Poich√© l'elemento che cambia √® il ciclo di lavoro di ``LedPin``, la formula di calcolo
``analogVal*100/255`` √® necessaria per convertire analogVal in percentuale.
Infine, ``ChangeDutyCycle()`` viene chiamata per scrivere la percentuale in ``LedPin``.

Immagine del Fenomeno
----------------------------

.. image:: ../img/image199.jpeg

