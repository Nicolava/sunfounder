.. _2.2.1_py:

2.2.1 フォトレジスタ
====================

はじめに
----------

フォトレジスタは、日常生活でよく使用される環境光強度のコンポーネントです。このデバイスによってコントローラは昼と夜を識別し、夜間照明のような照明制御機能を実現します。このプロジェクトは、ポテンショメータと非常に似ており、光を感知するために電圧を変更すると考えるかもしれません。

必要な部品
--------------------------------

このプロジェクトで必要な部品は次のとおりです。

.. image:: ../img/list_2.2.1_photoresistor.png

キット全体を購入する方が便利です、そのリンクは以下です：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個々の部品も購入できます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`ADC0834`
        - \-
    *   - :ref:`フォトレジスタ`
        - |link_photoresistor_buy|

回路図
---------

.. image:: ../img/image321.png

.. image:: ../img/image322.png

実験手順
-------------

**ステップ 1:** 回路を組む。

.. image:: ../img/image198.png

**ステップ 2:** コードのフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**ステップ 3:** 実行ファイルを実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.1_Photoresistor.py

コードが実行されている間、フォトレジスタが感知した光の強度に応じて、LEDの明るさが変わります。

**コード**

.. note::

    以下のコードは **修正/リセット/コピー/実行/停止** ができます。ただし、その前に ``raphael-kit/python`` などのソースコードパスに移動する必要があります。コードを修正した後、その効果を直接確認することができます。

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import ADC0834
    import time
    LedPin = 22
    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)
        # Set all begin with value 0
        led_val.start(0)
    def destroy():
        # Stop all pwm channel
        led_val.stop()
        # Release resource
        GPIO.cleanup()
    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)
    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # When 'Ctrl+C' is pressed, the program destroy() will be executed.
            destroy()

**コード説明**

.. code-block:: python

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            print ('analog value = %d' % analogVal)
            led_val.ChangeDutyCycle(analogVal*100/255)
            time.sleep(0.2)

ADC0834のCH0のアナログ値を読み取ります。 ``getResult()`` 関数はデフォルトでCH0の値を読み取るため、他のチャンネルを読み取りたい場合は、関数 ``getResult()`` の()内に1、2、または3を入力してください。次に、print関数を使用して値を出力します。変更要素は ``LedPin`` のデューティサイクルなので、計算式 ``analogVal*100/255`` が必要です。最後に、 ``ChangeDutyCycle()`` が呼び出されて、パーセンテージが ``LedPin`` に書き込まれます。

現象の画像
------------------

.. image:: ../img/image199.jpeg
