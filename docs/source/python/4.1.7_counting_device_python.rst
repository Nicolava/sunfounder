.. note::

    Hola, ¬°bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s profundamente en Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Accede anticipadamente a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones navide√±as.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _4.1.7_py:

4.1.7 Dispositivo Contador
=========================================

Introducci√≥n
-----------------

Aqu√≠ haremos un sistema contador que muestra n√∫meros, que consiste en un sensor PIR y 
un display de 4 d√≠gitos. Cuando el PIR detecta que alguien pasa, el n√∫mero en el display 
de 4 d√≠gitos aumentar√° en 1. Puedes usar este contador para contar la cantidad de personas 
que pasan por un pasillo.


Componentes Necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/list_Counting_Device1.png
    :align: center

.. image:: ../img/list_Counting_Device2.png
    :align: center

Es muy conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_pir`
        - \-


Diagrama Esquem√°tico
----------------------

============== =============== ======== ===
Nombre T-Board cableado f√≠sico wiringPi BCM
GPIO17         Pin 11          0        17
GPIO27         Pin 13          2        27
GPIO22         Pin 15          3        22
SPIMOSI        Pin 19          12       10
GPIO18         Pin 12          1        18
GPIO23         Pin 16          4        23
GPIO24         Pin 18          5        24
GPIO26         Pin 37          25       26
============== =============== ======== ===

.. image:: ../img/Schematic_three_one1.png
   :align: center

Procedimientos Experimentales
---------------------------------

**Paso 1**: Construye el circuito.

.. image:: ../img/image235.png


**Paso 2**: Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Paso 3**: Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.7_CountingDevice.py

Despu√©s de que el c√≥digo se ejecute, cuando el PIR detecte que alguien pasa, 
el n√∫mero en el display de 4 d√≠gitos aumentar√° en 1.

Hay dos potenci√≥metros en el m√≥dulo PIR: uno es para ajustar la sensibilidad y el otro es para ajustar la distancia de detecci√≥n. Para que el m√≥dulo PIR funcione mejor, debes girar ambos en sentido antihorario hasta el final.

.. image:: ../img/PIR_TTE.png
    :width: 400
    :align: center

**C√≥digo**

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    sensorPin = 26

    SDI = 24
    RCLK = 23
    SRCLK = 18

    placePin = (10, 22, 27, 17)
    number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

    counter = 0

    def clearDisplay():
        for i in range(8):
            GPIO.output(SDI, 1)
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)    

    def hc595_shift(data): 
        for i in range(8):
            GPIO.output(SDI, 0x80 & (data << i))
            GPIO.output(SRCLK, GPIO.HIGH)
            GPIO.output(SRCLK, GPIO.LOW)
        GPIO.output(RCLK, GPIO.HIGH)
        GPIO.output(RCLK, GPIO.LOW)

    def pickDigit(digit):
        for i in placePin:
            GPIO.output(i,GPIO.LOW)
        GPIO.output(placePin[digit], GPIO.HIGH)

    def display():
        global counter                    
        clearDisplay() 
        pickDigit(0)  
        hc595_shift(number[counter % 10])

        clearDisplay()
        pickDigit(1)
        hc595_shift(number[counter % 100//10])

        clearDisplay()
        pickDigit(2)
        hc595_shift(number[counter % 1000//100])

        clearDisplay()
        pickDigit(3)
        hc595_shift(number[counter % 10000//1000])

    def loop():
        global counter
        currentState = 0
        lastState = 0
        while True:
            display()
            currentState=GPIO.input(sensorPin)
            if (currentState == 0) and (lastState == 1):
                counter +=1
            lastState=currentState

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(SDI, GPIO.OUT)
        GPIO.setup(RCLK, GPIO.OUT)
        GPIO.setup(SRCLK, GPIO.OUT)
        for i in placePin:
            GPIO.setup(i, GPIO.OUT)
        GPIO.setup(sensorPin, GPIO.IN)

    def destroy():   # When "Ctrl+C" is pressed, the function is executed.
        GPIO.cleanup()

    if __name__ == '__main__':  # Program starting from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**Explicaci√≥n del C√≥digo**

Basado en :ref:`1.1.5_py`, este proyecto a√±ade el **m√≥dulo PIR** para 
cambiar el conteo autom√°tico a detecci√≥n de conteo. Cuando el PIR detecta 
que alguien pasa, el n√∫mero en el display de 4 d√≠gitos aumentar√° en 1.

.. code-block:: python

    def¬†display():
    ¬†¬†¬†¬†global¬†counter¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†
        clearDisplay() 
        pickDigit(0)  
    ¬†¬†¬†¬†hc595_shift(number[counter¬†%¬†10])

        clearDisplay()
        pickDigit(1)
    ¬†¬†¬†¬†hc595_shift(number[counter¬†%¬†100//10])

        clearDisplay()
        pickDigit(2)
    ¬†¬†¬†¬†hc595_shift(number[counter¬†%¬†1000//100])

        clearDisplay()
        pickDigit(3)
    ¬†¬†¬†¬†hc595_shift(number[counter¬†%¬†10000//1000])

Primero, inicia el cuarto display de segmento y escribe el n√∫mero de un solo d√≠gito.
Luego, inicia el tercer display de segmento y escribe la decena; despu√©s de eso, 
inicia el segundo y el primer display de segmento respectivamente, y escribe las 
centenas y millares respectivamente. Debido a que la velocidad de refresco es muy r√°pida, 
vemos un display completo de cuatro d√≠gitos.

.. code-block:: python

    def¬†loop():
    global¬†counter
    ¬†¬†¬†¬†currentState¬†=¬†0
    ¬†¬†¬†¬†lastState¬†=¬†0
    ¬†¬†¬†¬†while¬†True:
            display()
    ¬†¬†¬†¬†¬†¬†¬†¬†currentState=GPIO.input(sensorPin)
    ¬†¬†¬†¬†¬†¬†¬†¬†if¬†(currentState¬†==¬†0)¬†and¬†(lastState¬†==¬†1):
    ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†counter¬†+=1
    ¬†¬†¬†¬†¬†¬†¬†¬†lastState=currentState¬†

Esta es la funci√≥n principal: muestra el n√∫mero en el display de 4 d√≠gitos y lee 
el valor del PIR. Cuando el PIR detecta que alguien pasa, el n√∫mero en el display 
de 4 d√≠gitos aumentar√° en 1.

Imagen del Fen√≥meno
-------------------------

.. image:: ../img/image236.jpeg
   :align: center
