 
.. _3.1.1_py:

3.1.1 Module Photographique
===============================

Introduction
---------------

Dans ce kit, équipé d'un module caméra, essayons de prendre une photo avec le Raspberry Pi.

Composants Nécessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../img/photo1.png
  :width: 800

Il est très pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ÉLÉMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez également les acheter séparément via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|

Procédures Expérimentales
------------------------------

**Étape 1 :** Accédez au bureau du Raspberry Pi. Vous aurez peut-être besoin d'un écran pour une meilleure expérience, référez-vous à : `Connect your Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Ou accédez au bureau du Raspberry Pi à distance, pour un tutoriel détaillé, veuillez vous référer à :ref:`remote_desktop`.

**Étape 2 :** Vérifiez si la caméra est activée. Pour les instructions, veuillez vous référer à :ref:`enable_camera`.

**Étape 3 :** Ouvrez un terminal et allez dans le dossier du code.

.. code-block::

    cd ~/raphael-kit/python/

**Étape 4 :** Exécutez.

.. code-block::

    sudo python3 3.1.1_PhotographModule.py

Après l'exécution du code, la caméra prendra une photo. Vous pouvez maintenant voir la photo nommée ``my_photo.jpg`` dans le répertoire ``~``.

.. note::

    Vous pouvez également ouvrir ``3.1.1_PhotographModule.py`` dans le chemin ``~/raphael-kit/python/`` avec un IDE Python, cliquer sur le bouton Exécuter pour exécuter, et arrêter le code avec le bouton Arrêter.

Si vous souhaitez télécharger la photo sur votre PC, veuillez vous référer à :ref:`filezilla`.

**Code**

.. code-block:: python

    from picamera import PiCamera
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    camera = PiCamera()
    
    def setup():
        camera.start_preview(alpha=200)
    
    def main():
        camera.capture(f'{user_home}/my_photo.jpg')
        while True:
            pass    
    
    def destroy():
        camera.stop_preview()
    
    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    from picamera import PiCamera

    camera = PiCamera()

Importez la bibliothèque ``picamera`` et instanciez la classe ``PiCamera`` pour utiliser le module caméra.

.. code-block:: python

    start_preview(**options)


Affichez l'aperçu en superposition et modifiez le niveau de transparence de l'aperçu avec ``alpha`` - de 0 à 255. Cette méthode lance un aperçu de la caméra en superposition sur l'écran principal du Pi (HDMI ou composite). Par défaut, le rendu sera opaque et en plein écran.


Cela signifie que l'aperçu par défaut remplace ce qui est actuellement visible sur l'écran. Plus précisément, l'aperçu ne dépend pas d'un environnement graphique comme X-Windows (il peut fonctionner sans problème à partir d'une console TTY); il s'agit simplement d'une superposition sur la sortie vidéo du Pi. Pour arrêter l'aperçu et révéler à nouveau l'écran, appelez ``stop_preview()``. L'aperçu peut être démarré et arrêté plusieurs fois pendant la durée de vie de l'objet ``PiCamera``.

.. code-block:: python

    camera.capture(f'{user_home}/my_photo.jpg')

Capturez une image à partir de la caméra, en la stockant dans ``~/``.

.. note::
    Vous pouvez utiliser la fonction ``camera.capture()`` et la boucle ``for`` ensemble pour réaliser une prise de vue continue. Utilisez la fonction ``delay`` pour ajuster l'intervalle de temps entre les prises de vue.

    .. code-block:: python

        for i in 5:
            camera.capture(f'{user_home}/my_photo%s.jpg' % i)
