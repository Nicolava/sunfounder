.. _3.1.1_py:

3.1.1 Fotografie-Modul
==========================

Einführung
-----------------

In diesem Kit ist ein Kameramodul enthalten. Lassen Sie uns versuchen, mit dem Raspberry Pi ein Foto aufzunehmen.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir folgende Komponenten.

.. image:: ../img/photo1.png
  :width: 800

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können diese auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`camera_module`
        - |link_camera_buy|

Experimentelle Verfahren
----------------------------

**Schritt 1:** Gehen Sie zum Raspberry Pi Desktop. Für ein besseres Erlebnis benötigen Sie vielleicht einen Bildschirm, siehe: `Verbinden Sie Ihren Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Oder greifen Sie remote auf den Raspberry Pi Desktop zu, für ein detailliertes Tutorial siehe :ref:`windows_remote_desktop`.

**Schritt 2:** Öffnen Sie ein Terminal und wechseln Sie in den Ordner mit dem Code.

.. code-block::

    cd ~/raphael-kit/python/

**Schritt 3:** Führen Sie den Code aus.

.. code-block::

    sudo python3 3.1.1_FotografieModul.py

Nachdem der Code ausgeführt wurde, wird die Kamera ein Foto aufnehmen. Jetzt können Sie das Foto mit dem Namen ``my_photo.jpg`` im ``~`` Verzeichnis sehen.

.. note::

    Sie können auch ``3.1.1_PhotographModule.py`` im Pfad ``~/raphael-kit/python/`` mit einer Python-IDE öffnen, auf die Schaltfläche Ausführen klicken, um den Code auszuführen, und den Code mit der Schaltfläche Stopp beenden.

Wenn Sie das Foto auf Ihren PC herunterladen möchten, beachten Sie bitte :ref:`filezilla`.

**Code**

.. code-block:: python

    from picamera import PiCamera
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    camera = PiCamera()
    
    def setup():
        camera.start_preview(alpha=200)
    
    def main():
        camera.capture(f'{user_home}/my_photo.jpg')
        while True:
            pass    
    
    def destroy():
        camera.stop_preview()
    
    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Code-Erklärung**

.. code-block:: python

    from picamera import PiCamera

    camera = PiCamera()

Importiert die Bibliothek ``picamera`` und instanziiert die Klasse ``PiCamera``, um das Kameramodul zu verwenden.

.. code-block:: python

    start_preview(**options)

Zeigt die Vorschau-Overlay an und ändert die Transparenzstufe der Vorschau mit ``alpha`` - von 0 bis 255. Diese Methode startet eine Kamera-Vorschau als Overlay auf dem primären Display des Pi (HDMI oder Composite). Standardmäßig ist der Renderer opak und im Vollbildmodus.

Das bedeutet, dass die Standardvorschau das aktuell auf dem Display sichtbare Bild überschreibt. Genauer gesagt, die Vorschau ist nicht auf eine grafische Umgebung wie X-Windows angewiesen (sie kann problemlos von einer TTY-Konsole aus laufen); es handelt sich lediglich um ein Overlay auf dem Videoausgang des Pi. Um die Vorschau zu stoppen und das Display wieder sichtbar zu machen, rufen Sie ``stop_preview()`` auf. Die Vorschau kann während der Lebensdauer des ``PiCamera``-Objekts mehrmals gestartet und gestoppt werden.

.. code-block:: python

    camera.capture(f'{user_home}/my_photo.jpg')

Macht ein Bild von der Kamera und speichert es in ``~/``.

.. note::
    Mit der Funktion ``camera.capture()`` und der ``for``-Schleife können Sie Serienaufnahmen durchführen. Verwenden Sie die ``delay``-Funktion, um das Zeitintervall für das Aufnehmen von Bildern anzupassen.

    .. code-block:: python

        for i in 5:
            camera.capture(f'{user_home}/my_photo%s.jpg' % i)
