.. _1.1.3_py:

1.1.3 LED-Balkendiagramm
============================

Einführung
-------------

In diesem Projekt beleuchten wir nacheinander die Lichter des LED-Balkendiagramms.

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../img/list_led_bar.png

Es ist sicherlich praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`breadboard`
        - |link_breadboard_buy|
    *   - :ref:`wires`
        - |link_wires_buy|
    *   - :ref:`resistor`
        - |link_resistor_buy|
    *   - :ref:`bar_graph`
        - \-

Schaltplan
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SDA1         Pin 3    8        2
SCL1         Pin 5    9        3
SPICE0       Pin 24   10       8
============ ======== ======== ===

.. image:: ../img/schematic_led_bar.png

Experimentelle Verfahren
------------------------------

**Schritt 1**: Bauen Sie den Schaltkreis.

.. note::

    Achten Sie auf die Richtung beim Anschließen. Wenn Sie es verkehrt herum anschließen, wird es nicht leuchten.

.. image:: ../img/image66.png

**Schritt 2:** Navigieren Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Schritt 3**: Führen Sie die ausführbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.3_LedBarGraph.py

Nachdem der Code ausgeführt wurde, werden Sie sehen, dass die LEDs auf der LED-Leiste regelmäßig ein- und ausgeschaltet werden.

**Code**

.. note::

    Sie können den untenstehenden Code **Ändern/Zurücksetzen/Kopieren/Ausführen/Stoppen**. Aber bevor Sie das tun, müssen Sie zum Quellcode-Pfad wie ``raphael-kit/python`` gehen. Nachdem Sie den Code geändert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    ledPins = [11, 12, 13, 15, 16, 18, 22, 3, 5, 24]

    def oddLedBarGraph():
        for i in range(5):
            j = i*2
            GPIO.output(ledPins[j],GPIO.LOW)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.HIGH)

    def evenLedBarGraph():
        for i in range(5):
            j = i*2+1
            GPIO.output(ledPins[j],GPIO.LOW)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.HIGH)

    def allLedBarGraph():
        for i in ledPins:
            GPIO.output(i,GPIO.LOW)
            time.sleep(0.3)
            GPIO.output(i,GPIO.HIGH)

    def setup():
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BOARD)        # Numbers GPIOs by physical location
        for i in ledPins:
            GPIO.setup(i, GPIO.OUT)   # Set all ledPins' mode is output
            GPIO.output(i, GPIO.HIGH) # Set all ledPins to high(+3.3V) to off led

    def loop():
        while True:
            oddLedBarGraph()
            time.sleep(0.3)
            evenLedBarGraph()
            time.sleep(0.3)
            allLedBarGraph()
            time.sleep(0.3)

    def destroy():
        for pin in ledPins:
            GPIO.output(pin, GPIO.HIGH)    # turn off all leds
        GPIO.cleanup()                     # Release resource

    if __name__ == '__main__':     # Program start from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
            destroy()

**Code-Erklärung**

ledPins = [11, 12, 13, 15, 16, 18, 22, 3, 5, 24]
Erstellen Sie ein Array und weisen Sie ihm die Pinnummer zu, die dem LED-Balkendiagramm (11, 12, 13, 15, 16, 18, 22, 3, 5, 24) entspricht. Dieses Array wird verwendet, um die LED zu steuern.

.. code-block:: python

    def oddLedBarGraph():
        for i in range(5):
            j = i*2
            GPIO.output(ledPins[j],GPIO.LOW)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.HIGH)

Lassen Sie die LED an der ungeraden Position des LED-Balkendiagramms nacheinander leuchten.

.. code-block:: python

    def evenLedBarGraph():
        for i in range(5):
            j = i*2+1
            GPIO.output(ledPins[j],GPIO.LOW)
            time.sleep(0.3)
            GPIO.output(ledPins[j],GPIO.HIGH)

Lassen Sie die LED an der geraden Position des LED-Balkendiagramms nacheinander leuchten.

.. code-block:: python

    def allLedBarGraph():
        for i in ledPins:
            GPIO.output(i,GPIO.LOW)
            time.sleep(0.3)
            GPIO.output(i,GPIO.HIGH)

Lassen Sie die LEDs auf dem LED-Balkendiagramm nacheinander leuchten.

Phänomen-Bild
------------------------

.. image:: ../img/image67.jpeg
