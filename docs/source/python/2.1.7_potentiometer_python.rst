 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.7_py:

2.1.7 Potentiom√®tre
=====================

Introduction
--------------

La fonction ADC peut √™tre utilis√©e pour convertir des signaux analogiques en signaux num√©riques. 
Dans cette exp√©rience, l'ADC0834 est utilis√© pour obtenir cette fonction ADC. Nous mettons 
en ≈ìuvre ce processus en utilisant un potentiom√®tre. Le potentiom√®tre modifie la quantit√© 
physique - la tension, qui est convertie par la fonction ADC.





Composants N√©cessaires
------------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../img/list_2.1.4_potentiometer.png

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_potentiometer`
        - |link_potentiometer_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Sch√©ma √âlectrique
-------------------

.. image:: ../img/image311.png

.. image:: ../img/image312.png

Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image180.png

.. note::
    Veuillez placer la puce en vous r√©f√©rant √† la position correspondante indiqu√©e sur l'image. Notez que les rainures sur la puce doivent √™tre √† gauche lorsqu'elle est plac√©e.

**√âtape 2 :** Ouvrir le fichier de code

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.7_Potentiometer.py

Apr√®s l'ex√©cution du code, tournez le bouton du potentiom√®tre, l'intensit√© de la LED changera en cons√©quence.

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    LedPin = 22

    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Set all begin with value 0
        led_val.start(0)

    # Define a MAP function for mapping values.  Like from 0~255 to 0~100
    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def destroy():
        # Stop all pwm channel
        led_val.stop()
        # Release resource
        GPIO.cleanup()

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # When 'Ctrl+C' is pressed, the program destroy() will be executed.
            destroy()
**Explication du Code**

.. code-block:: python

    import ADC0834

Importer la biblioth√®que ADC0834. Vous pouvez v√©rifier le contenu de la biblioth√®que en appelant 
la commande nano ADC0834.py.

.. code-block:: python

    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Set all begin with value 0
        led_val.start(0)

Dans setup(), d√©finir la m√©thode de num√©rotation comme BCM, configurer LedPin comme canal PWM et 
lui attribuer une fr√©quence de 2 kHz.

**ADC0834.setup() :** Initialiser ADC0834, et connecter les broches d√©finies CS, CLK, DIO de l'ADC0834 respectivement √† GPIO17, GPIO18 et GPIO27.

.. code-block:: python

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

La fonction getResult() est utilis√©e pour lire les valeurs analogiques des quatre canaux de 
l'ADC0834. Par d√©faut, la fonction lit la valeur de CH0, et si vous souhaitez lire d'autres 
canaux, veuillez entrer le num√©ro du canal dans **( )**, par exemple, getResult(1).

La fonction loop() lit d'abord la valeur de CH0, puis assigne la valeur √† la variable res. 
Ensuite, elle appelle la fonction MAP pour mapper la valeur lue du potentiom√®tre de 0 √† 100. 
Cette √©tape est utilis√©e pour contr√¥ler le cycle de travail de LedPin. Vous pourrez maintenant 
voir que la luminosit√© de la LED change en fonction de la valeur du potentiom√®tre.




Image du Ph√©nom√®ne
----------------------

.. image:: ../img/image181.jpeg


