.. _2.1.7_py:

2.1.7 ポテンショメーター
==========================

はじめに
---------------------

このプロジェクトでは、ADC機能を使ってアナログ信号をデジタル信号に変換します。具体的にはADC0834を使用して、ADC関連の機能を実現しています。このプロセスは、ポテンショメーターを用いて実装されます。ポテンショメーターは物理量である電圧を変化させ、それがADC関数によって変換されます。

必要な部品
------------------------

このプロジェクトで必要な部品は以下のとおりです。

.. image:: ../img/list_2.1.4_potentiometer.png

キット全体を購入する方が便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前	
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから、部品を個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク
    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`ポテンショメータ`
        - |link_potentiometer_buy|
    *   - :ref:`ADC0834`
        - \-

回路図
-------------

.. image:: ../img/image311.png

.. image:: ../img/image312.png

実験手順
---------------

**ステップ1:** 回路を組む。

.. image:: ../img/image180.png

.. note::
    回路図に示されている対応する位置にチップを配置してください。チップの溝は、配置する際には左側になるように注意してください。

**ステップ2:** コードファイルを開く。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**ステップ3:** 実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.7_Potentiometer.py

コードを実行した後、ポテンショメーターのノブを回すと、LEDの明るさがそれに応じて変わります。

**コード**

.. note::
    以下のコードは **修正/リセット/コピー/実行/停止** が可能です。ただし、それを行う前に、 ``raphael-kit/python`` のようなソースコードのパスに移動する必要があります。コードを修正した後、その効果を直接確認するために実行できます。

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import ADC0834
    import time

    LedPin = 22

    def setup():
        global led_val
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Set all begin with value 0
        led_val.start(0)

    # Define a MAP function for mapping values.  Like from 0~255 to 0~100
    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def destroy():
        # Stop all pwm channel
        led_val.stop()
        # Release resource
        GPIO.cleanup()

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt: # When 'Ctrl+C' is pressed, the program destroy() will be executed.
            destroy()

**コード説明**

.. code-block:: python

    import ADC0834

ADC0834ライブラリをインポート。ライブラリの内容は、nano ADC0834.pyコマンドで確認できます。

.. code-block:: python

    def setup():
        global led_val
         # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
        ADC0834.setup()
        # Set led as pwm channel and frequece to 2KHz
        led_val = GPIO.PWM(LedPin, 2000)

        # Set all begin with value 0
        led_val.start(0)

setup()内で、命名方式をBCMに定義し、LedPinをPWMチャンネルに設定、周波数を2KHzに設定します。

**ADC0834.setup():** ADC0834を初期化し、定義されたCS、CLK、DIOをそれぞれGPIO17、GPIO18、GPIO27に接続します。

.. code-block:: python

    def loop():
        while True:
            res = ADC0834.getResult()
            print ('res = %d' % res)
            R_val = MAP(res, 0, 255, 0, 100)
            led_val.ChangeDutyCycle(R_val)
            time.sleep(0.2)

関数 getResult() は ADC0834 の 4 チャンネルのアナログ値を読み出すために使用します。デフォルトでは CH0 の値を読み出しますので、他のチャンネルを読み出したい場合は **( )** にチャンネル番号を入力してください（例：getResult(1)）。

関数 loop() は、まず CH0 の値を読み取り、その値を変数 res に代入する。その後、ポテンショメーターの読み取った値を0～100にマッピングする関数MAPを呼び出します。このステップは、LedPinのデューティ・サイクルを制御するために使用される。これで、LEDの明るさがポテンショメーターの値によって変化しているのがわかるだろう。

現象の画像
------------------

.. image:: ../img/image181.jpeg


