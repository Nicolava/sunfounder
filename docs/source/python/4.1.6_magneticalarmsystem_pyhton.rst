.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _4.1.6_py:

4.1.6 磁気感応警報システム
============================================

はじめに
-----------------

貴重な花瓶を手に入れたとき、それに磁気感応警報システムを作成することができます。誰がそれを動かしても、タイムリーに警報を聞くことができます。

必要な部品
------------------------------

このプロジェクトでは、以下のコンポーネントが必要です。

.. image:: ../img/3.1.20components.png
  :width: 800
  :align: center

キット全体を購入すると非常に便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|


回路図
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../img/3.1.20_schematic.png
   :width: 600
   :align: center

実験手順
------------------------------

**ステップ1:** 回路を作成します。

.. image:: ../img/3.1.20fritzing.png
  :width: 800
  :align: center

**ステップ2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**ステップ3:** 実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.6_MagneticAlarmSystem.py

リードスイッチが磁石に影響される場合（例えば、リードスイッチがベースに置かれ、磁石が花瓶の中に置かれる）、オブジェクトは安全です。このとき、リードスイッチは閉じた状態であり、ブザーは静かです。
磁石を取り外すと（例えば、花瓶が盗まれる）、リードスイッチは磁石の影響を受けず、スイッチが開き、ブザーが警報音を鳴らします。

**コード**

.. note::
    以下のコードを **変更/リセット/コピー/実行/停止** することができます。しかし、それを行う前に、 ``raphael-kit/python`` のようなソースコードパスに移動する必要があります。コードを変更した後、その効果を直接確認するために実行することができます。

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    BeepPin = 27
    ReedPin = 17

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(ReedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    def loop():
        while True:
            if GPIO.input(ReedPin) == 0:
                GPIO.output(BeepPin, GPIO.HIGH)	
            else:
                GPIO.output(BeepPin, GPIO.LOW)
                time.sleep(0.1)
                GPIO.output(BeepPin, GPIO.HIGH)
                time.sleep(0.1)

    def destroy():
        GPIO.output(BeepPin, GPIO.HIGH)
        GPIO.cleanup()

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**コード説明**

.. code-block:: python

    def loop():
        while True:
            if GPIO.input(ReedPin) == 0:
                GPIO.output(BeepPin, GPIO.HIGH)
            else:
                GPIO.output(BeepPin, GPIO.LOW)
                time.sleep(0.1)
                GPIO.output(BeepPin, GPIO.HIGH)
                time.sleep(0.1)

メインループでリードスイッチの状態を判断します。リードスイッチが閉じている場合、ブザーは動作しません。それ以外の場合、ブザーがビープ音を鳴らします。

現象の画像
------------------------

.. image:: ../img/4.1.6_security.JPG
   :align: center


