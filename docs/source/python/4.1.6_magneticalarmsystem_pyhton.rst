.. note::

    Hola, ¬°bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Sum√©rgete m√°s profundamente en Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Accede anticipadamente a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones navide√±as.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _4.1.6_py:

4.1.6 Sistema de Alarma por Inducci√≥n Magn√©tica
=========================================================

Introducci√≥n
--------------------

Cuando tengas un jarr√≥n precioso, puedes hacer un sistema de alarma por inducci√≥n magn√©tica para √©l. No importa qui√©n lo mueva, podr√°s escuchar la alarma a tiempo.

Componentes Necesarios
---------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/3.1.20components.png
  :width: 800
  :align: center

Es muy conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|

Diagrama Esquem√°tico
-----------------------

============== =============== ======== ===
Nombre T-Board cableado f√≠sico wiringPi BCM
GPIO17         Pin 11          0        17
GPIO27         Pin 13          2        27
============== =============== ======== ===

.. image:: ../img/3.1.20_schematic.png
   :width: 600
   :align: center

Procedimientos Experimentales
----------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/3.1.20fritzing.png
  :width: 800
  :align: center

**Paso 2:** Accede a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Paso 3:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.6_MagneticAlarmSystem.py

Si el interruptor de l√°minas es afectado por el im√°n (por ejemplo, si el interruptor de l√°minas se coloca en la base y el im√°n en el jarr√≥n), el objeto est√° seguro. En este momento, el interruptor de l√°minas est√° en estado cerrado y el zumbador est√° en silencio.
Despu√©s de retirar el im√°n (como cuando el jarr√≥n es robado), el interruptor de l√°minas no es afectado por el im√°n, el interruptor se abre y el zumbador emite una alarma.

**C√≥digo**

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    BeepPin = 27
    ReedPin = 17

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(ReedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    def loop():
        while True:
            if GPIO.input(ReedPin) == 0:
                GPIO.output(BeepPin, GPIO.HIGH)	
            else:
                GPIO.output(BeepPin, GPIO.LOW)
                time.sleep(0.1)
                GPIO.output(BeepPin, GPIO.HIGH)
                time.sleep(0.1)

    def destroy():
        GPIO.output(BeepPin, GPIO.HIGH)
        GPIO.cleanup()

    if __name__ == '__main__':
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    def loop():
        while True:
            if GPIO.input(ReedPin) == 0:
                GPIO.output(BeepPin, GPIO.HIGH)
            else:
                GPIO.output(BeepPin, GPIO.LOW)
                time.sleep(0.1)
                GPIO.output(BeepPin, GPIO.HIGH)
                time.sleep(0.1)

En el bucle principal, evaluamos el estado del interruptor de l√°minas. Si el interruptor de l√°minas est√° cerrado, el zumbador no funciona; de lo contrario, el zumbador suena.

Imagen del Fen√≥meno
------------------------

.. image:: ../img/4.1.6_security.JPG
   :align: center


