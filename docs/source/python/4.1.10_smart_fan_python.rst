.. note::

    Hello, welcome to the SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community on Facebook! Dive deeper into Raspberry Pi, Arduino, and ESP32 with fellow enthusiasts.

    **Why Join?**

    - **Expert Support**: Solve post-sale issues and technical challenges with help from our community and team.
    - **Learn & Share**: Exchange tips and tutorials to enhance your skills.
    - **Exclusive Previews**: Get early access to new product announcements and sneak peeks.
    - **Special Discounts**: Enjoy exclusive discounts on our newest products.
    - **Festive Promotions and Giveaways**: Take part in giveaways and holiday promotions.

    ðŸ‘‰ Ready to explore and create with us? Click [|link_sf_facebook|] and join today!

.. _4.1.10_py:

4.1.10 Smart Fan
=========================

Introduction
-----------------

In this project, we will use motors, buttons and thermistors to make a
manual + automatic smart fan whose wind speed is adjustable.

Required Components
------------------------------

In this project, we need the following components.

.. image:: ../img/list_Smart_Fan.png
    :align: center

It's definitely convenient to buy a whole kit, here's the link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

You can also buy them separately from the links below.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - COMPONENT INTRODUCTION
        - PURCHASE LINK

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_power_module`
        - \-
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_motor`
        - |link_motor_buy|


Schematic Diagram
------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
============ ======== ======== ===

.. image:: ../img/Schematic_three_one4.png
   :align: center

Experimental Procedures
-----------------------------

**Step 1:** Build the circuit.

.. image:: ../img/image245.png

.. note::
    The power module can apply a 9V battery with the 9V Battery
    Buckle in the kit. Insert the jumper cap of the power module into the 5V
    bus strips of the breadboard.

.. image:: ../img/image118.jpeg
   :align: center

**Step 2**: Get into the folder of the code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python

**Step 3**: Run.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 4.1.10_SmartFan.py

As the code runs, start the fan by pressing the button. Every time you
press, 1 speed grade is adjusted up or down. There are **5** kinds of
speed grades: **0~4**. When set to the 4\ :sup:`th` speed grade and you
press the button, the fan stops working with a **0** wind speed.

Once the temperature goes up or down for more than 2â„ƒ, the speed
automatically gets 1-grade faster or slower.

Code
--------

.. note::
    You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``raphael-kit/python``. After modifying the code, you can run it directly to see the effect.

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time
    import ADC0834
    import math

    # Set up pins
    MotorPin1   = 5
    MotorPin2   = 6
    MotorEnable = 13
    BtnPin  = 22


    def setup():
        global p_M1,p_M2
        ADC0834.setup()
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(MotorPin1, GPIO.OUT)
        GPIO.setup(MotorPin2, GPIO.OUT)
        p_M1=GPIO.PWM(MotorPin1,2000)
        p_M2=GPIO.PWM(MotorPin2,2000)
        p_M1.start(0)
        p_M2.start(0)
        GPIO.setup(MotorEnable, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(BtnPin, GPIO.IN)

    def temperature():
        analogVal = ADC0834.getResult()
        Vr = 5 * float(analogVal) / 255
        Rt = 10000 * Vr / (5 - Vr)
        temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
        Cel = temp - 273.15
        Fah = Cel * 1.8 + 32
        return Cel

    def motor(level):
        if level == 0:
            GPIO.output(MotorEnable, GPIO.LOW)
            return 0
        if level>=4:
            level = 4
        GPIO.output(MotorEnable, GPIO.HIGH)
        p_M1.ChangeDutyCycle(level*25)
        return level


    def main():
        lastState=0
        level=0
        markTemp = temperature()
        while True:
            currentState =GPIO.input(BtnPin)
            currentTemp=temperature()
            if currentState == 1 and lastState == 0:
                level=(level+1)%5
                markTemp = currentTemp
                time.sleep(0.5)
            lastState=currentState
            if level!=0:
                if currentTemp-markTemp <= -2:
                    level = level -1
                    markTemp=currentTemp            
                if currentTemp-markTemp >= 2:
                    level = level +1
                    markTemp=currentTemp             
            level = motor(level)
            

    def destroy():
        GPIO.output(MotorEnable, GPIO.LOW)
        p_M1.stop()
        p_M2.stop()
        GPIO.cleanup()    

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()


Code Explanation
---------------------

.. code-block:: python

    defÂ temperature():
    Â Â Â Â analogValÂ =Â ADC0834.getResult()
    Â Â Â Â VrÂ =Â 5Â *Â float(analogVal)Â /Â 255
    Â Â Â Â RtÂ =Â 10000Â *Â VrÂ /Â (5Â -Â Vr)
    Â Â Â Â tempÂ =Â 1/(((math.log(RtÂ /Â 10000))Â /Â 3950)Â +Â (1Â /Â (273.15+25)))
    Â Â Â Â CelÂ =Â tempÂ -Â 273.15
    Â Â Â Â FahÂ =Â CelÂ *Â 1.8Â +Â 32
    Â Â Â Â returnÂ Cel

``temperture()`` works by converting thermistor values read by **ADC0834**
into temperature values. Refer to :ref:`2.2.2_py` for more details.

.. code-block:: python

    defÂ motor(level):
    Â Â Â Â ifÂ levelÂ ==Â 0:
    Â Â Â Â Â Â Â Â GPIO.output(MotorEnable,Â GPIO.LOW)
    Â Â Â Â Â Â Â Â returnÂ 0
    Â Â Â Â ifÂ level>=4:
    Â Â Â Â Â Â Â Â levelÂ =Â 4
    Â Â Â Â GPIO.output(MotorEnable,Â GPIO.HIGH)
    Â Â Â Â p_M1.ChangeDutyCycle(level*25)
    Â Â Â Â returnÂ level


This function controls the rotating speed of the motor. The range of the
**Lever**: **0-4** (level **0** stops the working motor). One level
adjustment stands for a **25%** change of the wind speed.

.. code-block:: python

    defÂ main():
    Â Â Â Â lastState=0
    Â Â Â Â level=0
    Â Â Â Â markTempÂ =Â temperature()
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â currentStateÂ =GPIO.input(BtnPin)
    Â Â Â Â Â Â Â Â currentTemp=temperature()
    Â Â Â Â Â Â Â Â ifÂ currentStateÂ ==Â 1Â andÂ lastStateÂ ==Â 0:
    Â Â Â Â Â Â Â Â Â Â Â Â level=(level+1)%5
    Â Â Â Â Â Â Â Â Â Â Â Â markTempÂ =Â currentTemp
    Â Â Â Â Â Â Â Â Â Â Â Â time.sleep(0.5)
    Â Â Â Â Â Â Â Â lastState=currentState
    Â Â Â Â Â Â Â Â ifÂ level!=0:
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ currentTemp-markTempÂ <=Â -2:
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â levelÂ =Â levelÂ -1
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTempÂ Â Â Â Â Â Â Â Â Â Â Â 
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ currentTemp-markTempÂ >=Â 2:
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â levelÂ =Â levelÂ +1
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â markTemp=currentTempÂ Â Â Â Â Â Â Â Â Â Â Â Â 
    Â Â Â Â Â Â Â Â levelÂ =Â motor(level)


The function **main()** contains the whole program process as shown:

1) Constantly read the button state and the current temperature.

2) Every press makes level\ **+1** and at the same time, the temperature
   is updated. The **Level** ranges **1~4**.

3) As the fan works ( the level is **not 0**), the temperature is under
   detection. A **2â„ƒ\ +** change causes the up and down of the level.

4) The motor changes the rotating speed with the **Level**.

Phenomenon Picture
------------------------

.. image:: ../img/image246.png
   :align: center