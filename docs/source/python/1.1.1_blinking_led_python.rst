 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.1_py:

1.1.1 LED Clignotante
=========================

Introduction
-----------------

Dans ce projet, nous apprendrons comment cr√©er une LED clignotante par programmation.
Gr√¢ce √† vos r√©glages, votre LED peut produire une s√©rie de ph√©nom√®nes int√©ressants. Maintenant, allons-y.

Composants N√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/blinking_led_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Sch√©ma de Circuit
---------------------

Dans cette exp√©rience, connectez une r√©sistance de 220Œ© √† l'anode (la patte longue de la LED), 
puis la r√©sistance √† 3,3 V, et connectez la cathode (la patte courte) de la LED √† GPIO17 du 
Raspberry Pi. Par cons√©quent, pour allumer une LED, nous devons mettre GPIO17 au niveau bas (0V). 
Nous pouvons obtenir ce ph√©nom√®ne par programmation.

.. note::

    **Pin11** fait r√©f√©rence √† la 11e broche du Raspberry Pi de gauche √† droite, et ses num√©ros de 
    broche correspondants **wiringPi** et **BCM** sont indiqu√©s dans le tableau suivant.

Dans le contenu li√© au langage C, nous faisons en sorte que GPIO0 soit √©quivalent √† 0 dans 
wiringPi. Dans le contenu li√© au langage Python, BCM 17 est 17 dans la colonne BCM du tableau 
suivant. En m√™me temps, ils sont les m√™mes que la 11e broche sur le Raspberry Pi, Pin 11.

============ ======== ======== ===
Nom T-Board  physique wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../img/image48.png
    :width: 800
    :align: center

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/image49.png
    :width: 800
    :align: center

**√âtape 2 :** Allez dans le dossier du code et ex√©cutez-le.

1. Si vous utilisez un √©cran, il est recommand√© de suivre les √©tapes suivantes.

Trouvez 1.1.1_BlinkingLed.py et double-cliquez dessus pour l'ouvrir. Vous √™tes maintenant dans le fichier.

Cliquez sur **Run** ->\ **Run Module** dans la fen√™tre et les contenus suivants appara√Ætront.

Pour arr√™ter l'ex√©cution, cliquez simplement sur le bouton X en haut √† droite pour le fermer 
et vous reviendrez au code. Si vous modifiez le code, avant de cliquer sur **Run Module (F5)**, 
vous devez d'abord le sauvegarder. Ensuite, vous pouvez voir les r√©sultats.

2. Si vous vous connectez au Raspberry Pi √† distance, tapez la commande suivante :

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/python

.. note::
    Changez de r√©pertoire vers le chemin du code dans cette exp√©rience via ``cd``.

**√âtape 3 :** Ex√©cutez le code

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 1.1.1_BlinkingLed.py

.. note::
    Ici sudo - superuser do, et python signifie ex√©cuter le fichier avec Python.

Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

**√âtape 4 :** Si vous souhaitez modifier le fichier de code 1.1.1_BlinkingLed.py, 
appuyez sur ``Ctrl + C`` pour arr√™ter l'ex√©cution du code. Puis tapez la commande 
suivante pour ouvrir 1.1.1_BlinkingLed.py :

.. raw:: html

   <run></run>

.. code-block::

   nano 1.1.1_BlinkingLed.py

.. note::
    nano est un outil d'√©dition de texte. La commande est utilis√©e pour ouvrir le fichier 
    de code 1.1.1_BlinkingLed.py avec cet outil.

Appuyez sur ``Ctrl+X`` pour quitter. Si vous avez modifi√© le code, une invite vous demandera 
si vous souhaitez enregistrer les modifications ou non. Tapez ``Y`` (enregistrer) ou ``N`` 
(ne pas enregistrer).

Puis appuyez sur ``Enter`` pour quitter. Tapez √† nouveau nano 1.1.1_BlinkingLed.py 
pour voir l'effet apr√®s la modification.
**Code**

Le programme suivant est le code :

.. note::

   Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre dans le chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO
   import time
   LedPin = 17
   def setup():
      # Set the GPIO modes to BCM Numbering
      GPIO.setmode(GPIO.BCM)
      # Set LedPin's mode to output,and initial level to High(3.3v)
      GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
   # Define a main function for main process
   def main():
      while True:
         print ('...LED ON')
         # Turn on LED
         GPIO.output(LedPin, GPIO.LOW)
         time.sleep(0.5)
         print ('LED OFF...')
         # Turn off LED
         GPIO.output(LedPin, GPIO.HIGH)
         time.sleep(0.5)
   # Define a destroy function for clean up everything after the script finished
   def destroy():
      # Turn off LED
      GPIO.output(LedPin, GPIO.HIGH)
      # Release resource
      GPIO.cleanup()                   
   # If run this script directly, do:
   if __name__ == '__main__':
      setup()
      try:
         main()
      # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
      except KeyboardInterrupt:
         destroy()

**Explication du code**

.. code-block:: python

   #!/usr/bin/env python3

Lorsque le syst√®me d√©tecte cela, il recherchera le chemin d'installation de python dans le 
param√®tre env, puis appellera l'interpr√©teur correspondant pour compl√©ter l'op√©ration. Cela 
permet d'√©viter que l'utilisateur n'installe pas python dans le chemin par d√©faut ``/usr/bin``.

.. code-block:: python

   import RPi.GPIO as GPIO

De cette fa√ßon, importez la biblioth√®que RPi.GPIO, puis d√©finissez une variable, GPIO, pour 
remplacer RPI.GPIO dans le code suivant.

.. code-block:: python

   import time

Importez le package time, pour la fonction de d√©lai temporel dans le programme suivant.

.. code-block:: python

   LedPin = 17

La LED est connect√©e au GPIO17 de la carte d'extension en forme de T, c'est-√†-dire, BCM 17.

.. code-block:: python

   def setup():
      GPIO.setmode(GPIO.BCM)
      GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)

D√©finir le mode de LedPin en sortie, et le niveau initial √† High (3,3v).

Il existe deux fa√ßons de num√©roter les broches IO sur un Raspberry Pi avec 
RPi.GPIO : les num√©ros BOARD et les num√©ros BCM. Dans nos projets, nous 
utilisons les num√©ros BCM. Vous devez configurer chaque canal que vous utilisez 
comme entr√©e ou sortie.

.. code-block:: python

   GPIO.output(LedPin, GPIO.LOW)

D√©finir GPIO17 (BCM17) √† 0V (niveau bas). Puisque la cathode de la LED est connect√©e √† GPIO17, 
la LED s'allumera.

.. code-block:: python

   time.sleep(0.5)

D√©lai de 0,5 seconde. Ici, l'instruction est une fonction de d√©lai en langage C, l'unit√© est la seconde.

.. code-block:: python

   def destroy():
      GPIO.cleanup()  

D√©finir une fonction destroy pour nettoyer tout apr√®s la fin du script.

.. code-block:: python

   if __name__ == '__main__':
      setup()
      try:
         main()
      # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
      except KeyboardInterrupt:
         destroy()

C'est la structure g√©n√©rale de l'ex√©cution du code. Lorsque le programme commence √† s'ex√©cuter, 
il initialise la broche en ex√©cutant setup(), puis ex√©cute le code dans la fonction main() pour 
d√©finir la broche en niveaux haut et bas. Lorsque ``Ctrl+C`` est press√©, la fonction destroy() 
sera ex√©cut√©e.

Image du ph√©nom√®ne
--------------------

.. image:: ../img/image54.jpeg
    :width: 800
    :align: center
