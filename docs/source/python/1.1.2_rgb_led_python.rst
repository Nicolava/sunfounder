.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _1.1.2_py:

1.1.2 RGB LED
====================

はじめに
--------------

このプロジェクトでは、RGB LEDを制御してさまざまな色を点滅させます。

必要な部品
------------------------------

このプロジェクトには以下のコンポーネントが必要です。

.. image:: ../img/list_rgb_led.png
    :align: center

全てのキットをまとめて購入すると便利です。購入先のリンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個々にも購入できます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`RGB LED`
        - |link_rgb_led_buy|


回路図
-----------------------

R, G, Bの各ピンを電流制限抵抗器に接続した後、それぞれGPIO17、GPIO18、GPIO27に接続します。LEDの最長のピン（GND）はRaspberry PiのGNDに接続します。3つのピンに異なるPWM値が与えられると、RGB LEDはさまざまな色を表示します。

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../img/rgb_led_schematic.png

実験手順
----------------------------

**ステップ1：** 回路を組む。

.. image:: ../img/image61.png

**ステップ2：** コードファイルを開く。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**ステップ3：** 実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.2_rgbLed.py

コードが実行された後、RGB LEDが赤、緑、青、黄、ピンク、シアンを表示します。

**コード**

.. note::

    以下のコードは **修正/リセット/コピー/実行/停止** が可能です。ただし、先に ``raphael-kit/python`` のようなソースコードのパスに移動する必要があります。コードを修正した後、そのまま実行して効果を確認できます。

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time
    # Set up a color table in Hexadecimal
    COLOR = [0xFF0000, 0x00FF00, 0x0000FF, 0xFFFF00, 0xFF00FF, 0x00FFFF]
    # Set pins' channels with dictionary
    pins = {'Red':17, 'Green':18, 'Blue':27}

    def setup():
        global p_R, p_G, p_B
        GPIO.setmode(GPIO.BCM)
        # Set all LedPin's mode to output and initial level to High(3.3v)
        for i in pins:
            GPIO.setup(pins[i], GPIO.OUT, initial=GPIO.HIGH)

        p_R = GPIO.PWM(pins['Red'], 2000)
        p_G = GPIO.PWM(pins['Green'], 2000)
        p_B = GPIO.PWM(pins['Blue'], 2000)
        p_R.start(0)
        p_G.start(0)
        p_B.start(0)

    # Define a MAP function for mapping values.  Like from 0~255 to 0~100
    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Define a function to set up colors
    def setColor(color):
    # configures the three LEDs' luminance with the inputted color value.
        R_val = (color & 0xFF0000) >> 16
        G_val = (color & 0x00FF00) >> 8
        B_val = (color & 0x0000FF) >> 0

        # Map color value from 0~255 to 0~100
        R_val = MAP(R_val, 0, 255, 0, 100)
        G_val = MAP(G_val, 0, 255, 0, 100)
        B_val = MAP(B_val, 0, 255, 0, 100)
        
        # Change the colors
        p_R.ChangeDutyCycle(R_val)
        p_G.ChangeDutyCycle(G_val)
        p_B.ChangeDutyCycle(B_val)

        print ("color_msg: R_val = %s,  G_val = %s, B_val = %s"%(R_val, G_val, B_val))  

    def main():
        while True:
            for color in COLOR:
                setColor(color)# change the color of the RGB LED
                time.sleep(0.5)

    def destroy():
        # Stop all pwm channel
        p_R.stop()
        p_G.stop()
        p_B.stop()
        # Release resource
        GPIO.cleanup()

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**コード説明**

.. code-block:: python

    p_R = GPIO.PWM(pins['Red'], 2000)
    p_G = GPIO.PWM(pins['Green'], 2000)
    p_B = GPIO.PWM(pins['Blue'], 2000)

    p_R.start(0)
    p_G.start(0)
    p_B.start(0)

``GPIO.PWM()`` 関数を使用して、赤、緑、青をPWMピンとして定義し、PWMピンの周波数を2000Hzに設定。次に、 ``Start()`` 関数で初期デューティサイクルをゼロに設定。

.. code-block:: python

    def MAP(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

値のマッピングを行うMAP関数を定義。例えば、x=50, in_min=0, in_max=255, out_min=0, out_max=100の場合、マッピング後は ``(50-0) * (100-0)/(255-0) +0=19.6`` となり、0-255の50は0-100で19.6に等しい。

.. code-block:: python

    def setColor(color):
        R_val = (color & 0xFF0000) >> 16
        G_val = (color & 0x00FF00) >> 8
        B_val = (color & 0x0000FF) >> 0

入力された色値をもとに3つのLEDの輝度を設定。16進数の最初の2桁はR_valに、中央の2桁はG_valに、最後の2桁はB_valに割り当てます。例えば、color=0xFF00FFの場合、R_val =（0xFF00FF & 0xFF0000）>> 16 = 0xFF、G_val = 0x00、B_val = 0xFF。

.. code-block:: python

    R_val = MAP(R_val, 0, 255, 0, 100)
    G_val = MAP(G_val, 0, 255, 0, 100)
    B_val = MAP(B_val, 0, 255, 0, 100)

MAP関数を使用して、R、G、B値を0〜255からPWMデューティサイクルの範囲0-100にマッピング。

.. code-block:: python

    p_R.ChangeDutyCycle(R_val) 
    p_G.ChangeDutyCycle(G_val)
    p_B.ChangeDutyCycle(B_val)

マッピングされたデューティサイクル値を対応するPWMチャンネルに割り当てて輝度を変更。

.. code-block:: python

    for color in COLOR:
        setColor(color)
        time.sleep(0.5)

COLORリスト内の各要素を色として割り当て、 ``setColor()`` 関数でRGB LEDの色を変更。

現象の画像
------------------------

.. image:: ../img/image62.jpeg


