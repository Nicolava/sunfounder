.. _2.2.8_py:

2.2.8 超音波センサモジュール
============================

はじめに
--------------

このプロジェクトでは、超音波を使用して物体を精度よく検出し、距離を測定する超音波センサを利用します。超音波波を発信し、それらを電子信号に変換します。

必要な部品
------------------------------

このプロジェクトには以下のコンポーネントが必要です。

.. image:: ../img/list_2.2.5.png

一式をまとめて購入すると便利です、リンクはこちらです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

下のリンクからも個々に購入可能です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク
    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
        - |link_ultrasonic_buy|

回路図
-----------------

.. image:: ../img/image329.png

実験手順
-----------------------

**ステップ1:** 回路を作成する。

.. image:: ../img/image220.png

**ステップ2:** コードが保存されているフォルダに移動する。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**ステップ3:** 実行ファイルを実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.8_Ultrasonic.py

コードを実行すると、超音波センサモジュールが障害物とモジュール自体との距離を検出し、その距離値が画面に表示されます。

**コード**
  
.. note::

    以下のコードは **編集/リセット/コピー/実行/停止** が可能です。それに先立ち、 ``raphael-kit/python`` のようなソースコードのパスに移動する必要があります。コードを修正した後は、直接実行して効果を確認できます。

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    TRIG = 16
    ECHO = 18

    def setup():
        GPIO.setmode(GPIO.BOARD)
        GPIO.setup(TRIG, GPIO.OUT)
        GPIO.setup(ECHO, GPIO.IN)

    def distance():
        GPIO.output(TRIG, 0)
        time.sleep(0.000002)

        GPIO.output(TRIG, 1)
        time.sleep(0.00001)
        GPIO.output(TRIG, 0)

        while GPIO.input(ECHO) == 0:
            a = 0
        time1 = time.time()
        while GPIO.input(ECHO) == 1:
            a = 1
        time2 = time.time()

        during = time2 - time1
        return during * 340 / 2 * 100

    def loop():
        while True:
            dis = distance()
            print ('Distance: %.2f' % dis )
            time.sleep(0.3)

    def destroy():
        GPIO.cleanup()

    if __name__ == "__main__":
        setup()
        try:
            loop()
        except KeyboardInterrupt:
            destroy()

**コード説明**

.. code-block:: python

    def distance():

この関数は、返された検出距離を計算することで超音波センサの機能を実現します。

.. code-block:: python

    GPIO.output(TRIG, 1)
    time.sleep(0.00001)
    GPIO.output(TRIG, 0)

これは10usの超音波パルスを発信しています。

.. code-block:: python

    while GPIO.input(ECHO) == 0:
        a = 0
    time1 = time.time()

この空のループは、トリガーシグナルが送信されたときに、干渉するエコーシグナルがないことを確認し、現在の時間を取得するために使用されます。

.. code-block:: python

    while GPIO.input(ECHO) == 1:
        a = 1
    time2 = time.time()

この空のループは、エコーシグナルが受信されるまで次のステップに進まないようにし、現在の時間を取得するために使用されます。

.. code-block:: python

    during = time2 - time1

時間間隔の計算を実行します。

.. code-block:: python

    return during * 340 / 2 * 100

時間間隔と音の速度に基づいて距離を計算します。空気中の音の速度：340m/s。

現象の画像
------------------

.. image:: ../img/image221.jpeg