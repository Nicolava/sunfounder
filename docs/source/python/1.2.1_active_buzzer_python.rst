.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _1.2.1_py:

1.2.1 Aktiver Summer
====================

Einf√ºhrung
----------

In diesem Projekt lernen wir, wie man mit einem PNP-Transistor einen aktiven Summer zum Piepen bringt.

Ben√∂tigte Komponenten
-------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../img/list_1.2.1.png

Es ist definitiv praktisch, ein komplettes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen diese auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Schaltplan
----------

In diesem Experiment werden ein aktiver Summer, ein PNP-Transistor und ein 1k-Widerstand verwendet. Der Widerstand befindet sich zwischen der Basis des Transistors und GPIO, um den Transistor zu sch√ºtzen. Wenn der GPIO17 des Raspberry Pi durch Programmierung mit einer niedrigen Spannung (0V) versorgt wird, wird der Transistor wegen Stroms√§ttigung leiten und der Summer wird t√∂nen. Wenn jedoch eine hohe Spannung am IO des Raspberry Pi anliegt, wird der Transistor unterbrochen und der Summer gibt keinen Ton aus.

.. image:: ../img/image332.png

Experimentelle Verfahren
------------------------

**Schritt 1:** Schalten Sie die Schaltung. (Der aktive Summer hat einen wei√üen Tischaufkleber auf der Oberfl√§che und eine schwarze R√ºckseite.)

.. image:: ../img/image104.png

**Schritt 2**: √ñffnen Sie die Code-Datei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**Schritt 3**: Starten.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.2.1_ActiveBuzzer.py

Nachdem der Code ausgef√ºhrt wurde, piept der Summer.

**Code**

.. note::

    Sie k√∂nnen den untenstehenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Starten/Stoppen**. Aber bevor Sie das tun, m√ºssen Sie zum Quellcode-Pfad, wie ``raphael-kit/python``, navigieren. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um das Ergebnis zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # Set GPIO17 as buzzer pin
    BeepPin = 17

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.HIGH)

    def main():
        while True:
            # Buzzer on (Beep)
            print ('Buzzer On')
            GPIO.output(BeepPin, GPIO.LOW)
            time.sleep(0.1)
            # Buzzer off
            print ('Buzzer Off')
            GPIO.output(BeepPin, GPIO.HIGH)
            time.sleep(0.1)

    def destroy():
        # Turn off buzzer
        GPIO.output(BeepPin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()   

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the program
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

**Code-Erkl√§rung**

.. code-block:: python

    GPIO.output(BeepPin, GPIO.LOW)

Legen Sie den Summer-Pin auf ein niedriges Niveau, damit der Summer piept.

.. code-block:: python

    time.sleep(0.1)

Warten Sie 0,1 Sekunde. √Ñndern Sie die Schaltfrequenz, indem 
Sie diesen Parameter anpassen.

.. note::
    Nicht die Tonfrequenz. Ein aktiver Summer kann die Tonfrequenz nicht √§ndern.

.. code-block:: python

    GPIO.output(BeepPin, GPIO.HIGH)

Schalten Sie den Summer aus.

Ph√§nomen-Bild
--------------------

.. image:: ../img/image105.jpeg