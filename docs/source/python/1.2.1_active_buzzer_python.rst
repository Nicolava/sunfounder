.. _1.2.1_py:

1.2.1 アクティブブザー
=======================

はじめに
----------------------

このプロジェクトでは、PNPトランジスタを使ってアクティブブザーを鳴らす方法を学びます。

必要な部品
-----------------------------

このプロジェクトには以下のコンポーネントが必要です。

.. image:: ../img/list_1.2.1.png

キット全体を購入するのは確かに便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別にも購入可能です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|


回路図
----------------

この実験では、アクティブブザー、PNPトランジスタ、そして1kの抵抗をトランジスタのベースとGPIOの間に使用します。プログラミングによってRaspberry PiのGPIO17出力が低レベル（0V）に設定されると、トランジスタは電流飽和によって導通し、ブザーが音を出します。しかし、高レベルがRaspberry PiのIOに供給されると、トランジスタは遮断され、ブザーは音を出さない。

.. image:: ../img/image332.png


実験手順
----------------------

**ステップ1:** 回路を作成します。（アクティブブザーは表面に白いテーブルステッカー、裏面は黒です。）

.. image:: ../img/image104.png

**ステップ2:** コードファイルを開きます。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**ステップ3:** 実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.2.1_ActiveBuzzer.py

コードが実行され、ブザーが鳴ります。

**コード**

.. note::

    下記のコードは **修正/リセット/コピー/実行/停止** が可能です。ただし、それ以前に ``raphael-kit/python`` のようなソースコードパスに移動する必要があります。コードを修正した後、その効果を直接確認することができます。

.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO
    import time

    # Set GPIO17 as buzzer pin
    BeepPin = 17

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.HIGH)

    def main():
        while True:
            # Buzzer on (Beep)
            print ('Buzzer On')
            GPIO.output(BeepPin, GPIO.LOW)
            time.sleep(0.1)
            # Buzzer off
            print ('Buzzer Off')
            GPIO.output(BeepPin, GPIO.HIGH)
            time.sleep(0.1)

    def destroy():
        # Turn off buzzer
        GPIO.output(BeepPin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()   

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the program
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()

**コード説明**

.. code-block:: python

    GPIO.output(BeepPin, GPIO.LOW)

ブザーピンを低レベルに設定して、ブザーを鳴らします。

.. code-block:: python

    time.sleep(0.1)

0.1秒待ちます。このパラメータを変更することで、切替頻度を変更できます。

.. note::
    音の周波数ではありません。アクティブブザーは音の周波数を変更できません。

.. code-block:: python

    GPIO.output(BeepPin, GPIO.HIGH)

ブザーを停止します。

現象の画像
-----------------

.. image:: ../img/image105.jpeg
