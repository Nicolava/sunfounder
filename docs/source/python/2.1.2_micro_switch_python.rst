.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime speciali.
    - **Sconti esclusivi**: Approfitta di sconti riservati sui nostri prodotti pi√π recenti.
    - **Promozioni festive e concorsi**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.2_py:

2.1.2 Microinterruttore
======================

Introduzione
--------------------

In questo progetto, impareremo a utilizzare il microinterruttore. Un microinterruttore √® un piccolo e molto sensibile interruttore che richiede una minima compressione per essere attivato. Grazie alla sua affidabilit√† e sensibilit√†, viene spesso utilizzato come dispositivo di sicurezza.

√à usato per impedire la chiusura delle porte se qualcosa o qualcuno si trova nel mezzo e per altre applicazioni simili.

Componenti Necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/2.1.2component.png

√à sicuramente comodo acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ARTICOLI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_micro_switch`
        - \-
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|

Schema Elettrico
---------------------

Collega il pin sinistro del microinterruttore al GPIO17, e i due LED rispettivamente 
ai pin GPIO22 e GPIO27. Quando premi e rilasci il braccio mobile del microinterruttore, 
vedrai i due LED accendersi alternativamente.

.. image:: ../img/image305.png


.. image:: ../img/micro_Schematic.png


Procedure Sperimentali
-------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/2.1.4fritzing.png

**Passo 2**: Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**Passo 3**: Esegui il codice.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.2_MicroSwitch.py

Mentre il codice √® in esecuzione, premi il braccio mobile e il LED giallo si accender√†; rilascia il braccio mobile e si accender√† il LED rosso.

**Codice**

.. note::

    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice qui sotto. Ma prima devi accedere al percorso del codice come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import time

    # Imposta il #17 come pin del microinterruttore, #22 come pin led1, #27 come pin led2
    microPin = 17
    led1Pin = 22
    led2Pin = 27

    # Definisci una funzione di setup per alcune impostazioni iniziali
    def setup():
        # Imposta la modalit√† GPIO su BCM
        GPIO.setmode(GPIO.BCM)
        # Imposta microPin come input
        # Imposta ledPin come output, 
        # e il livello iniziale su Alto (3.3v)
        GPIO.setup(microPin, GPIO.IN)
        GPIO.setup(led1Pin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(led2Pin, GPIO.OUT, initial=GPIO.HIGH)

    # Definisci una funzione main per il processo principale
    def main():
        while True:
            # microinterruttore alto, led1 acceso
            if GPIO.input(microPin) == 1:
                print ('LED1 ON')
                GPIO.output(led1Pin, GPIO.LOW)
                GPIO.output(led2Pin, GPIO.HIGH)

            # microinterruttore basso, led2 acceso
            if GPIO.input(microPin) == 0:
                print ('    LED2 ON')
                GPIO.output(led2Pin, GPIO.LOW)
                GPIO.output(led1Pin, GPIO.HIGH)

            time.sleep(0.5)
    # Definisci una funzione destroy per pulire tutto dopo
    # la fine dello script 
    def destroy():
        # Spegni il LED
        GPIO.output(led1Pin, GPIO.HIGH)
        GPIO.output(led2Pin, GPIO.HIGH)
        # Rilascia le risorse
        GPIO.cleanup()                     

    # Se esegui questo script direttamente, fai:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # Quando viene premuto 'Ctrl+C', il programma 
        # destroy() verr√† eseguito.
        except KeyboardInterrupt:
            destroy()	

**Spiegazione del Codice**

.. code-block:: python

    if GPIO.input(slidePin) == 1:
                GPIO.output(led1Pin, GPIO.LOW)
                GPIO.output(led2Pin, GPIO.HIGH)

Quando il braccio mobile del microinterruttore √® rilasciato, il pin sinistro √® collegato al pin destro; in questo momento, verr√† letto un livello alto su GPIO17, e quindi si accender√† LED1 e si spegner√† LED2.

.. code-block:: python

    if GPIO.input(slidePin) == 0:
                GPIO.output(led2Pin, GPIO.LOW)
                GPIO.output(led1Pin, GPIO.HIGH)

Quando il braccio mobile viene premuto, il pin sinistro e quello centrale sono collegati. A questo punto verr√† letto un livello basso su GPIO17, quindi si accender√† LED2 e si spegner√† LED1.

Immagine del Fenomeno
-------------------------

.. image:: ../img/2.1.2micro_switch.JPG
