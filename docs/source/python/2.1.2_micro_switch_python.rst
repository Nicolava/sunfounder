.. _2.1.2_py:

2.1.2 マイクロスイッチ
======================

はじめに
--------------------

このプロジェクトでは、マイクロスイッチの使い方を学びます。マイクロスイッチは、非常に感度の高い小型のスイッチで、わずかな圧力で作動します。その信頼性と感度のため、マイクロスイッチはよく安全装置として使用されます。

何か、または誰かが邪魔になっている場合にドアが閉まるのを防ぐなど、その他の類似した用途で使用されます。

必要な部品
------------------------------

このプロジェクトでは、以下のコンポーネントが必要です。

.. image:: ../img/2.1.2component.png

一式をまとめて購入すると非常に便利です。リンクはこちらです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前	
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別にも購入できます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_resistor`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_micro_switch`
        - \-
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|

回路図
-----------------

マイクロスイッチの左側のピンをGPIO17に、そして2つのLEDをそれぞれGPIO22とGPIO27に接続します。マイクロスイッチの動き腕を押してから離すと、2つのLEDが交互に点灯します。

.. image:: ../img/image305.png

.. image:: ../img/micro_Schematic.png

実験手順
-----------------------

**ステップ1:** 回路を組み立てます。

.. image:: ../img/2.1.4fritzing.png

**ステップ2**: コードが格納されているフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**ステップ3**: 実行。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.2_MicroSwitch.py

コードが実行中のときに動き腕を押すと、黄色のLEDが点灯します。動き腕を離すと、赤色のLEDが点灯します。

**コード**

.. note::

    以下のコードは **修正/リセット/コピー/実行/停止** が可能です。ただし、事前にソースコードのパス、例えば ``raphael-kit/python`` に移動する必要があります。コードを修正した後は、そのまま実行して効果を確認できます。

.. raw:: html

    <run></run>



.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import time

    # Set #17 as micro switch pin, #22 as led1 pin, #27 as led2 pin
    microPin = 17
    led1Pin = 22
    led2Pin = 27

    # Define a setup function for some setup
    def setup():
        # Set the GPIO modes to BCM Numbering
        GPIO.setmode(GPIO.BCM)
        # Set microPin input
        # Set ledPin output, 
        # and initial level to High(3.3v)
        GPIO.setup(microPin, GPIO.IN)
        GPIO.setup(led1Pin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(led2Pin, GPIO.OUT, initial=GPIO.HIGH)

    # Define a main function for main process
    def main():
        while True:
            # micro switch high, led1 on
            if GPIO.input(microPin) == 1:
                print ('LED1 ON')
                GPIO.output(led1Pin, GPIO.LOW)
                GPIO.output(led2Pin, GPIO.HIGH)

            # micro switch low, led2 on
            if GPIO.input(microPin) == 0:
                print ('    LED2 ON')
                GPIO.output(led2Pin, GPIO.LOW)
                GPIO.output(led1Pin, GPIO.HIGH)

            time.sleep(0.5)
    # Define a destroy function for clean up everything after
    # the script finished 
    def destroy():
        # Turn off LED
        GPIO.output(led1Pin, GPIO.HIGH)
        GPIO.output(led2Pin, GPIO.HIGH)
        # Release resource
        GPIO.cleanup()                     

    # If run this script directly, do:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # When 'Ctrl+C' is pressed, the program 
        # destroy() will be  executed.
        except KeyboardInterrupt:
            destroy()	

**コードの説明**

.. code-block:: python

    if GPIO.input(slidePin) == 1:
                GPIO.output(led1Pin, GPIO.LOW)
                GPIO.output(led2Pin, GPIO.HIGH)

マイクロスイッチの動くアームが放された状態で、左ピンと右ピンが接続される。この時、GPIO17でHighレベルが読み取られ、その後LED1が点灯し、LED2が消灯する。

.. code-block:: python

    if GPIO.input(slidePin) == 0:
                GPIO.output(led2Pin, GPIO.LOW)
                GPIO.output(led1Pin, GPIO.HIGH)

動くアームが押された状態で、左ピンと中央ピンが接続される。この時点でGPIO17でLowレベルが読み取られ、その後LED2が点灯し、LED1が消灯する。

現象の画像
------------

.. image:: ../img/2.1.2micro_switch.JPG