.. _2.2.6_py:

2.2.6 速度センサーモジュール
=============================

はじめに
------------------

本プロジェクトでは、速度センサーモジュールの使い方を学びます。速度センサーモジュールは、モーターなどの回転する物体の速度を測定するためのタコメーターの一種です。

必要な部品
------------------------------

本プロジェクトに必要なコンポーネントは以下の通りです。

.. image:: ../img/2.2.6component.png
    :width: 700
    :align: center

全体のキットを購入すると便利です。リンクはこちら：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから、個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_speed_sensor`
        - \-

回路図
-----------------------

.. image:: ../img/2.2.6circuit.png
    :width: 400
    :align: center

実験手順
------------------------------

**ステップ1:** 回路を作成する。

.. image:: ../img/2.2.6fritzing.png
    :width: 700
    :align: center


**ステップ2:** ディレクトリを変更する。

.. raw:: html

   <run></run>

.. code-block::
    
    cd ~/raphael-kit/python

**ステップ3:** 実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.6_speed_sensor_module.py

コードが実行された後、緑色のLEDが点灯します。速度センサーモジュールのギャップに障害物を置くと、「light blocked」と表示され、赤いLEDが点灯します。障害物を取り除くと、緑色のLEDが再び点灯します。

コード
-------------

.. note::

    下記のコードは **変更/リセット/コピー/実行/停止** ができます。ただし、それ以前に、ソースコードのパス（例： ``raphael-kit/python`` ）に移動する必要があります。コードを変更した後、その効果を直接確認するために実行できます。

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO

    speedPin  = 17
    Gpin   = 27
    Rpin   = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # 
        GPIO.setup(Gpin, GPIO.OUT)     # Set Green Led Pin mode to output
        GPIO.setup(Rpin, GPIO.OUT)     # Set Red Led Pin mode to output
        GPIO.setup(speedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Set speedPin's mode is input, and pull up to high level(3.3V)
        GPIO.add_event_detect(speedPin, GPIO.BOTH, callback=detect, bouncetime=200)

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)
        if x == 1:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
            print ('Light was blocked')
            
    def detect(chn):
        Led(GPIO.input(speedPin))

    def loop():
        while True:
            pass

    def destroy():
        GPIO.output(Gpin, GPIO.LOW)       # Green led off
        GPIO.output(Rpin, GPIO.LOW)       # Red led off
        GPIO.cleanup()                     # Release resource

    if __name__ == '__main__':     # Program start from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
            destroy()

コードの説明
------------------

.. code-block:: python

    GPIO.add_event_detect(speedPin, GPIO.BOTH, callback=detect, bouncetime=200)

ここでイベントを追加し、 ``speedPin`` のレベルが変わるたびに ``detect()`` を呼び出して、2つのLEDをオン/オフで制御します。

.. code-block:: python

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)
        if x == 1:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
            print ('Light was blocked')            

``Led()`` という関数を定義し、引数が1のときは赤いLEDをオンにして ``Light was blocked`` と出力します。引数が0のときは緑色のLEDをオンにします。

.. code-block:: python

    def detect(chn):
        Led(GPIO.input(speedPin))

コールバック関数を定義し、 ``speedPin`` の値に応じて2つのLEDをオン/オフで制御します。

現象の画像
-----------------------

.. image:: ../img/2.2.6photo_interrrupter.JPG
   :width: 500
   :align: center

