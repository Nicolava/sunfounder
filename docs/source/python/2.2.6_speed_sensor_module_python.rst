.. note::

    ¬°Hola! Bienvenidos a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _2.2.6_py:

2.2.6 M√≥dulo Sensor de Velocidad
========================================

Introducci√≥n
-------------------

En este proyecto, aprenderemos el uso del m√≥dulo sensor de velocidad. Un m√≥dulo sensor de velocidad es un tipo de tac√≥metro que se utiliza para medir la velocidad de un objeto rotativo como un motor.

Componentes Necesarios
-----------------------------

En este proyecto, necesitaremos los siguientes componentes.

.. image:: ../img/2.2.6component.png
    :width: 700
    :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_speed_sensor`
        - \-

Diagrama Esquem√°tico
-------------------------

.. image:: ../img/2.2.6circuit.png
    :width: 400
    :align: center

Procedimientos Experimentales
----------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/2.2.6fritzing.png
    :width: 700
    :align: center

**Paso 2:** Cambia de directorio.

.. raw:: html

   <run></run>

.. code-block::
    
    cd ~/raphael-kit/python

**Paso 3:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.6_speed_sensor_module.py

Despu√©s de ejecutar el c√≥digo, el LED verde se encender√°. 
Si colocas un obst√°culo en la ranura del m√≥dulo sensor de velocidad, 
se imprimir√° "luz bloqueada" en la pantalla y se encender√° el LED rojo. 
Retira el obst√°culo y el LED verde se encender√° nuevamente.

**C√≥digo**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.


.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO

    speedPin  = 17
    Gpin   = 27
    Rpin   = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # 
        GPIO.setup(Gpin, GPIO.OUT)     # Configura el modo del pin del LED verde como salida
        GPIO.setup(Rpin, GPIO.OUT)     # Configura el modo del pin del LED rojo como salida
        GPIO.setup(speedPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Configura el modo del pin de velocidad como entrada y con√©ctalo a un nivel alto (3.3V)
        GPIO.add_event_detect(speedPin, GPIO.BOTH, callback=detect, bouncetime=200)

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)
        if x == 1:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
            print ('Light was blocked')
            
    def detect(chn):
        Led(GPIO.input(speedPin))

    def loop():
        while True:
            pass

    def destroy():
        GPIO.output(Gpin, GPIO.LOW)       # Apaga el LED verde
        GPIO.output(Rpin, GPIO.LOW)       # Apaga el LED rojo
        GPIO.cleanup()                     # Libera recursos

    if __name__ == '__main__':     # El programa empieza aqu√≠
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # Cuando se presiona 'Ctrl+C', el programa hijo ejecutar√° destroy().
            destroy()

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    GPIO.add_event_detect(speedPin, GPIO.BOTH, callback=detect, bouncetime=200)

A√±ade un evento aqu√≠, activado por un cambio en el nivel de ``speedPin`` y llama a ``detect()`` para controlar el encendido y apagado de los 2 LEDs.

.. code-block:: python

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)
        if x == 1:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
            print ('Light was blocked')			

Define una funci√≥n ``Led()`` que enciende el LED rojo e imprime ``La luz fue bloqueada`` cuando el par√°metro es 1; enciende el LED verde cuando el par√°metro es 0.

.. code-block:: python

    def detect(chn):
        Led(GPIO.input(speedPin))

Define una funci√≥n de callback donde el valor de ``speedPin`` controlar√° el encendido o apagado de los 2 LEDs.



**Imagen del Fen√≥meno**
-------------------------------

.. image:: ../img/2.2.6photo_interrrupter.JPG
   :width: 500
   :align: center
