.. _2.2.5_py:

2.2.5 IR障害物回避センサー
=============================

はじめに
-----------------

本プロジェクトでは、IR障害物回避モジュールを学びます。これは、短距離で障害物を検出できるセンサーモジュールで、干渉が少なく、組み立てやすく、使いやすいなどの特長があります。ロボットの障害物回避や、障害物回避トロリー、組み立てラインのカウンティングなど、幅広い用途で利用できます。

.. image:: ../img/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

必要な部品
------------------------------

このプロジェクトには以下のコンポーネントが必要です。

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

一式をまとめて購入するのが便利です。以下がそのリンクです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することも可能です。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`障害物回避モジュール`
        - |link_obstacle_avoidance_buy|

回路図
-----------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

実験手順
-------------------------

**ステップ1：** 回路を組む

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**ステップ2：** ディレクトリを変更する。

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/python

**ステップ3：** 実行する。

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 2.2.5_IrObstacle.py

コードが実行された後、モジュールのプローブの前に手をかざすと、モジュール上の出力インジケーターが点灯し、「Detected Barrier!」というメッセージが画面上で繰り返し表示されます。

**コード**

.. note::

   下記のコードは **修正/リセット/コピー/実行/停止** が可能です。ただし、事前にソースコードのパス（例： ``raphael-kit/python`` ）に移動する必要があります。

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO
   import time

   ObstaclePin = 17

   def setup():
      GPIO.setmode(GPIO.BCM)      # Numbers GPIOs by physical location
      GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")
			   time.sleep(1)
            

   def destroy():
      GPIO.cleanup()                      # Release resource

   if __name__ == '__main__':     # Program start from here
      setup()
      try:
         loop()
      except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
         destroy()

**コードの説明**

.. code-block:: python

   def setup():
   GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
   GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIOモードをBCMナンバリングに設定。 ``ObstaclePin`` を入力モードにして、高レベル（3.3V）に初期化します。

.. code-block:: python

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")

``ObstaclePin`` がローレベルの場合、「Detected Barrier!」と出力します。これは、障害物が検出されたことを意味します。

現象の画像
-----------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   :align: center