.. nota::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime speciali.
    - **Sconti esclusivi**: Approfitta di sconti riservati sui nostri prodotti pi√π recenti.
    - **Promozioni festive e concorsi**: Partecipa a concorsi e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.5_py:

2.2.5 Sensore di Evitamento Ostacoli IR
===========================================

Introduzione
----------------

In questo progetto, impareremo a conoscere il modulo sensore a infrarossi per l'evitamento degli ostacoli, un modulo sensore che pu√≤ essere utilizzato per rilevare ostacoli a breve distanza, con poca interferenza, facile da assemblare e da usare, ecc. Pu√≤ essere ampiamente utilizzato per evitare ostacoli nei robot, nei carrelli di evitamento ostacoli, nel conteggio delle linee di montaggio, ecc.

.. image:: ../img/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

Componenti Necessari
------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

√à sicuramente comodo acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ARTICOLI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Schema Elettrico
----------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**Passo 2:** Cambia directory.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/python

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 2.2.5_IrObstacle.py

Dopo che il codice √® stato eseguito, quando metti la mano davanti alla sonda del modulo, l'indicatore di uscita sul modulo si accender√† e "Detected Barrier!" verr√† ripetutamente stampato sullo schermo fino a quando la mano non verr√† rimossa.

**Codice**

.. note::

   Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice qui sotto. Ma prima devi accedere al percorso del codice come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO
   import time

   ObstaclePin = 17

   def setup():
      GPIO.setmode(GPIO.BCM)       # Numerazione GPIO secondo la posizione fisica
      GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")
            time.sleep(1)
            

   def destroy():
      GPIO.cleanup()                     # Rilascia le risorse

   if __name__ == '__main__':     # Il programma parte da qui
      setup()
      try:
         loop()
      except KeyboardInterrupt:  # Quando viene premuto 'Ctrl+C', il programma distrugge() sar√† eseguito.
         destroy()

**Spiegazione del Codice**

.. code-block:: python

   def setup():
   GPIO.setmode(GPIO.BCM)       # Numerazione GPIO secondo la posizione fisica
   GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

Imposta la modalit√† GPIO su numerazione BCM. Imposta ``ObstaclePin`` in modalit√† input e inizializzalo a livello alto (3,3v).

.. code-block:: python

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")

Quando ``ObstaclePin`` √® a livello basso, stampa "Detected Barrier!". Significa che √® stato rilevato un ostacolo.

Immagine del Fenomeno
--------------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   :align: center
