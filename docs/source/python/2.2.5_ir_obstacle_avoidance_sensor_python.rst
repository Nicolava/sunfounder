 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.5_py:

2.2.5 Capteur d'√âvitement d'Obstacles IR
============================================

Introduction
---------------

Dans ce projet, nous allons d√©couvrir le module d'√©vitement d'obstacles IR, qui est un module capteur pouvant √™tre utilis√© pour d√©tecter des obstacles √† courte distance, avec une petite interf√©rence, facile √† assembler, facile √† utiliser, etc. Il peut √™tre largement utilis√© dans l'√©vitement d'obstacles pour robots, les chariots d'√©vitement d'obstacles, le comptage sur les cha√Ænes de montage, etc.

.. image:: ../img/2.2.5IR_Obstacle.png
   :width: 300
   :align: center

Composants N√©cessaires
-------------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Sch√©ma √âlectrique
--------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/python

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 2.2.5_IrObstacle.py

Apr√®s l'ex√©cution du code, lorsque vous mettez votre main devant la sonde du module, l'indicateur 
de sortie sur le module s'allume et "Detected Barrier!" sera imprim√© √† l'√©cran de mani√®re r√©p√©t√©e 
jusqu'√† ce que vous retiriez votre main.

**Code**

.. note::

   Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   import RPi.GPIO as GPIO
   import time

   ObstaclePin = 17

   def setup():
      GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
      GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")
			   time.sleep(1)
            

   def destroy():
      GPIO.cleanup()                     # Release resource

   if __name__ == '__main__':     # Program start from here
      setup()
      try:
         loop()
      except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the child program destroy() will be  executed.
         destroy()

**Explication du Code**

.. code-block:: python

   def setup():
   GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
   GPIO.setup(ObstaclePin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

Configurer le mode GPIO en num√©rotation BCM. Configurer ``ObstaclePin`` en mode entr√©e et l'initialiser √† un niveau haut (3,3V).

.. code-block:: python

   def loop():
      while True:
         if (0 == GPIO.input(ObstaclePin)):
            print ("Detected Barrier!")

Lorsque ``ObstaclePin`` est √† un niveau bas, afficher "Detected Barrier!". Cela signifie qu'un obstacle est d√©tect√©.

Image du Ph√©nom√®ne
----------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   :align: center