.. _4.1.4_py:

4.1.4 Automatische Aufnahmekamera
===================================

Einführung
-----------------

Wenn Sie unterwegs sind, könnten die kleinen Eichhörnchen im Wald Ihren Fenstersims besuchen. Lassen Sie uns eine automatische Aufnahmekamera bauen, um Fotos von diesen kleinen Lieblingen zu machen!

Benötigte Komponenten
------------------------------

Für dieses Projekt benötigen wir folgende Komponenten.

.. image:: ../img/3.1.18components.png
  :width: 800
  :align: center

Es ist sicherlich praktisch, ein ganzes Kit zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|
    *   - :ref:`cpn_pir`
        - \-

Schaltplan
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../img/1.1.18_schematic.png
   :width: 400
   :align: center

Experimentelle Verfahren
----------------------------

Bevor Sie mit diesem Projekt beginnen, stellen Sie sicher, dass Sie :ref:`3.1.1_py` abgeschlossen haben.

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../img/3.1.18fritzing.png
  :width: 800
  :align: center

**Schritt 2:** Um das Kameramodul anzuschließen und die Konfiguration abzuschließen, siehe: :ref:`cpn_camera_module`.

**Schritt 3:** Wechseln Sie auf den Raspberry Pi Desktop. Für ein besseres Erlebnis benötigen Sie möglicherweise einen Bildschirm, siehe: `Verbinden Sie Ihren Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Oder greifen Sie aus der Ferne auf den Raspberry Pi Desktop zu. Eine detaillierte Anleitung finden Sie unter :ref:`remote_desktop`.

**Schritt 4:** Öffnen Sie ein Terminal und wechseln Sie in das Verzeichnis des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Schritt 5:** Ausführen.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.4_AutomaticCaptureCamera.py

Nachdem der Code ausgeführt wurde, wird PIR die Umgebung erkennen. Wenn es ein kleines Eichhörnchen bemerkt, wird die Kamera ein Foto machen. Das Foto-Intervall beträgt 3 Sekunden, und die Gesamtzahl der aufgenommenen Fotos wird im Druckfenster angezeigt.

Am PIR-Modul befinden sich zwei Potentiometer: eines zur Einstellung der Empfindlichkeit und eines zur Einstellung der Erkennungsentfernung. Um das PIR-Modul besser funktionieren zu lassen, drehen Sie beide gegen den Uhrzeigersinn bis zum Anschlag.

.. image:: ../img/PIR_TTE.png
    :width: 400
    :align: center

.. note::

   Sie können auch ``4.1.4_AutomaticCaptureCamera.py`` im Pfad ``~/raphael-kit/python/`` mit einer Python-IDE öffnen, auf die Schaltfläche Ausführen klicken, um den Code auszuführen und den Code mit der Stopp-Schaltfläche anhalten.

**Code**

.. note::
    Sie können den untenstehenden Code **Ändern/Zurücksetzen/Kopieren/Ausführen/Stoppen**. Bevor Sie das tun, müssen Sie jedoch zum Quellcodepfad wie ``raphael-kit/python`` wechseln. Nachdem Sie den Code geändert haben, können Sie ihn direkt ausführen, um den Effekt zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from picamera import PiCamera
   import RPi.GPIO as GPIO
   import time
   import os
   user = os.getlogin()
   user_home = os.path.expanduser(f'~{user}')


   camera = PiCamera()

   pirPin = 17    # the pir connect to pin17

   def setup():
      GPIO.setmode(GPIO.BCM)
      GPIO.setup(pirPin, GPIO.IN)
      camera.start_preview(alpha=200)

   def main():
      i = 1
      while True:
         pirVal = GPIO.input(pirPin)
         if pirVal==GPIO.HIGH:
               camera.capture(f'{user_home}/capture%s.jpg' % i)
               print('The number is %s' % i)
               time.sleep(3)
               i = i + 1

   def destroy():
      GPIO.cleanup()
      camera.stop_preview()

   if __name__ == '__main__':
      setup()
      try:
         main()
      except KeyboardInterrupt:
         destroy()

**Code-Erklärung**

.. code-block:: python

   pirVal = GPIO.input(pirPin)
   if pirVal==GPIO.HIGH:
         camera.capture(f'{user_home}/capture%s.jpg' % i)
         print('The number is %s' % i)
         time.sleep(3)
         i = i + 1

Jedes Mal, wenn ein kleines Eichhörnchen vom PIR-Modul erkannt wird, wird der Raspberry Pi ein Foto aufnehmen und Ihnen über das Ausgabefenster mitteilen, wie viele Fotos bereits gemacht wurden. Das Intervall zwischen den Fotos beträgt 3 Sekunden.

Phänomen-Bild
------------------------

.. image:: ../img/4.1.4spycamera.JPG
   :align: center
