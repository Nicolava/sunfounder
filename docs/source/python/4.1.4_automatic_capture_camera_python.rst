.. note::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Approfondisci l'esplorazione del Raspberry Pi, Arduino ed ESP32 con altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Accedi in anteprima agli annunci di nuovi prodotti e alle anticipazioni esclusive.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni e omaggi festivi**: Partecipa a omaggi e promozioni speciali durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _4.1.4_py:

4.1.4 Fotocamera automatica di cattura
==========================================

Introduzione
-----------------

Quando sei fuori, gli scoiattoli del bosco potrebbero visitare il tuo davanzale. Creiamo una fotocamera automatica di cattura per immortalare queste piccole creature!

Componenti necessari
------------------------------

In questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../img/3.1.18components.png
  :width: 800
  :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|
    *   - :ref:`cpn_pir`
        - \-

Schema elettrico
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../img/1.1.18_schematic.png
   :width: 400
   :align: center

Procedura sperimentale
------------------------------

Prima di iniziare questo progetto, assicurati di aver completato :ref:`3.1.1_py`.

**Passo 1:** Costruisci il circuito.

.. image:: ../img/3.1.18fritzing.png
  :width: 800
  :align: center

**Passo 2:** Per collegare il modulo fotocamera e completare la configurazione, fai riferimento a: :ref:`cpn_camera_module`.

**Passo 3:** Accedi al Desktop del Raspberry Pi. Potresti aver bisogno di uno schermo per un'esperienza migliore, fai riferimento a: `Connetti il tuo Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Oppure accedi al desktop del Raspberry Pi da remoto, per un tutorial dettagliato fai riferimento a: :ref:`remote_desktop`.

**Passo 4:** Apri un Terminale ed entra nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Passo 5:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.4_AutomaticCaptureCamera.py

Dopo l'esecuzione del codice, il PIR rilever√† l'ambiente circostante e, se percepisce lo scoiattolo, la fotocamera scatter√† una foto.
L'intervallo tra le foto √® di 3 secondi e il numero totale di foto scattate verr√† mostrato nella finestra di stampa.

Ci sono due potenziometri sul modulo PIR: uno per regolare la sensibilit√† e l'altro per regolare la distanza di rilevamento. Per far funzionare meglio il modulo PIR, √® necessario girarli entrambi completamente in senso antiorario.

.. image:: ../img/PIR_TTE.png
    :width: 400
    :align: center

.. note::

   Puoi anche aprire ``4.1.4_AutomaticCaptureCamera.py`` nel percorso ``~/raphael-kit/python/`` utilizzando un IDE Python, clicca sul pulsante Esegui per eseguire e interrompi il codice con il pulsante Stop.

**Codice**

.. note::
    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima di farlo, devi andare nel percorso del codice sorgente come ``raphael-kit/python``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from picamera import PiCamera
   import RPi.GPIO as GPIO
   import time
   import os
   user = os.getlogin()
   user_home = os.path.expanduser(f'~{user}')


   camera = PiCamera()

   pirPin = 17    # il PIR √® collegato al pin17

   def setup():
      GPIO.setmode(GPIO.BCM)
      GPIO.setup(pirPin, GPIO.IN)
      camera.start_preview(alpha=200)

   def main():
      i = 1
      while True:
         pirVal = GPIO.input(pirPin)
         if pirVal==GPIO.HIGH:
               camera.capture(f'{user_home}/capture%s.jpg' % i)
               print('The number is %s' % i)
               time.sleep(3)
               i = i + 1

   def destroy():
      GPIO.cleanup()
      camera.stop_preview()

   if __name__ == '__main__':
      setup()
      try:
         main()
      except KeyboardInterrupt:
         destroy()

**Spiegazione del Codice**

.. code-block:: python

   pirVal = GPIO.input(pirPin)
   if pirVal==GPIO.HIGH:
         camera.capture(f'{user_home}/capture%s.jpg' % i)
         print('The number is %s' % i)
         time.sleep(3)
         i = i + 1

Ogni volta che lo scoiattolo viene rilevato dal modulo PIR, il Raspberry Pi scatter√† una foto e ti dir√† attraverso la finestra di stampa quante foto sono state scattate. L'intervallo tra ogni foto √® di 3 secondi.

Immagine del fenomeno
---------------------------

.. image:: ../img/4.1.4spycamera.JPG
   :align: center
