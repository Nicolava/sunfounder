.. _4.1.1_py:

4.1.1 カメラ
~~~~~~~~~~~~~~~~

はじめに
-----------------

このセクションでは、ボタンを押すとLEDが点滅しながら写真を撮るカメラを作成します。

必要な部品
------------------------------

このプロジェクトに必要なパーツは以下の通りです。

.. image:: ../img/3.1.15camera_list.png
  :width: 800
  :align: center

一式をまとめて購入する方が便利です。リンクはこちらです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから、各パーツを個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`ボタン`
        - |link_button_buy|
    *   - :ref:`カメラモジュール`
        - |link_camera_buy|

回路図
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
============ ======== ======== ===

.. image:: ../img/camera_schematic.png
   :width: 500
   :align: center

実験手順
------------------------------

**ステップ1:** 回路を組み立てます。

.. image:: ../img/3.1.15camera_fritzing.png
  :width: 800
  :align: center

**ステップ2:** カメラモジュールを接続し、設定を完了してください。詳しくは :ref:`カメラモジュール` を参照。

**ステップ3:** Raspberry Piデスクトップに入ります。より良い体験のためにスクリーンが必要かもしれません： `Raspberry Piを接続する <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_ を参照してください。リモートからRaspberry Piのデスクトップにアクセスすることもできます。詳しいチュートリアルは :ref:`remote_desktop_1` を参照してください。

**ステップ4:** ターミナルを開き、コードのディレクトリに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**ステップ5:** コードを実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.1_Camera.py

コードが実行されると、ボタンを押すとRaspberry PiはLEDを点滅させて写真を撮ります。写真は ``my_photo.jpg`` という名前で ``~`` ディレクトリに保存されます。

.. note::

    PythonのIDEで ``~/raphael-kit/python/`` の ``4.1.1_Camera.py`` を開き、実行ボタンでコードを実行、ストップボタンでコードを停止することもできます。

PCに写真をダウンロードする方法については :ref:`Filezilla Software` をご参照ください。

**コード**

.. note::
    コードは **修正/リセット/コピー/実行/停止** が可能です。ただし、その前に ``raphael-kit/python`` のようなソースコードのディレクトリに移動する必要があります。

.. raw:: html

    <run></run>

.. code-block:: python

	#!/usr/bin/env python3

	from picamera import PiCamera
	import RPi.GPIO as GPIO
	import time
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')


	camera = PiCamera()

	LedPin = 17 # Set GPIO17 as LED pin
	BtnPin = 18 # Set GPIO18 as button pin

	status = False

	def setup():
		GPIO.setmode(GPIO.BCM)
		GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
		GPIO.setup(BtnPin, GPIO.IN)
		camera.start_preview(alpha=200)

	def takePhotos(pin):
		global status
		status = True

	def main():
		global status
		GPIO.add_event_detect(BtnPin, GPIO.FALLING, callback=takePhotos)
		while True:
			if status:
				for i in range(5):
					GPIO.output(LedPin, GPIO.LOW)
					time.sleep(0.1)
					GPIO.output(LedPin, GPIO.HIGH)
					time.sleep(0.1)
				camera.capture(f'{user_home}/my_photo.jpg')
				print ('Take a photo!')          
				status = False
			else:
				GPIO.output(LedPin, GPIO.HIGH)
			time.sleep(1)

	def destroy():
		camera.stop_preview()
		GPIO.output(LedPin, GPIO.HIGH)
		GPIO.cleanup()

	if __name__ == '__main__':
		setup()
		try:
			main()
		except KeyboardInterrupt:
			destroy()

**コード説明**

.. code-block:: python

    GPIO.add_event_detect(BtnPin, GPIO.FALLING, callback=takePhotos)

``BtnPin`` のイベントを設定し、ボタンが押された場合（ハイレベルからローレベルに変化）に ``takePhotos()`` 関数を呼び出します。

.. code-block:: python

    def takePhotos(pin):
        global status
        status = True

``takePhotos()`` が呼び出された際に、 ``status`` を ``True`` に設定します。

.. code-block:: python

    if status:
        for i in range(5):
            GPIO.output(LedPin, GPIO.LOW)
            time.sleep(0.1)
            GPIO.output(LedPin, GPIO.HIGH)
            time.sleep(0.1)
        camera.capture(f'{user_home}/my_photo.jpg')
        print ('Take a photo!')          
        status = False
    else:
        GPIO.output(LedPin, GPIO.HIGH)
    time.sleep(1)

``status`` が ``True`` であれば、Raspberry PiはLEDを点滅させて写真を撮ります。写真は ``my_photo.jpg`` という名前で ``~`` ディレクトリに保存されます。

現象の画像
------------------------

.. image:: ../img/4.1.1camera.JPG
   :align: center
