.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _4.1.1_py:

4.1.1 Kamera
===========================

Einf√ºhrung
-----------------

Hier werden wir eine Kamera mit einem Verschluss bauen. Wenn Sie den Knopf dr√ºcken, macht die Kamera ein Foto, w√§hrend die LED blitzt.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../img/3.1.15camera_list.png
  :width: 800
  :align: center

Es ist definitiv praktisch, ein komplettes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|

Schaltplan
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
============ ======== ======== ===

.. image:: ../img/camera_schematic.png
   :width: 500
   :align: center

Versuchsverfahren
------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../img/3.1.15camera_fritzing.png
  :width: 800
  :align: center

**Schritt 2:** Um das Kameramodul anzuschlie√üen und die Konfiguration abzuschlie√üen, beachten Sie bitte: :ref:`cpn_camera_module`.

**Schritt 3:** Gehen Sie zum Raspberry Pi Desktop. F√ºr eine bessere Erfahrung ben√∂tigen Sie vielleicht einen Bildschirm. Siehe: `Verbinden Sie Ihren Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Oder greifen Sie remote auf den Raspberry Pi Desktop zu. F√ºr ein detailliertes Tutorial siehe :ref:`remote_desktop`.

**Schritt 4:** √ñffnen Sie ein Terminal und navigieren Sie zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Schritt 5:** Ausf√ºhren.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.1_Camera.py

Nachdem der Code ausgef√ºhrt wurde, dr√ºcken Sie den Knopf. Der Raspberry Pi wird die LED blinken lassen und ein Foto machen. Das Foto wird als ``my_photo.jpg`` benannt und im Verzeichnis ``~`` gespeichert.

.. note::

    Sie k√∂nnen auch ``4.1.1_Camera.py`` im Pfad ``~/raphael-kit/python/`` mit einer Python-IDE √∂ffnen, den Run-Button klicken, um es auszuf√ºhren, und den Code mit dem Stop-Button stoppen.

Wenn Sie das Foto auf Ihren PC herunterladen m√∂chten, beachten Sie bitte :ref:`filezilla`.

**Code**

.. note::
    Sie k√∂nnen den untenstehenden Code **√Ñndern/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen**. Aber zuerst m√ºssen Sie zum Quellcode-Pfad wie ``raphael-kit/python`` gehen. Nachdem Sie den Code ge√§ndert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um den Effekt zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

	#!/usr/bin/env python3

	from picamera import PiCamera
	import RPi.GPIO as GPIO
	import time
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')


	camera = PiCamera()

	LedPin = 17 # Set GPIO17 as LED pin
	BtnPin = 18 # Set GPIO18 as button pin

	status = False

	def setup():
		GPIO.setmode(GPIO.BCM)
		GPIO.setup(LedPin, GPIO.OUT, initial=GPIO.HIGH)
		GPIO.setup(BtnPin, GPIO.IN)
		camera.start_preview(alpha=200)

	def takePhotos(pin):
		global status
		status = True

	def main():
		global status
		GPIO.add_event_detect(BtnPin, GPIO.FALLING, callback=takePhotos)
		while True:
			if status:
				for i in range(5):
					GPIO.output(LedPin, GPIO.LOW)
					time.sleep(0.1)
					GPIO.output(LedPin, GPIO.HIGH)
					time.sleep(0.1)
				camera.capture(f'{user_home}/my_photo.jpg')
				print ('Take a photo!')          
				status = False
			else:
				GPIO.output(LedPin, GPIO.HIGH)
			time.sleep(1)

	def destroy():
		camera.stop_preview()
		GPIO.output(LedPin, GPIO.HIGH)
		GPIO.cleanup()

	if __name__ == '__main__':
		setup()
		try:
			main()
		except KeyboardInterrupt:
			destroy()

**Code-Erkl√§rung**

.. code-block:: python

    GPIO.add_event_detect(BtnPin, GPIO.FALLING, callback=takePhotos)

Legt das Ereignis f√ºr ``BtnPin`` fest. Wenn der Knopf gedr√ºckt wird (das Pegelsignal wechselt von hoch nach niedrig), wird die Funktion ``takePhotos()`` aufgerufen.

.. code-block:: python

    def takePhotos(pin):
        global status
        status = True

Wenn ``takePhotos()`` aufgerufen wird, wird der Wert von ``status`` auf ``True`` ge√§ndert.

.. code-block:: python

    if status:
        for i in range(5):
            GPIO.output(LedPin, GPIO.LOW)
            time.sleep(0.1)
            GPIO.output(LedPin, GPIO.HIGH)
            time.sleep(0.1)
        camera.capture(f'{user_home}/my_photo.jpg')
        print ('Take a photo!')           
        status = False
    else:
        GPIO.output(LedPin, GPIO.HIGH)
    time.sleep(1)

Wenn ``status`` auf ``True`` gesetzt ist, l√§sst der Raspberry Pi die LED blinken und nimmt ein Foto auf. Das Foto wird als ``my_photo.jpg`` benannt und im Verzeichnis ``~`` gespeichert.

Ph√§nomen-Bild
------------------------

.. image:: ../img/4.1.1camera.JPG
   :align: center
