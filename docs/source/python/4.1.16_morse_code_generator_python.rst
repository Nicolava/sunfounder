.. _4.1.16_py:

4.1.16 モールス符号ジェネレータ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

はじめに
-----------------

このプロジェクトでは、モールス符号ジェネレータを作成します。Raspberry Piに英字のシリーズを入力すると、それがモールス符号として表示されます。

必要な部品
------------------------------

このプロジェクトには、以下の部品が必要です。

.. image:: ../img/list_Morse_Code_Generator.png
    :align: center

全てのキットを購入するのは確かに便利です。こちらがリンクです:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから、部品を個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`GPIO拡張ボード`
        - |link_gpio_board_buy|
    *   - :ref:`ブレッドボード`
        - |link_breadboard_buy|
    *   - :ref:`ジャンパーワイヤー`
        - |link_wires_buy|
    *   - :ref:`抵抗器`
        - |link_resistor_buy|
    *   - :ref:`LED`
        - |link_led_buy|
    *   - :ref:`ブザー`
        - \-
    *   - :ref:`トランジスタ`
        - |link_transistor_buy|

回路図
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../img/Schematic_three_one11.png
   :align: center

実験手順
----------------------------

**ステップ1:** 回路を組み立てる。（ブザーの極性に注意してください。
+ ラベルが付いている方が正極で、もう一方が負極です。）

.. image:: ../img/image269.png

**ステップ2**: コードファイルを開く。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**ステップ3**: 実行する。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.16_MorseCodeGenerator.py

プログラムを実行した後、文字のシリーズを入力すると、ブザーと
LEDが対応するモールス符号の信号を送信します。

**コード**

.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    BeepPin=22
    ALedPin=17

    MORSECODE = {
        'A':'01', 'B':'1000', 'C':'1010', 'D':'100', 'E':'0', 'F':'0010', 'G':'110',
        'H':'0000', 'I':'00', 'J':'0111', 'K':'101', 'L':'0100', 'M':'11', 'N':'10',
        'O':'111', 'P':'0110', 'Q':'1101', 'R':'010', 'S':'000', 'T':'1',
        'U':'001', 'V':'0001', 'W':'011', 'X':'1001', 'Y':'1011', 'Z':'1100',
        '1':'01111', '2':'00111', '3':'00011', '4':'00001', '5':'00000',
        '6':'10000', '7':'11000', '8':'11100', '9':'11110', '0':'11111',
        '?':'001100', '/':'10010', ',':'110011', '.':'010101', ';':'101010',
        '!':'101011', '@':'011010', ':':'111000',
        }

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(ALedPin,GPIO.OUT,initial=GPIO.LOW)

    def on():
        GPIO.output(BeepPin, 1)
        GPIO.output(ALedPin, 1)

    def off():
        GPIO.output(BeepPin, 0)
        GPIO.output(ALedPin, 0)

    def beep(dt):	# dt for delay time.
        on()
        time.sleep(dt)
        off()
        time.sleep(dt)

    def morsecode(code):
        pause = 0.25
        for letter in code:
            for tap in MORSECODE[letter]:
                if tap == '0':
                    beep(pause/2)
                if tap == '1':
                    beep(pause)
            time.sleep(pause)

    def main():
        while True:
            code=input("Please input the messenger:")
            code = code.upper()
            print(code)
            morsecode(code)

    def destroy():
        print("")
        GPIO.output(BeepPin, GPIO.LOW)
        GPIO.output(ALedPin, GPIO.LOW)
        GPIO.cleanup()  

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**コード説明**

.. code-block:: python

    MORSECODE = {
        'A':'01', 'B':'1000', 'C':'1010', 'D':'100', 'E':'0', 'F':'0010', 'G':'110',
        'H':'0000', 'I':'00', 'J':'0111', 'K':'101', 'L':'0100', 'M':'11', 'N':'10',
        'O':'111', 'P':'0110', 'Q':'1101', 'R':'010', 'S':'000', 'T':'1',
        'U':'001', 'V':'0001', 'W':'011', 'X':'1001', 'Y':'1011', 'Z':'1100',
        '1':'01111', '2':'00111', '3':'00011', '4':'00001', '5':'00000',
        '6':'10000', '7':'11000', '8':'11100', '9':'11110', '0':'11111',
        '?':'001100', '/':'10010', ',':'110011', '.':'010101', ';':'101010',
        '!':'101011', '@':'011010', ':':'111000',
        }

この構造体MORSEはモールス符号の辞書で、文字A-Z、数字0-9、および記号「？」「/」「：」「、」「。」「;」「！」「@」を含んでいます。

.. code-block:: python

    def on():
        GPIO.output(BeepPin, 1)
        GPIO.output(ALedPin, 1)

関数 ``on()`` はブザーとLEDを起動します。

.. code-block:: python

    def off():
        GPIO.output(BeepPin, 0)
        GPIO.output(ALedPin, 0)

関数 ``off()`` はブザーとLEDをオフにするために使用されます。

.. code-block:: python

    def beep(dt):   # x for dalay time.
        on()
        time.sleep(dt)
        off()
        time.sleep(dt)

関数 ``beep()`` は、ブザーとLEDが ``dt`` の特定の間隔で音を鳴らし、点滅させるための関数を定義します。

.. code-block:: python

    def morsecode(code):
        pause = 0.25
        for letter in code:
            for tap in MORSECODE[letter]:
                if tap == '0':
                    beep(pause/2)
                if tap == '1':
                    beep(pause)
            time.sleep(pause)

関数 ``morsecode()`` は、コードの“1”が音や光を継続的に発するのに対して、「0」が短く音や光を発するように入力文字のモールスコードを処理するために使用されます。例えば、"SOS"と入力すると、信号は三つの短い、三つの長い、その後三つの短いセグメント「· · · - - - · · · 」を持つことになります。

.. code-block:: python

    def main():
        while True:
            code=input("Please input the messenger:")
            code = code.upper()
            print(code)
            morsecode(code)

キーボードで関連する文字を入力すると、 ``upper()`` は入力された文字をその大文字形式に変換します。

``printf()`` はコンピュータの画面にクリアテキストを印刷し、 ``morsecod()`` 関数はブザーとLEDがモールスコードを発信するようにします。

現象の画像
-----------------------

.. image:: ../img/image270.jpeg
   :align: center