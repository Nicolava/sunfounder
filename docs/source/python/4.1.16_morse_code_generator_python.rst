.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **ExpertenunterstÃ¼tzung**: LÃ¶sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre FÃ¤higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie frÃ¼hzeitigen Zugang zu neuen ProduktankÃ¼ndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: GenieÃŸen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    ðŸ‘‰ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _4.1.16_py:

4.1.16 Morse-Code-Generator
===========================================

Einleitung
-----------------

In diesem Projekt erstellen wir einen Morse-Code-Generator, bei dem Sie auf einem Raspberry Pi eine Reihe von englischen Buchstaben eingeben, um sie in Morsecode darzustellen.

BenÃ¶tigte Komponenten
------------------------------

FÃ¼r dieses Projekt benÃ¶tigen wir die folgenden Komponenten.

.. image:: ../img/list_Morse_Code_Generator.png
    :align: center

Es ist definitiv praktisch, ein komplettes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie kÃ¶nnen diese auch einzeln Ã¼ber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Schaltplan
-----------------------

============ ======== ======== ===
T-Board Name physisch wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../img/Schematic_three_one11.png
   :align: center

Experimentelle Verfahren
----------------------------

**Schritt 1:** Bauen Sie den Schaltkreis. (Achten Sie auf die Pole des Buzzers: 
Der mit + gekennzeichnete ist der positive Pol und der andere ist der negative.)

.. image:: ../img/image269.png

**Schritt 2**: Ã–ffnen Sie die Code-Datei.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**Schritt 3**: Starten.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.16_MorseCodeGenerator.py

Nachdem das Programm lÃ¤uft, geben Sie eine Reihe von Zeichen ein, und der Buzzer sowie die LED senden die entsprechenden Morsecode-Signale.

**Code**


.. code-block:: python

    #!/usr/bin/env python3
    import RPi.GPIO as GPIO
    import time

    BeepPin=22
    ALedPin=17

    MORSECODE = {
        'A':'01', 'B':'1000', 'C':'1010', 'D':'100', 'E':'0', 'F':'0010', 'G':'110',
        'H':'0000', 'I':'00', 'J':'0111', 'K':'101', 'L':'0100', 'M':'11', 'N':'10',
        'O':'111', 'P':'0110', 'Q':'1101', 'R':'010', 'S':'000', 'T':'1',
        'U':'001', 'V':'0001', 'W':'011', 'X':'1001', 'Y':'1011', 'Z':'1100',
        '1':'01111', '2':'00111', '3':'00011', '4':'00001', '5':'00000',
        '6':'10000', '7':'11000', '8':'11100', '9':'11110', '0':'11111',
        '?':'001100', '/':'10010', ',':'110011', '.':'010101', ';':'101010',
        '!':'101011', '@':'011010', ':':'111000',
        }

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BeepPin, GPIO.OUT, initial=GPIO.LOW)
        GPIO.setup(ALedPin,GPIO.OUT,initial=GPIO.LOW)

    def on():
        GPIO.output(BeepPin, 1)
        GPIO.output(ALedPin, 1)

    def off():
        GPIO.output(BeepPin, 0)
        GPIO.output(ALedPin, 0)

    def beep(dt):	# dt for delay time.
        on()
        time.sleep(dt)
        off()
        time.sleep(dt)

    def morsecode(code):
        pause = 0.25
        for letter in code:
            for tap in MORSECODE[letter]:
                if tap == '0':
                    beep(pause/2)
                if tap == '1':
                    beep(pause)
            time.sleep(pause)

    def main():
        while True:
            code=input("Please input the messenger:")
            code = code.upper()
            print(code)
            morsecode(code)

    def destroy():
        print("")
        GPIO.output(BeepPin, GPIO.LOW)
        GPIO.output(ALedPin, GPIO.LOW)
        GPIO.cleanup()  

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Code-ErklÃ¤rung**

.. code-block:: python

    MORSECODEÂ =Â {
    Â Â Â Â 'A':'01',Â 'B':'1000',Â 'C':'1010',Â 'D':'100',Â 'E':'0',Â 'F':'0010',Â 'G':'110',
    Â Â Â Â 'H':'0000',Â 'I':'00',Â 'J':'0111',Â 'K':'101',Â 'L':'0100',Â 'M':'11',Â 'N':'10',
    Â Â Â Â 'O':'111',Â 'P':'0110',Â 'Q':'1101',Â 'R':'010',Â 'S':'000',Â 'T':'1',
    Â Â Â Â 'U':'001',Â 'V':'0001',Â 'W':'011',Â 'X':'1001',Â 'Y':'1011',Â 'Z':'1100',
    Â Â Â Â '1':'01111',Â '2':'00111',Â '3':'00011',Â '4':'00001',Â '5':'00000',
    Â Â Â Â '6':'10000',Â '7':'11000',Â '8':'11100',Â '9':'11110',Â '0':'11111',
    Â Â Â Â '?':'001100',Â '/':'10010',Â ',':'110011',Â '.':'010101',Â ';':'101010',
    Â Â Â Â '!':'101011',Â '@':'011010',Â ':':'111000',
    Â Â Â Â }

Diese Struktur namens MORSE ist das WÃ¶rterbuch des Morse-Codes und enthÃ¤lt 
die Zeichen A-Z, die Zahlen 0-9 und die Zeichen â€ž?â€œ â€ž/â€œ â€ž:â€œ â€ž,â€œ â€ž.â€œ â€ž;â€œ â€ž!â€œ â€ž@â€œ .

.. code-block:: python

    defÂ on():
    Â Â Â Â GPIO.output(BeepPin,Â 1)
    Â Â Â Â GPIO.output(ALedPin,Â 1)

Die Funktion ``on()`` aktiviert den Summer und die LED.

.. code-block:: python

    defÂ off():
    Â Â Â Â GPIO.output(BeepPin,Â 0)
    Â Â Â Â GPIO.output(ALedPin,Â 0)

Die Funktion ``off()`` wird verwendet, um den Summer und die LED auszuschalten.

.. code-block:: python

    defÂ beep(dt):Â Â Â #Â xÂ forÂ dalayÂ time.
    Â Â Â Â on()
    Â Â Â Â time.sleep(dt)
    Â Â Â Â off()
    Â Â Â Â time.sleep(dt)

Definieren Sie eine Funktion ``beep()``, mit der der Summer und die LED in einem bestimmten Intervall von ``dt`` TÃ¶ne ausgeben und blinken.

.. code-block:: python

    defÂ morsecode(code):
    Â Â Â Â pauseÂ =Â 0.25
    Â Â Â Â forÂ letterÂ inÂ code:
    Â Â Â Â Â Â Â Â forÂ tapÂ inÂ MORSECODE[letter]:
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ tapÂ ==Â '0':
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause/2)
    Â Â Â Â Â Â Â Â Â Â Â Â ifÂ tapÂ ==Â '1':
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â beep(pause)
    Â Â Â Â Â Â Â Â time.sleep(pause)

Die Funktion ``morsecode()`` wird verwendet, um den Morsecode von eingegebenen
Zeichen zu verarbeiten. Dabei lÃ¤sst der â€ž1â€œ-Code kontinuierlich TÃ¶ne oder Lichter erzeugen und der â€ž0â€œ-Code gibt kurz TÃ¶ne oder Lichter aus, z.B. bei der Eingabe von â€žSOSâ€œ gibt es ein Signal, das aus drei kurzen, drei langen und dann drei kurzen Segmenten â€ž Â· Â· Â· - - - Â· Â· Â· â€œ besteht.

.. code-block:: python

    defÂ main():
    Â Â Â Â whileÂ True:
    Â Â Â Â Â Â Â Â code=input("PleaseÂ inputÂ theÂ messenger:")
    Â Â Â Â Â Â Â Â codeÂ =Â code.upper()
    Â Â Â Â Â Â Â Â print(code)
    Â Â Â Â Â Â Â Â morsecode(code)

Wenn Sie die entsprechenden Zeichen Ã¼ber die Tastatur eingeben, konvertiert ``upper()`` die eingegebenen Buchstaben in ihre GroÃŸform.

``printf()`` gibt dann den Klartext auf dem Computerbildschirm aus, und die Funktion ``morsecod()`` lÃ¤sst den Summer und die LED Morsecode ausgeben.

PhÃ¤nomen-Bild
-----------------------

.. image:: ../img/image270.jpeg
   :align: center