.. _2.1.5_py:

2.1.5 Neigungsschalter
=========================

Einführung
----------

Dies ist ein Kugel-Neigungsschalter mit einer Metallkugel im Inneren. Er dient zur
Erkennung von Neigungen in einem kleinen Winkel.

Benötigte Komponenten
---------------------

Für dieses Projekt benötigen wir die folgenden Komponenten.

.. image:: ../img/list_2.1.3_tilt_switch.png

Es ist definitiv praktisch, ein komplettes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie können sie auch einzeln über die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-

Schaltplan
---------------------

.. image:: ../img/image307.png

.. image:: ../img/image308.png

Experimentelle Verfahren
----------------------------

**Schritt 1:** Schaltung aufbauen.

.. image:: ../img/image169.png

**Schritt 2:** Verzeichnis wechseln.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python/

**Schritt 3:** Starten.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.5_Tilt.py

Stellen Sie den Neigungsschalter vertikal auf, und die grüne LED wird eingeschaltet. Wenn Sie
ihn neigen, wird "Tilt!" auf dem Bildschirm angezeigt und die rote LED wird
eingeschaltet. Stellen Sie ihn wieder vertikal auf, und die grüne LED leuchtet wieder auf.

**Code**

.. note::

    Sie können den untenstehenden Code **ändern/zurücksetzen/kopieren/ausführen/stoppen**. Aber bevor Sie das tun, müssen Sie zum Quellcode-Pfad wie ``raphael-kit/python`` navigieren. Nachdem Sie den Code geändert haben, können Sie ihn direkt ausführen, um das Ergebnis zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

    import RPi.GPIO as GPIO

    TiltPin = 17
    Gpin   = 27
    Rpin   = 22

    def setup():
        GPIO.setmode(GPIO.BCM)       # Numbers GPIOs by physical location
        GPIO.setup(Gpin, GPIO.OUT)     # Set Green Led Pin mode to output
        GPIO.setup(Rpin, GPIO.OUT)     # Set Red Led Pin mode to output
        GPIO.setup(TiltPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # Set BtnPin's mode is input, and pull up to high level(3.3V)
        GPIO.add_event_detect(TiltPin, GPIO.BOTH, callback=detect, bouncetime=200)

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
        if x == 1:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)

    def Print(x):
        if x == 0:
            print ('    *************')
            print ('    *   Tilt!   *')
            print ('    *************')

    def detect(chn):
        Led(GPIO.input(TiltPin))
        Print(GPIO.input(TiltPin))

    def loop():
        while True:
            pass

    def destroy():
        GPIO.output(Gpin, GPIO.HIGH)       # Green led off
        GPIO.output(Rpin, GPIO.HIGH)       # Red led off
        GPIO.cleanup()                     # Release resource

    if __name__ == '__main__':     # Program start from here
        setup()
        try:
            loop()
        except KeyboardInterrupt:  # When 'Ctrl+C' is pressed, the program destroy() will be  executed.
            destroy()

**Code-Erklärung**

.. code-block:: python

    GPIO.add_event_detect(TiltPin, GPIO.BOTH, callback=detect, bouncetime=200)

Richte eine Erkennung am TiltPin ein und rufe die Callback-Funktion zur Erkennung auf.

.. code-block:: python

    def Led(x):
        if x == 0:
            GPIO.output(Rpin, 1)
            GPIO.output(Gpin, 0)
        if x == 1:
            GPIO.output(Rpin, 0)
            GPIO.output(Gpin, 1)

Definiere eine Funktion Led(), um die beiden LEDs ein- oder auszuschalten. Wenn x=0, leuchtet die rote
LED; ansonsten wird die grüne LED eingeschaltet.

.. code-block:: python

    def Print(x):
        if x == 0:
            print ('    *************')
            print ('    *   Tilt!   *')
            print ('    *************')

Erstelle eine Funktion, Print(), um die obigen Zeichen auf dem Bildschirm anzuzeigen.

.. code-block:: python

    def detect(chn):
        Led(GPIO.input(TiltPin))
        Print(GPIO.input(TiltPin))

Definiere eine Callback-Funktion für die Neigungsrückmeldung. Hole den gelesenen Wert des
Neigungsschalters, dann steuert die Funktion Led() das Ein- oder Ausschalten
der beiden LEDs, abhängig vom gelesenen Wert des Neigungsschalters.

Phänomen-Bild
--------------------

.. image:: ../img/image170.jpeg


