.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

Vid√©o 21 : Utilisation d'un capteur ultrasonique HC-SR04 pour l'√©cholocalisation
=======================================================================================

Ce tutoriel couvre le processus de cr√©ation d'un capteur de distance ultrasonique avec un Raspberry Pi en utilisant le capteur HC-SR04.
Cette vid√©o explique les principes de l'√©cholocalisation, pr√©sente les composants n√©cessaires, d√©montre la configuration du c√¢blage,
et guide pas √† pas √† travers le processus de codage.
Elle souligne l'importance d'une temporisation pr√©cise dans l'ex√©cution du code pour des mesures de distance exactes et promeut de bonnes pratiques d'ing√©nierie.

1. **Introduction √† l'√âcholocalisation** : Utiliser le son pour d√©tecter la position des objets, inspir√© par les chauves-souris et les baleines.
2. **Vue d'ensemble des composants** : Pr√©sentation du capteur ultrasonique HC-SR04 et de sa connexion au Raspberry Pi.
3. **Configuration du c√¢blage** : Connexion du capteur HC-SR04 aux broches GPIO du Raspberry Pi pour l'alimentation, la masse, la g√¢chette et l'√©cho.
4. **Processus de codage** : Parcours du code Python pour g√©n√©rer des impulsions ultrasoniques, activer le capteur et mesurer le temps de retour de l'√©cho.
5. **Consid√©rations de temporisation** : Importance d'une temporisation pr√©cise pour une mesure de distance exacte.
6. **Bonnes pratiques d'ing√©nierie** : Insister sur la planification et la compr√©hension du code avant la mise en ≈ìuvre.
7. **Attente pour la broche d'√©cho** : Utilisation d'une boucle while pour attendre que la broche d'√©cho soit activ√©e.
8. **Enregistrement de l'heure de d√©but** : Capture du temps syst√®me lorsque la broche d'√©cho est activ√©e pour marquer le d√©but de la mesure.
9. **Mesure du temps de parcours du ping** : Calcul du temps de parcours du ping en d√©terminant la diff√©rence de temps entre le moment o√π la broche d'√©cho est activ√©e et d√©sactiv√©e.
10. **Conversion des unit√©s** : Multiplication du temps de parcours du ping par un million pour une lisibilit√©.
11. **Ajout de d√©lai** : Introduction d'un d√©lai apr√®s chaque mesure pour √©viter les √©chos multiples.
12. **Calcul de la distance** : Utilisation de la vitesse du son et du temps de parcours du ping pour calculer la distance jusqu'√† la cible.


**Vid√©o**

.. raw:: html

    <iframe width="700" height="500" src="https://www.youtube.com/embed/SoAGLXoQ5XI?si=OPMqLtQ53hKNHs4j" title="Lecteur vid√©o YouTube" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
