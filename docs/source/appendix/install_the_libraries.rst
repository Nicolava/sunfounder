 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _install_the_libraries:

Installer les biblioth√®ques
==============================

Pour les utilisateurs C
---------------------------

BCM2835
~~~~~~~~~~~~~~~
Il s'agit d'une biblioth√®que en C pour Raspberry Pi (RPi). Elle permet d'acc√©der aux fonctions GPIO et autres E/S sur la puce Broadcom BCM 2835, utilis√©e dans le Raspberry Pi, permettant ainsi l'acc√®s aux broches GPIO sur la prise IDE √† 26 broches de la carte RPi pour contr√¥ler et interfacer divers dispositifs externes.

Elle fournit des fonctions pour lire les entr√©es num√©riques et d√©finir les sorties num√©riques, utiliser SPI et I2C, et acc√©der aux minuteries du syst√®me. La d√©tection d'√©v√©nements sur les broches est prise en charge par le sondage (les interruptions ne sont pas prises en charge).

Fonctionne sur toutes les versions jusqu'√† et y compris le RPI 4. Fonctionne avec toutes les versions de Debian jusqu'√† et y compris Debian Buster 10.

Ouvrez un terminal et t√©l√©chargez la biblioth√®que ``bcm2835`` vers le chemin ``~``.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~
    wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.69.tar.gz

D√©compressez le paquet.

.. raw:: html

   <run></run>

.. code-block:: 

    tar zxvf bcm2835-1.69.tar.gz

Installez la biblioth√®que BCM2835 avec les commandes suivantes.

.. raw:: html

   <run></run>

.. code-block:: 

    cd bcm2835-1.69
    ./configure
    make
    sudo make check
    sudo make install

* R√©f√©rence : `bcm2835 <http://www.airspayce.com/mikem/bcm2835/>`_  


Pour les utilisateurs Python
--------------------------------

.. _create_virtual:

Cr√©er un environnement virtuel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lorsque vous utilisez Raspberry Pi ou des appareils similaires, il est recommand√© d'installer les paquets avec ``pip`` dans un environnement virtuel. Cela offre une isolation des d√©pendances, augmente la s√©curit√© du syst√®me, maintient la propret√© du syst√®me, facilite la migration et le partage des projets, simplifiant ainsi la gestion des d√©pendances. Ces avantages font des environnements virtuels un outil extr√™mement important et utile dans le d√©veloppement Python.

Voici les √©tapes pour cr√©er un environnement virtuel :

**1. Cr√©er un environnement virtuel**

Tout d'abord, vous devez vous assurer que votre syst√®me a Python install√©. Python version 3.3 et ult√©rieure est livr√© avec le module ``venv`` pour cr√©er des environnements virtuels, √©liminant ainsi le besoin d'une installation s√©par√©e. Si vous utilisez Python 2 ou une version ant√©rieure √† Python 3.3, vous devrez installer ``virtualenv``.

* Pour Python 3 :

Python 3.3 et les versions ult√©rieures peuvent utiliser directement le module ``venv`` :

.. raw:: html

    <run></run>

.. code-block:: shell

    python3 -m venv myenv

Cela cr√©era un environnement virtuel nomm√© ``myenv`` dans le r√©pertoire actuel.

* Pour Python 2 :

Si vous utilisez encore Python 2, vous devez d'abord installer ``virtualenv`` :

.. raw:: html

    <run></run>

.. code-block:: shell

    pip install virtualenv

Ensuite, cr√©ez un environnement virtuel :

.. raw:: html

    <run></run>

.. code-block:: shell

    virtualenv myenv

Cela cr√©e √©galement un environnement virtuel nomm√© ``myenv`` dans le r√©pertoire actuel.

**2. Activation de l'environnement virtuel**

Apr√®s avoir cr√©√© l'environnement virtuel, vous devez l'activer pour l'utiliser.

.. note::

    Chaque fois que vous red√©marrez le Raspberry Pi ou ouvrez un nouveau terminal, vous devrez ex√©cuter la commande suivante √† nouveau pour activer l'environnement virtuel.

.. raw:: html

    <run></run>

.. code-block:: shell

    source myenv/bin/activate

Une fois l'environnement virtuel activ√©, vous verrez le nom de l'environnement avant l'invite de commande, indiquant que vous travaillez dans l'environnement virtuel.


**3. Installation des d√©pendances**

Avec l'environnement virtuel activ√©, vous pouvez utiliser pip pour installer les d√©pendances requises. Par exemple :

.. raw:: html

    <run></run>

.. code-block:: shell

    pip install requests

Cela installera la biblioth√®que requests dans l'environnement virtuel actuel, plut√¥t que dans l'environnement global. Cette √©tape ne doit √™tre effectu√©e qu'une seule fois.


**4. Sortie de l'environnement virtuel**

Lorsque vous avez termin√© votre travail et souhaitez quitter l'environnement virtuel, ex√©cutez simplement :

.. raw:: html

    <run></run>

.. code-block:: shell

    deactivate

Cela vous ram√®nera √† l'environnement Python global du syst√®me.

**5. Suppression de l'environnement virtuel**

Si vous n'avez plus besoin d'un environnement virtuel particulier, vous pouvez simplement supprimer le r√©pertoire contenant l'environnement virtuel :

.. raw:: html

    <run></run>

.. code-block:: shell

    rm -rf myenv


Luma.LED_Matrix
~~~~~~~~~~~~~~~~~~~~~~~

Il s'agit d'une biblioth√®que Python 3 pour interfacer des affichages de matrice LED avec le pilote MAX7219 (utilisant SPI), WS2812 (NeoPixels, y compris Pimoroni Unicorn pHat/Hat et Unicorn Hat HD) et APA102 (DotStar) sur le Raspberry Pi et d'autres ordinateurs monocartes bas√©s sur Linux.

Installez d'abord les d√©pendances pour la biblioth√®que avec :

.. raw:: html

   <run></run>

.. code-block:: 

    sudo usermod -a -G spi,gpio pi
    sudo apt install build-essential python3-dev python3-pip libfreetype6-dev libjpeg-dev libopenjp2-7 libtiff5

.. note:: warning

    Les versions par d√©faut de pip et setuptools fournies avec apt sur Raspbian sont vraiment anciennes, et peuvent emp√™cher l'installation correcte de certains composants. Assurez-vous qu'ils sont √† jour en les mettant √† niveau d'abord :

    .. raw:: html

       <run></run>

    .. code-block:: 

        sudo -H pip install --upgrade --ignore-installed pip setuptools

Proc√©dez √† l'installation de la derni√®re version de la biblioth√®que luma.led_matrix directement depuis PyPI :

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 -m pip install --upgrade luma.led_matrix


* R√©f√©rence : `Luma.LED_Matrix <https://luma-led-matrix.readthedocs.io/en/latest/install.html>`_

Spidev et MFRC522
~~~~~~~~~~~~~~~~~~~~~~~~~~~

La biblioth√®que ``spidev`` aide √† g√©rer les interactions avec le SPI et est un composant cl√© de ce tutoriel car nous en avons besoin pour que le Raspberry Pi interagisse avec le RFID RC522.

Ex√©cutez la commande suivante pour installer ``spidev`` sur votre Raspberry Pi via ``pip``.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo pip3 install spidev


Continuez √† installer la biblioth√®que MFRC522.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo pip3 install mfrc522

La biblioth√®que MFRC522 contient deux fichiers : ``MFRC522.py`` et ``SimpleMFRC522.py``. 

Parmi eux, ``MFRC522.py`` est la r√©alisation de l'interface RFID RC522, cette biblioth√®que g√®re tout le travail complexe de communication avec le RFID via l'interface SPI du Pi.

``SimpleMFRC522.py`` prend le fichier ``MFRC522.py`` et le simplifie grandement en vous permettant de g√©rer seulement quelques fonctions au lieu de plusieurs fonctions.
